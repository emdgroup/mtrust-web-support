{"version":3,"file":"static/js/8090.ed15d02f.chunk.js","mappings":"0GAAA,SAASA,EAAQC,GACf,YAAiBC,IAAVD,GAAiC,OAAVA,GAA4B,UAAVA,CAClD,C,SAEgBE,IACd,MAAMC,EAAwB,IAAIC,IAAI,CACpC,QACA,KACA,QACA,OACA,UAN4BC,UAAAC,OAAA,QAAAL,IAAAI,UAAA,GAAAA,UAAA,GAA+B,KAWvDE,EAAoB,CAAC,EAC3B,IAAK,MAAMC,KAAQC,KAAKC,GAAGC,WAAY,CACrC,GAAIR,EAAsBS,IAAIJ,EAAKK,OAASd,EAAQS,EAAKR,OACvD,SAEF,MAAMc,EAA8B,KAAfN,EAAKR,OAAsBQ,EAAKR,MACrDO,EAAkBC,EAAKK,MAAQC,C,CAIjCL,KAAKM,iBAAmBR,EAGxB,MAiBMS,EAAW,IAAIC,kBAjBHC,IAEhB,IAAK,MAAMC,KAAYD,EAAe,CACpC,MAAM,cAAEE,GAAkBD,EAC1B,IAAKhB,EAAsBS,IAAIQ,GAAgB,CAC7C,MAAMC,EAAYZ,KAAKC,GAAGY,aAAaF,GACnCrB,EAAQsB,UACHZ,KAAKM,iBAAiBK,GAE7BX,KAAKM,iBAAiBK,GAAiBC,C,EAM7CZ,KAAKM,iBAAgBQ,OAAAC,OAAA,GAAQf,KAAKM,iBAAkB,IAStD,OANAC,EAASS,QAAQhB,KAAKC,GAAI,CACxBgB,SAAS,EACTC,WAAW,EACXhB,YAAY,IAGPK,CACT,C,wDChDaY,EAAiBC,GAC5BA,EAAWC,QAAQC,GAAcA,IAAWC,KAAK,I,kFCNnD,MCcaC,EAAO,M,+BAmBV,KAAAC,YAAcC,UACpB,MAAMC,EAA4B3B,KAAKC,GAAG2B,cACxC,kHAGAD,KAEEE,EAAMC,SAAWH,GACjBA,EAAaI,SAASF,EAAMC,WAE7BH,EAAuB,WAGpB,eAAgBA,QACXA,EAA2CK,aAElDL,EAAaM,QAGfN,EAAaO,Q,8GAIjBC,iBAAAA,GACEnC,KAAKoC,mBAAqB3C,EAAAA,EAAgB4C,KAAKrC,KAAM,CACnD,gBACA,WACA,Q,CAIJsC,oBAAAA,GAEMtC,KAAKoC,oBAAoBpC,KAAKoC,mBAAmBG,Y,CAGvDC,MAAAA,GACE,MAAMC,GAAKtB,EAAAA,EAAAA,GAAc,CACvB,WACAnB,KAAK0C,cAAgB,0BACrB1C,KAAK2C,UAAY,aAAa3C,KAAK2C,WACnC3C,KAAK4C,MAAQ,aAAa5C,KAAK4C,SAGjC,OACEC,EAAAA,EAAAA,GAAA,QAAA/B,OAAAC,OAAA,CAAA+B,IAAA,4CACM9C,KAAKM,iBAAgB,CACzByC,MAAON,EACPO,QAAShD,KAAKyB,YACdwB,KAAK,SAELJ,EAAAA,EAAAA,GAAA,QAAAC,IAAA,6C,wCDpFW,q4D","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/cloneAttributes.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-label/ld-label.css?tag=ld-label&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-label/ld-label.tsx"],"sourcesContent":["function isFalsy(value: string | null | undefined) {\n  return value === undefined || value === null || value === 'false'\n}\n\nexport function cloneAttributes(attributesToIgnore: string[] = []) {\n  const attributesToIgnoreSet = new Set([\n    'style',\n    'id',\n    'class',\n    'slot',\n    'part',\n    ...attributesToIgnore,\n  ])\n\n  // Get attributes not in props.\n  const attributesToClone = {}\n  for (const attr of this.el.attributes) {\n    if (attributesToIgnoreSet.has(attr.name) || isFalsy(attr.value)) {\n      continue\n    }\n    const valueToClone = attr.value === '' ? true : attr.value\n    attributesToClone[attr.name] = valueToClone\n  }\n\n  // Update cloned attributes state.\n  this.clonedAttributes = attributesToClone\n\n  // Set up attributes observer.\n  const callback = (mutationsList) => {\n    // Update cloned attributes state.\n    for (const mutation of mutationsList) {\n      const { attributeName } = mutation\n      if (!attributesToIgnoreSet.has(attributeName)) {\n        const attrValue = this.el.getAttribute(attributeName)\n        if (isFalsy(attrValue)) {\n          delete this.clonedAttributes[attributeName]\n        } else {\n          this.clonedAttributes[attributeName] = attrValue\n        }\n      }\n    }\n\n    // Trigger state update.\n    this.clonedAttributes = { ...this.clonedAttributes }\n  }\n  const observer = new MutationObserver(callback)\n  observer.observe(this.el, {\n    subtree: false,\n    childList: false,\n    attributes: true,\n  })\n\n  return observer\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host {\n  display: inline-flex;\n\n  .ld-label {\n    width: 100%;\n  }\n}\n\n.ld-label {\n  /* layout */\n  --ld-label-column-gap: 0.625rem;\n  --ld-label-row-gap: var(--ld-sp-6);\n\n  /* colors */\n  --ld-label-col: var(--ld-col-neutral-900);\n  --ld-label-disabled-col: var(--ld-col-neutral-300);\n\n  color: var(--ld-label-col);\n  font: var(--ld-typo-label-s);\n  display: inline-grid;\n  gap: var(--ld-label-row-gap) 0;\n  max-width: 100%;\n  align-content: flex-start;\n}\n\n.ld-label--left,\n.ld-label--right {\n  justify-content: flex-start;\n  align-items: center;\n  gap: 0 var(--ld-label-column-gap);\n\n  > ::slotted(.ld-checkbox),\n  > .ld-checkbox,\n  > ::slotted(.ld-radio),\n  > .ld-radio,\n  > ::slotted(.ld-toggle),\n  > .ld-toggle,\n  > ::slotted(.ld-input),\n  > .ld-input,\n  > ::slotted(.ld-select),\n  > .ld-select {\n    grid-area: input;\n    align-self: baseline;\n  }\n\n  > ::slotted(.ld-input-message),\n  > .ld-input-message {\n    grid-area: message;\n    margin-top: var(--ld-sp-4);\n  }\n}\n\n.ld-label--align-message {\n  &.ld-label--left {\n    > ::slotted(.ld-input-message),\n    > .ld-input-message {\n      grid-column-start: 2;\n    }\n  }\n\n  &.ld-label--right {\n    > ::slotted(.ld-input-message),\n    > .ld-input-message {\n      grid-column-end: 2;\n    }\n  }\n}\n\n.ld-label--left {\n  grid-template-columns: 1fr auto;\n  grid-template-areas:\n    'label input'\n    'message message';\n}\n\n.ld-label--right {\n  grid-template-columns: auto 1fr;\n  grid-template-areas:\n    'input label'\n    'message message';\n}\n\n.ld-label--m {\n  font: var(--ld-typo-label-m);\n  line-height: 1;\n}\n","import { Component, Element, h, Prop, State } from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { getClassNames } from '../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part tag - Actual label element\n */\n@Component({\n  tag: 'ld-label',\n  styleUrl: 'ld-label.css',\n  shadow: true,\n})\nexport class LdLabel implements ClonesAttributes {\n  @Element() el: HTMLLabelElement\n\n  private attributesObserver: MutationObserver\n\n  /** Align input message with input position. */\n  @Prop() for?: string\n\n  /** Align input message with input position. */\n  @Prop() alignMessage?: boolean\n\n  /** Relative position to labeled element. Default is top. */\n  @Prop() position?: 'left' | 'right'\n\n  /** Size of the label. Default is small. */\n  @Prop() size?: 'm'\n\n  @State() clonedAttributes\n\n  private handleClick = async (event: MouseEvent) => {\n    const inputElement: HTMLElement = this.el.querySelector(\n      'ld-input, ld-textarea, ld-toggle, ld-select, ld-button, ld-checkbox, ld-radio, input, textarea, button, select'\n    )\n    const notClickedInsideNotDisabled =\n      inputElement &&\n      !(\n        event.target === inputElement ||\n        inputElement.contains(event.target as Node)\n      ) &&\n      !inputElement['disabled']\n\n    if (notClickedInsideNotDisabled) {\n      if ('focusInner' in inputElement) {\n        await (inputElement as unknown as InnerFocusable).focusInner()\n      } else {\n        inputElement.focus()\n      }\n\n      inputElement.click()\n    }\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, [\n      'align-message',\n      'position',\n      'size',\n    ])\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-label',\n      this.alignMessage && 'ld-label--align-message',\n      this.position && `ld-label--${this.position}`,\n      this.size && `ld-label--${this.size}`,\n    ])\n\n    return (\n      <label\n        {...this.clonedAttributes}\n        class={cl}\n        onClick={this.handleClick}\n        part=\"tag\"\n      >\n        <slot></slot>\n      </label>\n    )\n  }\n}\n"],"names":["isFalsy","value","undefined","cloneAttributes","attributesToIgnoreSet","Set","arguments","length","attributesToClone","attr","this","el","attributes","has","name","valueToClone","clonedAttributes","observer","MutationObserver","mutationsList","mutation","attributeName","attrValue","getAttribute","Object","assign","observe","subtree","childList","getClassNames","classNames","filter","className","join","LdLabel","handleClick","async","inputElement","querySelector","event","target","contains","focusInner","focus","click","componentWillLoad","attributesObserver","call","disconnectedCallback","disconnect","render","cl","alignMessage","position","size","h","key","class","onClick","part"],"sourceRoot":""}