{"version":3,"file":"static/js/2055.fa6727fa.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/closest.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/ld-sidenav-accordion/ld-sidenav-accordion.shadow.css?tag=ld-sidenav-accordion&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/ld-sidenav-accordion/ld-sidenav-accordion.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/utils/toggleStackToTop.ts"],"sourcesContent":["// This helper function is similar to Element.closest(),\n// however it also traverses shadow DOM boundaries.\nexport const closest = (selector: string, el: Element | Document) => {\n  return (\n    el &&\n    (('closest' in el && el.closest(selector)) ||\n      closest(selector, (el.getRootNode() as unknown as ShadowRoot).host))\n  )\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",".ld-sidenav-accordion__accordion {\n  --ld-accordion-bg-col: transparent;\n  --ld-accordion-bg-col-active: var(--ld-thm-primary-alpha-low);\n  --ld-accordion-bg-col-disabled: transparent;\n  --ld-accordion-bg-col-focus: var(--ld-thm-primary-alpha-low);\n  --ld-accordion-panel-border-top-col: transparent;\n  --ld-accordion-padding-x: var(--ld-sidenav-padding-x);\n  --ld-accordion-padding-y: 0;\n  --ld-accordion-toggle-indicator-bg-col: transparent;\n  --ld-accordion-toggle-indicator-bg-col-active: var(--ld-thm-primary);\n  --ld-accordion-toggle-indicator-bg-col-hover: var(--ld-col-neutral-100);\n  --ld-accordion-toggle-indicator-bg-col-focus: var(--ld-thm-primary-focus);\n  --ld-accordion-toggle-size: var(--ld-sidenav-navitem-icon-size);\n\n  --ld-sidenav-navitem-tertiary-indent: calc(2 * var(--ld-sp-16) + 0.3125rem);\n\n  transform: translateY(\n    var(\n      --ld-sidenav-navitem-move-up-closable,\n      var(--ld-sidenav-navitem-move-up, 0)\n    )\n  );\n  transition: var(--ld-sidenav-stack-to-top-transition);\n\n  :host(.ld-sidenav-accordion--collapsed) & {\n    pointer-events: none;\n    transition: transform var(--ld-sidenav-transition-duration-collapse-expand)\n      ease;\n  }\n\n  :host(.ld-sidenav-accordion--in-accordion) & {\n    --ld-accordion-padding-x: 0;\n    margin: var(--ld-sp-6) calc(-1 * var(--ld-sidenav-padding-x)) var(--ld-sp-6)\n      0;\n\n    .ld-sidenav-accordion__accordion-panel {\n      padding: 0 var(--ld-sidenav-padding-x) 0 0;\n    }\n  }\n\n  :host(:not(.ld-sidenav-accordion--transitions-enabled)) & {\n    .ld-sidenav-accordion__accordion-panel {\n      --ld-accordion-panel-transition-duration: var(\n        --ld-transition-duration-instant\n      );\n    }\n  }\n}\n\n.ld-sidenav-accordion__accordion-panel {\n  padding: 0 var(--ld-sidenav-padding-x);\n\n  &::part(content) {\n    padding: var(--ld-sidenav-navitem-bg-inset) 0;\n  }\n}\n\n.ld-sidenav-accordion__accordion-toggle {\n  pointer-events: none;\n\n  &::part(toggle) {\n    &::before {\n      display: none;\n    }\n  }\n\n  &::part(label) {\n    --ld-accordion-bg-col-hover: transparent;\n    padding-right: var(--ld-sidenav-padding-x);\n\n    &::before {\n      display: none;\n    }\n  }\n\n  @media (hover: hover) {\n    &:where(:hover) {\n      --ld-accordion-toggle-indicator-bg-col: var(--ld-col-neutral-100);\n    }\n  }\n\n  &::part(trigger) {\n    --ld-accordion-bg-col-hover: var(\n      --ld-sidenav-accordion-bg-col-hover,\n      var(--ld-col-neutral-050)\n    );\n    right: var(--ld-sidenav-padding-x);\n    pointer-events: none;\n    border-radius: var(--ld-sidenav-navitem-border-radius);\n    outline: none;\n    transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n        linear,\n      transform var(--ld-sidenav-transition-duration-collapse-expand) ease;\n\n    &::before {\n      inset: 0;\n      border-radius: inherit;\n      background-color: var(--ld-accordion-toggle-indicator-bg-col);\n      z-index: 1;\n    }\n\n    &::after {\n      content: '';\n      position: absolute;\n      border-radius: inherit;\n      inset: 0;\n      background-color: var(--ld-col-wht);\n      visibility: hidden;\n    }\n\n    &:active {\n      --ld-accordion-toggle-indicator-bg-col: var(\n        --ld-accordion-toggle-indicator-bg-col-active\n      );\n\n      &::before {\n        opacity: 0.3;\n      }\n    }\n\n    @media (hover: hover) {\n      &:where(:hover) {\n        --ld-accordion-toggle-indicator-bg-col: var(\n          --ld-accordion-toggle-indicator-bg-col-hover\n        );\n\n        &::after {\n          visibility: inherit;\n        }\n      }\n    }\n\n    &:focus:focus-visible {\n      --ld-accordion-toggle-indicator-bg-col: var(\n        --ld-accordion-toggle-indicator-bg-col-focus\n      );\n\n      &::before {\n        opacity: 0.3;\n      }\n\n      &::after {\n        visibility: inherit;\n      }\n\n      &:active {\n        --ld-accordion-toggle-indicator-bg-col: var(\n          --ld-accordion-toggle-indicator-bg-col-active\n        );\n\n        &::before {\n          opacity: 0.3;\n        }\n      }\n    }\n  }\n\n  :host(.ld-sidenav-accordion--rounded) & {\n    &::part(trigger) {\n      border-radius: var(--ld-br-full);\n    }\n  }\n\n  :host(.ld-sidenav-accordion--no-icon) & {\n    &::part(trigger) {\n      &::before,\n      &::after {\n        transform: scale(0.8);\n      }\n    }\n  }\n\n  &::part(trigger-content) {\n    transform: none;\n    z-index: 2;\n  }\n\n  :host(.ld-sidenav-accordion--collapsed) & {\n    &::part(trigger) {\n      transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n          linear,\n        visibility 0s var(--ld-sidenav-transition-duration-collapse-expand)\n          linear,\n        transform var(--ld-sidenav-transition-duration-collapse-expand) ease;\n      visibility: hidden;\n      opacity: 0;\n      transform: translateX(var(--ld-sidenav-translate-x-delta));\n    }\n  }\n}\n\n:host(.ld-sidenav-accordion--split) {\n  .ld-sidenav-accordion__accordion-toggle {\n    &::part(trigger) {\n      pointer-events: auto;\n    }\n  }\n}\n\n::slotted(ld-sidenav-navitem) {\n  --ld-sidenav-navitem-bg-right-x-delta: var(--ld-accordion-toggle-size);\n  --ld-sidenav-navitem-bg-width: calc(\n    100% + var(--ld-accordion-toggle-size) + var(--ld-sidenav-navitem-bg-inset) *\n      2\n  );\n\n  position: relative;\n  z-index: 1;\n}\n::slotted(ld-sidenav-navitem:not(:first-of-type)) {\n  margin: var(--ld-sp-16) 0;\n}\n::slotted(ld-sidenav-navitem:last-of-type) {\n  margin-bottom: 0;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { closest } from '../../../utils/closest'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { toggleStackToTop } from '../utils/toggleStackToTop'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-sidenav-accordion',\n  styleUrl: 'ld-sidenav-accordion.shadow.css',\n  shadow: true,\n})\nexport class LdSidenavAccordion {\n  @Element() el: HTMLElement\n  private sidenav: HTMLLdSidenavElement\n  private sectionRef: HTMLLdAccordionSectionElement\n  private panelRef: HTMLLdAccordionPanelElement\n\n  @State() expandOnSidenavExpansion: boolean\n  @State() inAccordion: boolean\n  @State() noIcon: boolean\n  @State() rounded: boolean\n  @State() sidenavClosable: boolean\n  @State() sidenavCollapsed: boolean\n  @State() transitionsEnabled = true\n\n  /** Indicates that the accordion section is expanded. */\n  @Prop({ mutable: true }) expanded?: boolean\n\n  /**\n   * Set to false to make the accordion collapse on sidenav collapse\n   * or slide change.\n   */\n  @Prop() preserveState? = true\n\n  /**\n   * Split the accordion toggle in two parts with the second part containing\n   * the caret icon and being responsible for expanding / collapsing\n   * the accordion panel.\n   */\n  @Prop() split?: boolean\n\n  /** Emitted on accordion expand or collaps transition end. */\n  @Event() ldSidenavAccordionTransitionEnd: EventEmitter\n\n  @Listen('ldSidenavBreakpointChange', { target: 'window', passive: true })\n  handleSidenavBreakpointChange(ev: CustomEvent<boolean>) {\n    if (ev.target !== this.sidenav) return\n    this.sidenavClosable = ev.detail\n    this.updateStackToTop()\n  }\n\n  @Listen('ldSidenavSliderChange', { target: 'window', passive: true })\n  handleSidenavSliderChange(ev: CustomEvent<boolean>) {\n    // Collapse accordion on sidenav slide change.\n    if (\n      (ev.target as HTMLLdSidenavSliderElement).closest('ld-sidenav') !==\n      this.sidenav\n    ) {\n      return\n    }\n    if (!this.preserveState) {\n      this.sectionRef.expanded = false\n      this.expanded = false\n    }\n    this.transitionsEnabled = false\n    setTimeout(() => {\n      this.transitionsEnabled = true\n    }, 200)\n  }\n\n  @Listen('ldSidenavCollapsedChange', { target: 'window', passive: true })\n  handleSidenavCollapsedChange(\n    ev: CustomEvent<{\n      collapsed: boolean\n      fully: boolean\n    }>\n  ) {\n    // Collapse or expand accordion on sidenav collapse or expansion.\n    if (ev.target !== this.sidenav) return\n    this.sidenavCollapsed = ev.detail.collapsed\n    this.updateStackToTop()\n    if (this.sidenavCollapsed) {\n      if (this.preserveState) {\n        this.expandOnSidenavExpansion = this.sectionRef.expanded\n      }\n      this.sectionRef.expanded = false\n      this.expanded = false\n    } else {\n      if (this.expandOnSidenavExpansion) {\n        this.sectionRef.expanded = true\n        this.expanded = true\n      }\n    }\n  }\n\n  @Watch('expanded')\n  handleExpandedChange(expanded) {\n    this.sectionRef.expanded = expanded\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    // Emit transition end event to trigger scroll shadow update.\n    if (ev.target === this.panelRef) {\n      this.ldSidenavAccordionTransitionEnd.emit()\n    }\n  }\n\n  private updateStackToTop = () => {\n    if (this.sidenavClosable) {\n      toggleStackToTop(this.el, false)\n    } else {\n      toggleStackToTop(this.el, this.sidenav.narrow && this.sidenavCollapsed)\n    }\n  }\n\n  componentWillLoad() {\n    this.inAccordion = this.el.parentElement.tagName === 'LD-SIDENAV-ACCORDION'\n    this.rounded = !!this.el.querySelector(\n      'ld-sidenav-navitem[slot=\"toggle\"][rounded]'\n    )\n    this.noIcon = !!this.el.querySelector(\n      'ld-sidenav-navitem[slot=\"toggle\"][mode=\"secondary\"],ld-sidenav-navitem[slot=\"toggle\"][mode=\"tertiary\"]'\n    )\n    this.sidenav = closest('ld-sidenav', this.el)\n    if (this.sidenav) {\n      this.sidenavCollapsed = this.sidenav.collapsed\n    }\n  }\n\n  componentDidLoad() {\n    // The ldSidenavCollapsedChange event can be fired before this component is loaded.\n    // So we need to update the stacking here.\n    setTimeout(() => {\n      this.updateStackToTop()\n    })\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-sidenav-accordion',\n      this.noIcon && 'ld-sidenav-accordion--no-icon',\n      this.rounded && 'ld-sidenav-accordion--rounded',\n      this.inAccordion && 'ld-sidenav-accordion--in-accordion',\n      this.transitionsEnabled && 'ld-sidenav-accordion--transitions-enabled',\n      this.sidenavCollapsed &&\n        !this.sidenavClosable &&\n        'ld-sidenav-accordion--collapsed',\n      this.split && 'ld-sidenav-accordion--split',\n    ])\n\n    return (\n      <Host class={cl}>\n        <ld-accordion class=\"ld-sidenav-accordion__accordion\">\n          <ld-accordion-section\n            expanded={this.expanded}\n            ref={(el) => (this.sectionRef = el)}\n            class=\"ld-sidenav-accordion__accordion-section\"\n          >\n            <ld-accordion-toggle\n              labelTag=\"div\"\n              class=\"ld-sidenav-accordion__accordion-toggle\"\n              split={this.split}\n              ld-tabindex=\"-1\"\n            >\n              <slot name=\"toggle\"></slot>\n            </ld-accordion-toggle>\n            <ld-accordion-panel\n              ref={(el) => (this.panelRef = el)}\n              onTransitionEnd={this.onTransitionEnd}\n              class=\"ld-sidenav-accordion__accordion-panel\"\n            >\n              <slot></slot>\n            </ld-accordion-panel>\n          </ld-accordion-section>\n        </ld-accordion>\n      </Host>\n    )\n  }\n}\n","import { closest } from '../../../utils/closest'\n\nexport const toggleStackToTop = (el: HTMLElement, stacked: boolean) => {\n  const outerSlider = closest('ld-sidenav-slider', el)\n  if (!outerSlider) return\n\n  // If not stacked, put everything back in place.\n  if (!stacked) {\n    el.style.removeProperty('--ld-sidenav-navitem-move-up')\n    return\n  }\n\n  const sidenavPaddingY =\n    parseInt(\n      window\n        .getComputedStyle(outerSlider)\n        .getPropertyValue('--ld-sidenav-padding-y')\n    ) * 16\n\n  // Else, calculate how much vertical space is taken by stacked items above\n  // and move the nav item up accordingly.\n  let totalSpaceAbove = 0\n  let totalSpaceOccupiedAbove = 0\n  for (const elem of Array.from(el.parentElement?.children || [])) {\n    if (el === elem) break\n\n    if (\n      elem.tagName === 'LD-SIDENAV-ACCORDION' ||\n      elem.tagName === 'LD-SIDENAV-SEPARATOR' ||\n      elem.tagName === 'LD-SIDENAV-SUBNAV' ||\n      (elem.tagName === 'LD-SIDENAV-NAVITEM' &&\n        !['secondary', 'tertiary'].includes(\n          (elem as HTMLLdSidenavNavitemElement).mode\n        ))\n    ) {\n      totalSpaceOccupiedAbove += elem.getBoundingClientRect().height\n    } else {\n      totalSpaceAbove += sidenavPaddingY\n    }\n    totalSpaceAbove += elem.getBoundingClientRect().height\n  }\n\n  const spaceToMoveUp = totalSpaceAbove - totalSpaceOccupiedAbove\n  el.style.setProperty('--ld-sidenav-navitem-move-up', `-${spaceToMoveUp}px`)\n}\n"],"names":["closest","selector","el","getRootNode","host","getClassNames","classNames","filter","className","join","LdSidenavAccordion","onTransitionEnd","ev","target","this","panelRef","ldSidenavAccordionTransitionEnd","emit","updateStackToTop","sidenavClosable","toggleStackToTop","sidenav","narrow","sidenavCollapsed","handleSidenavBreakpointChange","detail","handleSidenavSliderChange","preserveState","sectionRef","expanded","transitionsEnabled","setTimeout","handleSidenavCollapsedChange","collapsed","expandOnSidenavExpansion","handleExpandedChange","componentWillLoad","inAccordion","parentElement","tagName","rounded","querySelector","noIcon","componentDidLoad","render","cl","split","h","Host","key","class","ref","labelTag","name","stacked","outerSlider","style","removeProperty","sidenavPaddingY","parseInt","window","getComputedStyle","getPropertyValue","totalSpaceAbove","totalSpaceOccupiedAbove","elem","Array","from","_a","children","includes","mode","getBoundingClientRect","height","spaceToMoveUp","setProperty"],"sourceRoot":""}