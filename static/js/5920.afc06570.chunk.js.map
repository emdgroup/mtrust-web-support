{"version":3,"file":"static/js/5920.afc06570.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/ariaDisabled.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/cloneAttributes.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/focus.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-modal/ld-modal.css?tag=ld-modal&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-modal/ld-modal.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-toggle/ld-toggle.css?tag=ld-toggle&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-toggle/ld-toggle.tsx"],"sourcesContent":["// 'true', '1', 'yolo' etc. correspond to an aria disabled element, but not 'false'.\nexport const isAriaDisabled = (ariaDisabledValue: string | undefined) =>\n  ariaDisabledValue && ariaDisabledValue !== 'false'\n","function isFalsy(value: string | null | undefined) {\n  return value === undefined || value === null || value === 'false'\n}\n\nexport function cloneAttributes(attributesToIgnore: string[] = []) {\n  const attributesToIgnoreSet = new Set([\n    'style',\n    'id',\n    'class',\n    'slot',\n    'part',\n    ...attributesToIgnore,\n  ])\n\n  // Get attributes not in props.\n  const attributesToClone = {}\n  for (const attr of this.el.attributes) {\n    if (attributesToIgnoreSet.has(attr.name) || isFalsy(attr.value)) {\n      continue\n    }\n    const valueToClone = attr.value === '' ? true : attr.value\n    attributesToClone[attr.name] = valueToClone\n  }\n\n  // Update cloned attributes state.\n  this.clonedAttributes = attributesToClone\n\n  // Set up attributes observer.\n  const callback = (mutationsList) => {\n    // Update cloned attributes state.\n    for (const mutation of mutationsList) {\n      const { attributeName } = mutation\n      if (!attributesToIgnoreSet.has(attributeName)) {\n        const attrValue = this.el.getAttribute(attributeName)\n        if (isFalsy(attrValue)) {\n          delete this.clonedAttributes[attributeName]\n        } else {\n          this.clonedAttributes[attributeName] = attrValue\n        }\n      }\n    }\n\n    // Trigger state update.\n    this.clonedAttributes = { ...this.clonedAttributes }\n  }\n  const observer = new MutationObserver(callback)\n  observer.observe(this.el, {\n    subtree: false,\n    childList: false,\n    attributes: true,\n  })\n\n  return observer\n}\n","export const focusableSelector = [\n  'a[href]',\n  'area[href]',\n  'input:not([type=\"hidden\"]):not([type=\"radio\"]):not(:disabled)',\n  'input[type=\"radio\"]:not(:disabled)',\n  'select:not(:disabled)',\n  'textarea:not(:disabled)',\n  'button:not(:disabled)',\n  'iframe',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]',\n  '[tabindex]',\n]\n  .map((selector) => selector + ':not([tabindex^=\"-\"])')\n  .join(',')\n\nexport const getFirstFocusable = (el: HTMLElement): HTMLElement | undefined => {\n  // Directly focusable element.\n  if (el.matches(focusableSelector)) {\n    return el\n  }\n\n  // Slot.\n  if (el.tagName === 'SLOT') {\n    const hostEl = el.getRootNode()['host']\n    const slotName = el.getAttribute('name')\n    const slottedEl = slotName\n      ? hostEl.querySelector(`[slot=\"${el.getAttribute('name')}\"]`)\n      : Array.from(hostEl.children).find(\n          (child) => !(child as HTMLElement).hasAttribute('slot')\n        )\n    if (slottedEl) {\n      return getFirstFocusable(slottedEl)\n    }\n    return null\n  }\n\n  // Web Component.\n  if (el.shadowRoot) {\n    const shadowRootChildren = Array.from(el.shadowRoot.children)\n    for (const child of shadowRootChildren) {\n      const focusable = getFirstFocusable(child as HTMLElement)\n      if (focusable) return focusable\n    }\n  }\n\n  // Element with children.\n  const children = Array.from(el.children)\n  for (const child of children) {\n    const focusable = getFirstFocusable(child as HTMLElement)\n    if (focusable) return focusable\n  }\n\n  return null\n}\n\nexport const isInnerFocusable = <T extends object>(\n  element?: T\n): element is T & InnerFocusable => element && 'focusInner' in element\n\nlet autofocusHandlerTimeout\nexport const registerAutofocus = (autofocus: boolean) => {\n  if (!autofocus || autofocusHandlerTimeout) return\n  autofocusHandlerTimeout = setTimeout(() => {\n    const firstWithAutofocus = Array.from(\n      document.querySelectorAll<HTMLInputElement>('[autofocus]')\n    ).find((el) => !el.disabled)\n    if (isInnerFocusable(firstWithAutofocus)) {\n      firstWithAutofocus.focusInner()\n    }\n  }, 200)\n}\n\nexport const focusInnerOrFocus = (element: HTMLElement) => {\n  if (isInnerFocusable(element)) {\n    element.focusInner()\n  } else {\n    element.focus()\n  }\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host {\n  display: contents;\n}\n\n@keyframes ld-modal-in {\n  from {\n    transform: translateY(2rem);\n  }\n\n  to {\n    transform: translateY(0);\n  }\n}\n\n@keyframes ld-modal-out {\n  from {\n    transform: scale(1);\n  }\n\n  to {\n    transform: scale(0.9);\n  }\n}\n\n@keyframes ld-modal-out-mobile {\n  from {\n    transform: translateY(0);\n  }\n\n  to {\n    transform: translateY(2rem);\n  }\n}\n\ndialog.ld-modal,\n:host {\n  --ld-modal-bg-col: var(--ld-col-wht);\n  --ld-modal-fixed-padding-x: var(--ld-sp-16);\n  --ld-modal-fixed-padding-y: var(--ld-sp-16);\n  --ld-modal-padding-x: var(--ld-sp-16);\n  --ld-modal-padding-y: var(--ld-sp-24);\n  --ld-modal-fixed-bg-col: var(--ld-col-neutral-010);\n  --ld-modal-transition-duration: var(--ld-transition-duration-instant);\n  --ld-modal-max-inline-size: 30rem;\n  --ld-modal-max-block-size: 70rem;\n  --ld-modal-min-inline-size: 18rem;\n\n  @media (prefers-reduced-motion: no-preference) {\n    --ld-modal-transition-duration: var(--ld-transition-duration-normal);\n  }\n}\n\ndialog.ld-modal,\n:host dialog {\n  /* overwrites */\n  border: 0;\n  color: var(--ld-col-neutral-900);\n  color-scheme: var(--ld-modal-color-scheme, none);\n  display: flex; /* allows for transitions */\n  flex-direction: column;\n  inset: 0; /* keeps the dialog positioned correctly during closing transition */\n  margin: auto;\n  overflow: visible; /* required due to scalehack */\n  padding: 0;\n  position: fixed; /* makes sure it stays fixed during closing transition */\n  z-index: 2147483647; /* makes sure it is not overlapped during closing transition */\n\n  animation: ld-modal-in var(--ld-modal-transition-duration) ease-out forwards;\n  border-radius: var(--ld-br-l);\n  box-shadow: var(--ld-shadow-active);\n\n  /* dimensions */\n  max-block-size: min(\n    /* account for additional margin bottom on mobile */\n      calc(100% - var(--ld-sp-24) - var(--ld-sp-40)),\n    var(--ld-modal-max-block-size)\n  );\n  max-inline-size: min(\n    calc(100% - var(--ld-sp-32)),\n    var(--ld-modal-max-inline-size)\n  );\n  min-inline-size: var(--ld-modal-min-inline-size);\n\n  transition: opacity var(--ld-modal-transition-duration) linear,\n    transform var(--ld-modal-transition-duration) ease;\n\n  @media (width <= 32rem) {\n    /*\n    On mobile we place the dialog at the bottom of the screen\n    so that it is easier for the user to interact with it. */\n    margin-bottom: var(--ld-sp-40);\n  }\n\n  &:not([open]) {\n    animation: ld-modal-out var(--ld-modal-transition-duration) ease-in forwards;\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity var(--ld-modal-transition-duration) linear,\n      visibility 0s var(--ld-modal-transition-duration) linear,\n      transform var(--ld-modal-transition-duration) ease;\n    visibility: hidden;\n\n    @media (width <= 32rem) {\n      /*\n      On mobile, since the dialog is placed at the bottom of the screen,\n      we transition it out slightly differently than on wide view ports. */\n      animation-name: ld-modal-out-mobile;\n    }\n  }\n\n  &::after {\n    background-color: var(--ld-modal-bg-col);\n    border-radius: inherit;\n    content: '';\n    inset: 0;\n    position: absolute;\n    z-index: -1;\n  }\n\n  &::before {\n    background-color: var(--ld-thm-primary-active);\n    content: '';\n    inset: 0;\n    opacity: 0.3;\n    position: fixed;\n    transform: scale(99); /* scalehack required due to animation */\n    z-index: -2;\n  }\n}\n\ndialog.ld-modal--blurry-backdrop,\n:host(.ld-modal--blurry-backdrop) dialog {\n  &::backdrop {\n    backdrop-filter: blur(5px);\n  }\n}\n\n/* custom icon cross */\n.ld-modal__x {\n  place-self: flex-start flex-end;\n  appearance: none;\n  background-color: transparent;\n  border: solid transparent var(--ld-sp-8);\n  box-sizing: border-box;\n  cursor: pointer;\n  display: inline-flex;\n  height: 3rem;\n  margin: auto calc(var(--ld-sp-16) * -1) auto auto;\n  overflow: hidden;\n  position: relative;\n  width: 3rem;\n\n  &::before,\n  &::after {\n    border-radius: 1rem;\n    background-color: var(--ld-col-neutral-900);\n    content: '';\n    display: block;\n    height: 1.25rem;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    width: 0.15rem;\n  }\n\n  &::before {\n    transform: translateX(-50%) translateY(-50%) rotate(45deg);\n  }\n\n  &::after {\n    transform: translateX(-50%) translateY(-50%) rotate(-45deg);\n  }\n}\n\n.ld-modal__content {\n  flex-grow: 1;\n  overflow: hidden auto;\n  overscroll-behavior: none;\n  padding: var(--ld-modal-padding-y) var(--ld-modal-padding-x);\n}\n\n.ld-modal__header,\n.ld-modal__footer {\n  align-items: center;\n  background-color: var(--ld-modal-fixed-bg-col);\n  display: grid;\n  grid-auto-flow: column;\n  gap: var(--ld-modal-fixed-padding-x);\n  padding: 0 var(--ld-modal-fixed-padding-x);\n}\n\n.ld-modal__header {\n  border-radius: var(--ld-br-l) var(--ld-br-l) 0 0;\n\n  > *:not(.ld-modal__x),\n  > ::slotted(*:not(.ld-modal__x)) {\n    padding: var(--ld-sp-12) 0;\n  }\n}\n\n.ld-modal__footer {\n  border-radius: 0 0 var(--ld-br-l) var(--ld-br-l);\n  justify-content: flex-end;\n\n  > *,\n  > ::slotted(*) {\n    margin: var(--ld-modal-fixed-padding-y) 0;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part dialog - Actual `dialog` element\n * @part content - `div` element wrapping the default slot\n * @part footer - `footer` element\n * @part header - `header` element\n */\n@Component({\n  tag: 'ld-modal',\n  styleUrl: 'ld-modal.css',\n  shadow: true,\n})\nexport class LdModal {\n  @Element() el: HTMLElement\n  private dialogRef: HTMLDialogElement\n\n  /** The modal is cancelable by default. However, you can change this using this prop. */\n  @Prop() cancelable? = true\n\n  /** Indicates that the modal dialog is active and can be interacted with. */\n  @Prop({ mutable: true, reflect: true }) open?: boolean\n\n  /** Use a blurry backdrop. */\n  @Prop() blurryBackdrop? = false\n\n  /** Emitted when modal is opening (before transition). */\n  @Event() ldmodalopening: EventEmitter\n\n  /** Emitted when modal has opened (after transition). */\n  @Event() ldmodalopened: EventEmitter\n\n  /** Emitted when modal is closing (before transition). */\n  @Event() ldmodalclosing: EventEmitter\n\n  /** Emitted when modal has closed (after transition). */\n  @Event() ldmodalclosed: EventEmitter\n\n  /** Opens the modal dialog. */\n  @Method()\n  async showModal() {\n    this.open = true\n  }\n\n  /** Closes the modal dialog. */\n  @Method()\n  async close() {\n    this.open = false\n  }\n\n  @Listen('keydown', { passive: true, target: 'window' })\n  handleKeyDown(ev: KeyboardEvent) {\n    if (ev.key === 'Escape' && this.cancelable) {\n      this.open = false\n    }\n  }\n\n  @Watch('open')\n  onOpenChange(open: boolean) {\n    // Calling the showModal and close methods on the dialog element here\n    // is super important, because these make the native focus trap and\n    // the backdrop feature work.\n    // TODO: Remove @ts-ignore comments as soon as TS types get updated.\n    if (open) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.dialogRef.showModal()\n      this.ldmodalopening.emit()\n    } else {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.dialogRef.close()\n      this.ldmodalclosing.emit()\n    }\n  }\n\n  private handleClose = () => {\n    // When the dialog is closed with the Esc key we need to\n    // update the open prop explicitly.\n    this.open = false\n  }\n\n  private handleCancel = (ev: Event) => {\n    if (!this.cancelable) {\n      ev.preventDefault()\n    }\n  }\n\n  private handleClick = (ev: MouseEvent) => {\n    if (this.cancelable && (ev.target as HTMLElement).tagName === 'DIALOG') {\n      this.close()\n    }\n  }\n\n  private handleTransitionEnd = () => {\n    if (this.open) {\n      this.ldmodalopened.emit()\n    } else {\n      this.ldmodalclosed.emit()\n    }\n  }\n\n  componentDidLoad() {\n    this.dialogRef.addEventListener('cancel', this.handleCancel)\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.dialogRef) {\n      this.dialogRef.removeEventListener('cancel', this.handleCancel)\n    }\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-modal',\n      this.blurryBackdrop && 'ld-modal--blurry-backdrop',\n    ])\n\n    return (\n      <Host class={cl}>\n        <dialog\n          onClick={this.handleClick}\n          onClose={this.handleClose}\n          onTransitionEnd={this.handleTransitionEnd}\n          open={this.open}\n          part=\"dialog\"\n          ref={(el) => (this.dialogRef = el as HTMLDialogElement)}\n        >\n          <header class=\"ld-modal__header\" part=\"header\">\n            <slot name=\"header\"></slot>\n            {this.cancelable && (\n              <button\n                class=\"ld-modal__x\"\n                aria-label=\"Dismiss\"\n                onClick={this.close.bind(this)}\n              ></button>\n            )}\n          </header>\n          <div class=\"ld-modal__content\" part=\"content\">\n            <slot></slot>\n          </div>\n          <footer class=\"ld-modal__footer\" part=\"footer\">\n            <slot name=\"footer\"></slot>\n          </footer>\n        </dialog>\n      </Host>\n    )\n  }\n}\n",":host,\n.ld-toggle {\n  /* layout */\n  --ld-toggle-height: 2rem;\n  --ld-toggle-width: 3.375rem;\n  --ld-toggle-inner-space: 0.125rem;\n  --ld-toggle-with-icons-width: 4.5rem;\n  --ld-toggle-lg-height: 2.5rem;\n  --ld-toggle-lg-width: 4.1875rem;\n  --ld-toggle-lg-inner-space: 0.1875rem;\n  --ld-toggle-lg-with-icons-width: 6rem;\n  --ld-toggle-border-radius: var(--ld-br-full);\n  --ld-toggle-knob-border-radius: var(--ld-br-full);\n\n  /* colors */\n  --ld-toggle-input-bg-col: var(--ld-col-neutral-600);\n  --ld-toggle-icon-start-col: var(--ld-col-wht);\n  --ld-toggle-icon-end-col: var(--ld-col-neutral-900);\n  --ld-toggle-knob-bg-col: var(--ld-col-wht);\n  --ld-toggle-checked-icon-start-col: var(--ld-col-neutral-900);\n  --ld-toggle-checked-icon-end-col: var(--ld-col-wht);\n  --ld-toggle-disabled-input-bg-col: var(--ld-col-neutral-050);\n  --ld-toggle-disabled-icon-col: var(--ld-col-neutral-200);\n  --ld-toggle-disabled-knob-bg-col: var(--ld-col-wht);\n  --ld-toggle-with-icons-input-bg-col: var(--ld-col-neutral-100);\n  --ld-toggle-with-icons-disabled-input-bg-col: var(--ld-col-neutral-050);\n\n  /* themable colors */\n  --ld-toggle-checked-bg-col: var(--ld-thm-primary);\n  --ld-toggle-invalid-input-bg-col: var(--ld-thm-error);\n  --ld-toggle-invalid-knob-bg-col: var(--ld-thm-error);\n  --ld-toggle-with-icons-knob-col: var(--ld-thm-primary);\n\n  align-items: center;\n  display: flex;\n  height: var(--ld-toggle-height);\n  min-width: auto !important;\n  position: relative;\n  width: var(--ld-toggle-width);\n\n  input {\n    appearance: none;\n    background-color: var(--ld-toggle-input-bg-col);\n    border-radius: var(--ld-toggle-border-radius);\n    height: 100%;\n    margin: 0;\n    position: absolute;\n    /* animations triggered by user interactions on single component instances are probably not a performance issue */\n    /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */\n    transition: background-color var(--ld-transition-duration-normal)\n      ease-in-out;\n    width: 100%;\n    z-index: 0;\n\n    &:not(\n        :disabled,\n        [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n      ) {\n      cursor: pointer;\n    }\n\n    &:checked {\n      background-color: var(--ld-toggle-checked-bg-col);\n\n      &:disabled,\n      &[aria-disabled]:where(\n          :not([aria-disabled=''], [aria-disabled='false'])\n        ) {\n        background-color: var(--ld-toggle-disabled-input-bg-col);\n      }\n\n      ~ .ld-toggle__knob {\n        transform: translateX(\n          calc(var(--ld-toggle-width) - var(--ld-toggle-height))\n        );\n      }\n\n      ~ .ld-toggle__icon-start {\n        color: var(--ld-toggle-checked-icon-start-col);\n      }\n\n      ~ .ld-toggle__icon-end {\n        color: var(--ld-toggle-checked-icon-end-col);\n      }\n    }\n\n    &:disabled,\n    &[aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false'])) {\n      background-color: var(--ld-toggle-disabled-input-bg-col);\n\n      &:checked ~ .ld-toggle__icon-start,\n      &:checked ~ .ld-toggle__icon-end {\n        color: var(--ld-toggle-disabled-icon-col);\n      }\n\n      &:not(:checked) ~ .ld-toggle__icon-start,\n      &:not(:checked) ~ .ld-toggle__icon-end {\n        color: var(--ld-toggle-disabled-icon-col);\n      }\n    }\n  }\n\n  .ld-toggle__knob {\n    background-color: var(--ld-toggle-knob-bg-col);\n    border-radius: var(--ld-toggle-knob-border-radius);\n    display: block;\n    height: calc(var(--ld-toggle-height) - var(--ld-toggle-inner-space) * 2);\n    margin: var(--ld-toggle-inner-space);\n    pointer-events: none;\n    transition: transform var(--ld-transition-duration-normal) ease-in-out;\n    width: calc(var(--ld-toggle-height) - var(--ld-toggle-inner-space) * 2);\n    z-index: 1;\n  }\n\n  input:where(\n      :not(\n          :disabled,\n          [aria-disabled]:where(\n              :not([aria-disabled=''], [aria-disabled='false'])\n            )\n        )\n    ):invalid {\n    background-color: var(--ld-toggle-invalid-input-bg-col);\n  }\n}\n\n.ld-toggle--lg {\n  &,\n  :host(&) {\n    --ld-toggle-height: var(--ld-toggle-lg-height);\n    --ld-toggle-width: var(--ld-toggle-lg-width);\n    --ld-toggle-inner-space: var(--ld-toggle-lg-inner-space);\n  }\n\n  &.ld-toggle--with-icons {\n    &,\n    :host(&) {\n      --ld-toggle-width: var(--ld-toggle-lg-with-icons-width);\n\n      .ld-toggle__icon-start,\n      .ld-toggle__icon-end {\n        margin: auto 0.75rem;\n      }\n    }\n  }\n}\n\n:host(.ld-toggle--with-icons),\n.ld-toggle--with-icons {\n  --ld-toggle-width: var(--ld-toggle-with-icons-width);\n\n  input {\n    &:not(:disabled) {\n      background-color: var(--ld-toggle-with-icons-input-bg-col);\n    }\n\n    &:invalid ~ .ld-toggle__knob {\n      background-color: var(--ld-toggle-invalid-knob-bg-col);\n    }\n\n    &:disabled,\n    &[aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false'])) {\n      background-color: var(--ld-toggle-with-icons-disabled-input-bg-col);\n\n      ~ .ld-toggle__knob {\n        background-color: var(--ld-toggle-disabled-knob-bg-col);\n      }\n    }\n  }\n\n  .ld-toggle__knob {\n    background-color: var(--ld-toggle-with-icons-knob-col);\n  }\n\n  .ld-toggle__icon-start,\n  .ld-toggle__icon-end {\n    margin: auto 0.5rem;\n  }\n}\n\n.ld-toggle__icon-start,\n.ld-toggle__icon-end {\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n  position: absolute;\n  /* animations triggered by user interactions on single component instances are probably not a performance issue */\n  /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */\n  transition: color var(--ld-transition-duration-normal) ease-in-out;\n  z-index: 1;\n\n  &:empty {\n    display: none;\n  }\n}\n\n.ld-toggle__icon-start {\n  color: var(--ld-toggle-icon-start-col);\n  left: 0;\n}\n\n.ld-toggle__icon-end {\n  color: var(--ld-toggle-icon-end-col);\n  right: 0;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { registerAutofocus } from '../../utils/focus'\nimport { isAriaDisabled } from '../../utils/ariaDisabled'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part input - Actual input element\n * @part knob - Toggle knob\n * @part icon-wrapper - Both wrappers of icons\n * @part icon-wrapper-start - Wrapper of the start icon\n * @part icon-wrapper-end - Wrapper of the end icon\n */\n@Component({\n  tag: 'ld-toggle',\n  styleUrl: 'ld-toggle.css',\n  shadow: true,\n})\nexport class LdToggle implements InnerFocusable, ClonesAttributes {\n  @Element() el: HTMLElement\n\n  private attributesObserver: MutationObserver\n\n  private input: HTMLInputElement\n  private hiddenInput: HTMLInputElement\n  private hasIcons: boolean\n\n  /** Alternative disabled state that keeps element focusable */\n  @Prop() ariaDisabled: string\n\n  /** Automatically focus the form control when the page is loaded. */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /** Indicates whether the toggle is \"on\". */\n  @Prop({ mutable: true }) checked? = false\n\n  /** Disabled state of the checkbox. */\n  @Prop() disabled?: boolean\n\n  /** Associates the control with a form element. */\n  @Prop() form?: string\n\n  /** Set this property to `true` in order to mark the checkbox visually as invalid. */\n  @Prop() invalid?: boolean\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex?: number\n\n  /** Used to specify the name of the control. */\n  @Prop() name?: string\n\n  /** The value is not editable. */\n  @Prop() readonly?: boolean\n\n  /** Set this property to `true` in order to mark the checkbox as required. */\n  @Prop() required?: boolean\n\n  /** Size of the toggle. */\n  @Prop() size?: 'sm' | 'lg'\n\n  /** The input value. */\n  @Prop() value?: string\n\n  @State() clonedAttributes\n\n  /** Emitted when the input value changed and the element loses focus. */\n  @Event() ldchange: EventEmitter<boolean>\n\n  /** Emitted when the input value changed. */\n  @Event() ldinput: EventEmitter<boolean>\n\n  /** Sets focus on the toggle. */\n  @Method()\n  async focusInner() {\n    if (this.input !== undefined) {\n      this.input.focus()\n    }\n  }\n\n  @Watch('checked')\n  @Watch('name')\n  @Watch('value')\n  updateHiddenInput() {\n    const outerForm = this.el.closest('form')\n    if (!this.hiddenInput && this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n    }\n\n    if (this.hiddenInput) {\n      if (!this.name) {\n        this.hiddenInput.remove()\n        this.hiddenInput = undefined\n        return\n      }\n\n      this.hiddenInput.name = this.name\n      this.hiddenInput.checked = this.checked\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      } else {\n        this.hiddenInput.removeAttribute('value')\n      }\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      } else if (this.hiddenInput.getAttribute('form')) {\n        if (outerForm) {\n          this.hiddenInput.removeAttribute('form')\n        } else {\n          this.hiddenInput.remove()\n          this.hiddenInput = undefined\n        }\n      }\n    }\n  }\n\n  private createHiddenInput() {\n    this.hiddenInput = document.createElement('input')\n    this.hiddenInput.type = 'checkbox'\n    this.hiddenInput.style.visibility = 'hidden'\n    this.hiddenInput.style.position = 'absolute'\n    this.hiddenInput.style.pointerEvents = 'none'\n    this.el.appendChild(this.hiddenInput)\n  }\n\n  private handleChange = (event: InputEvent) => {\n    this.el.dispatchEvent(new InputEvent('change', event))\n    this.ldchange.emit(this.checked)\n  }\n\n  private handleClick = (event: MouseEvent) => {\n    if (isAriaDisabled(this.ariaDisabled)) {\n      event.preventDefault()\n      return\n    }\n\n    this.checked = !this.checked\n\n    if (!event.isTrusted) {\n      // This happens, when a click event is dispatched on the host element\n      // from the outside i.e. on click on a parent ld-label element.\n      this.el.dispatchEvent(\n        new InputEvent('input', { bubbles: true, composed: true })\n      )\n      this.handleInput()\n      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }))\n      this.ldchange.emit(this.checked)\n    }\n  }\n\n  private handleInput = () => {\n    this.ldinput.emit(this.checked)\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['size'])\n\n    this.hasIcons =\n      !!this.el.querySelector('[slot=\"icon-start\"]') ||\n      !!this.el.querySelector('[slot=\"icon-end\"]')\n\n    const outerForm = this.el.closest('form')\n\n    if (this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n      this.hiddenInput.checked = this.checked\n      this.hiddenInput.name = this.name\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      }\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      }\n    }\n\n    registerAutofocus(this.autofocus)\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames([\n          'ld-toggle',\n          this.size === 'lg' && 'ld-toggle--lg',\n          this.hasIcons && 'ld-toggle--with-icons',\n        ])}\n        onClick={this.handleClick}\n      >\n        <input\n          {...this.clonedAttributes}\n          aria-disabled={this.ariaDisabled}\n          checked={this.checked}\n          disabled={this.disabled}\n          onChange={this.handleChange}\n          onInput={this.handleInput}\n          part=\"input focusable\"\n          ref={(ref) => (this.input = ref)}\n          required={this.required}\n          tabIndex={this.ldTabindex}\n          type=\"checkbox\"\n          value={this.value}\n        />\n        <span class=\"ld-toggle__knob\" part=\"knob\" />\n        {this.hasIcons && (\n          <div\n            class=\"ld-toggle__icon-start\"\n            part=\"icon-wrapper icon-wrapper-start\"\n          >\n            <slot name=\"icon-start\" />\n          </div>\n        )}\n        {this.hasIcons && (\n          <div class=\"ld-toggle__icon-end\" part=\"icon-wrapper icon-wrapper-end\">\n            <slot name=\"icon-end\" />\n          </div>\n        )}\n      </Host>\n    )\n  }\n}\n"],"names":["isAriaDisabled","ariaDisabledValue","isFalsy","value","undefined","cloneAttributes","attributesToIgnoreSet","Set","arguments","length","attributesToClone","attr","this","el","attributes","has","name","valueToClone","clonedAttributes","observer","MutationObserver","mutationsList","mutation","attributeName","attrValue","getAttribute","Object","assign","observe","subtree","childList","focusableSelector","map","selector","join","getFirstFocusable","matches","tagName","hostEl","getRootNode","slottedEl","querySelector","Array","from","children","find","child","hasAttribute","shadowRoot","shadowRootChildren","focusable","isInnerFocusable","element","autofocusHandlerTimeout","registerAutofocus","autofocus","setTimeout","firstWithAutofocus","document","querySelectorAll","disabled","focusInner","focusInnerOrFocus","focus","getClassNames","classNames","filter","className","LdModal","handleClose","open","handleCancel","ev","cancelable","preventDefault","handleClick","target","close","handleTransitionEnd","ldmodalopened","emit","ldmodalclosed","showModal","handleKeyDown","key","onOpenChange","dialogRef","ldmodalopening","ldmodalclosing","componentDidLoad","addEventListener","disconnectedCallback","removeEventListener","render","cl","blurryBackdrop","h","Host","class","onClick","onClose","onTransitionEnd","part","ref","bind","LdToggle","handleChange","event","dispatchEvent","InputEvent","ldchange","checked","ariaDisabled","isTrusted","bubbles","composed","handleInput","ldinput","input","updateHiddenInput","outerForm","closest","hiddenInput","form","createHiddenInput","remove","removeAttribute","setAttribute","createElement","type","style","visibility","position","pointerEvents","appendChild","componentWillLoad","attributesObserver","call","hasIcons","disconnect","size","onChange","onInput","required","tabIndex","ldTabindex"],"sourceRoot":""}