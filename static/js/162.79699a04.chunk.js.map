{"version":3,"file":"static/js/162.79699a04.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/ariaDisabled.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/closest.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-select/utils/type-guards.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-select/ld-select.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-select/ld-select.css?tag=ld-select&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/typeahead.ts"],"sourcesContent":["// 'true', '1', 'yolo' etc. correspond to an aria disabled element, but not 'false'.\nexport const isAriaDisabled = (ariaDisabledValue: string | undefined) =>\n  ariaDisabledValue && ariaDisabledValue !== 'false'\n","// This helper function is similar to Element.closest(),\n// however it also traverses shadow DOM boundaries.\nexport const closest = (selector: string, el: Element | Document) => {\n  return (\n    el &&\n    (('closest' in el && el.closest(selector)) ||\n      closest(selector, (el.getRootNode() as unknown as ShadowRoot).host))\n  )\n}\n","export const isLdOption = (\n  el: HTMLElement | Node | EventTarget\n): el is HTMLLdOptionElement | HTMLLdOptionInternalElement =>\n  ['LD-OPTION', 'LD-OPTION-INTERNAL'].includes((el as HTMLElement)?.tagName)\n\nexport const isLdOptgroup = (\n  el: HTMLElement | Node | EventTarget\n): el is HTMLLdOptgroupElement | HTMLLdOptgroupInternalElement =>\n  ['LD-OPTGROUP', 'LD-OPTGROUP-INTERNAL'].includes((el as HTMLElement)?.tagName)\n\nexport const isLdOptionInternal = (\n  el: HTMLElement | Node | EventTarget\n): el is HTMLLdOptionInternalElement =>\n  ['LD-OPTION-INTERNAL'].includes((el as HTMLElement)?.tagName)\n\nexport const isLdOptgroupInternal = (\n  el: HTMLElement | Node | EventTarget\n): el is HTMLLdOptgroupInternalElement =>\n  ['LD-OPTGROUP-INTERNAL'].includes((el as HTMLElement)?.tagName)\n\ntype HTMLLdOptInternal =\n  | HTMLLdOptionInternalElement\n  | HTMLLdOptgroupInternalElement\nexport const isLdOptInternalHidden = (\n  opt: HTMLLdOptInternal\n): opt is\n  | (HTMLLdOptInternal & {\n      hidden: true\n    })\n  | (HTMLLdOptInternal & {\n      filtered: true\n    }) => {\n  return opt.hidden || opt.filtered\n}\n","import {\n  Component,\n  Element,\n  h,\n  Host,\n  Event,\n  Listen,\n  Prop,\n  State,\n  Watch,\n  EventEmitter,\n  Method,\n} from '@stencil/core'\nimport Tether from 'tether'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { registerAutofocus } from '../../utils/focus'\nimport { closest } from '../../utils/closest'\nimport { TypeAheadHandler } from '../../utils/typeahead'\nimport { isAriaDisabled } from '../../utils/ariaDisabled'\nimport { sanitize } from '../../utils/sanitize'\nimport {\n  isLdOptgroup,\n  isLdOptgroupInternal,\n  isLdOption,\n  isLdOptionInternal,\n  isLdOptInternalHidden,\n} from './utils/type-guards'\n\ntype SelectOption = { value: string; html: string; text: string }\n\n/**\n * @slot - the default slot contains the select options\n * @slot icon - replaces caret with custom trigger button icon\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-select',\n  styleUrl: 'ld-select.css',\n  shadow: true,\n})\nexport class LdSelect implements InnerFocusable {\n  @Element() el: HTMLLdSelectElement\n  private selectRef!: HTMLDivElement\n  private triggerRef!: HTMLDivElement\n  private selectionListRef!: HTMLUListElement\n  private internalOptionsContainerRef!: HTMLDivElement\n  private listboxRef!: HTMLLdSelectPopperElement\n  private btnClearRef: HTMLButtonElement\n  private popper: Tether\n  private slotChangeObserver: MutationObserver\n  private popperObserver: MutationObserver\n  private isObserverEnabled = true\n  private optionSelectListenerEnabled = true\n\n  /** Alternative disabled state that keeps element focusable */\n  @Prop() ariaDisabled: string\n\n  /**\n   * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n   * Only one form element in a document can have the autofocus attribute.\n   */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /**\n   * Creatable mode can be enabled when the filter prop is set to true.\n   * This mode allows the user to create new options using the filter input field.\n   */\n  @Prop() creatable?: boolean\n\n  /** The \"create\" input label (creatable mode). */\n  @Prop() createInputLabel? = 'Press Enter to create option'\n\n  /** The \"create\" button label (creatable mode). */\n  @Prop() createButtonLabel? = 'Create option'\n\n  /** Disabled state of the component. */\n  @Prop() disabled?: boolean\n\n  /** The form element to associate the select with (its form owner). */\n  @Prop() form?: string\n\n  /** Set this property to `true` in order to enable an input field for filtering options. */\n  @Prop() filter?: boolean\n\n  /** The filter input placeholder. */\n  @Prop() filterPlaceholder? = 'Filter options'\n\n  /** Set this property to `true` in order to mark the select visually as invalid. */\n  @Prop() invalid?: boolean\n\n  /** Tab index of the trigger button. */\n  @Prop() ldTabindex = 0\n\n  /** Constrains the height of the trigger button by replacing overflowing selection with a \"+X more\" indicator. */\n  @Prop({ mutable: true }) maxRows?: number\n\n  // prettier-ignore\n  /** Display mode. */\n  @Prop() mode?:\n    // default\n    | 'detached' // = default  + small gap between trigger button and popper\n    | 'inline' //   = detached + minumum trigger button width\n    | 'ghost' //    = inline   + transparent background and borders\n\n  /** Multiselect mode. */\n  @Prop() multiple?: boolean\n\n  /** Used to specify the name of the control. */\n  @Prop() name?: string\n\n  /** Used as trigger button label in multiselect mode and in single select mode if nothing is selected. */\n  @Prop() placeholder?: string\n\n  /** Attached as CSS class to the select popper element. */\n  @Prop() popperClass?: string\n\n  /** Prevents a state with no options selected after initial selection in single select mode. */\n  @Prop() preventDeselection?: boolean\n\n  /** A Boolean attribute indicating that an option with a non-empty string value must be selected. */\n  @Prop() required?: boolean\n\n  /**\n   * Sanitize config passed to DOMPurify's sanitize method.\n   * If passed as string, the component will try to parse the string as JSON.\n   * See https://github.com/cure53/DOMPurify#can-i-configure-dompurify\n   */\n  @Prop() sanitizeConfig?: SanitizeConfig | string\n\n  /** Currently selected option(s) (read only!) */\n  @Prop({ mutable: true }) selected?: SelectOption[] = []\n\n  /** Size of the select trigger button. */\n  @Prop() size?: 'sm' | 'lg'\n\n  /** Tether options object to be merged with the default options (optionally stringified). */\n  @Prop() tetherOptions?: Partial<Tether.ITetherOptions> | string\n\n  @State() allOptsFiltered = false\n  @State() filterMatchesOpt = false\n  @State() expanded = false\n  @State() hasCustomIcon = false\n  @State() hasMore = false\n  @State() initialized = false\n  @State() internalOptionsHTML: string\n  @State() renderHiddenInput = false\n  @State() theme: string\n  @State() typeAheadHandler: TypeAheadHandler<\n    HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement\n  >\n\n  /**\n   * Emitted with an array of selected values\n   * when an alteration to the selection is committed.\n   */\n  @Event() ldchange: EventEmitter<string[]>\n\n  /**\n   * Emitted with an array of selected values\n   * when an alteration to the selection is committed.\n   */\n  @Event() ldinput: EventEmitter<string[]>\n\n  /**\n   * Emitted when an option is created in create mode\n   * with the filter input value.\n   */\n  @Event() ldoptioncreate: EventEmitter<string>\n\n  /** Sets focus on the trigger button. */\n  @Method()\n  async focusInner() {\n    if (!this.disabled) {\n      // Experimental feature that fixes a bug in Firefox only.\n      // See https://github.com/emdgroup-liquid/liquid/issues/486\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this.triggerRef.focus({ focusVisible: true })\n    }\n  }\n\n  @Watch('selected')\n  emitEventsAndUpdateHidden(\n    newSelection: SelectOption[],\n    oldSelection: SelectOption[]\n  ) {\n    if (!this.initialized) return\n\n    const newValues = newSelection.map((option) => option.value)\n    const oldValues = oldSelection.map((option) => option.value)\n    if (JSON.stringify(newValues) === JSON.stringify(oldValues)) return\n\n    this.updateTriggerMoreIndicator(true)\n\n    if (this.renderHiddenInput) {\n      this.updateSelectedHiddenInputs(newSelection)\n    }\n\n    // Synchronize options with internal options.\n    this.isObserverEnabled = false\n    this.el.querySelectorAll('ld-option').forEach((ldOption) => {\n      ldOption.selected = newValues.some((value) => value === ldOption.value)\n      if (!ldOption.selected && ldOption.hidden) {\n        this.listboxRef\n          .querySelector(`ld-option-internal[value=\"${ldOption.value}\"]`)\n          .remove()\n        ldOption.remove()\n      }\n    })\n    this.isObserverEnabled = true\n\n    this.el.dispatchEvent(new InputEvent('change', { bubbles: true }))\n    this.el.dispatchEvent(\n      new InputEvent('input', { bubbles: true, composed: true })\n    )\n    this.ldchange.emit(newValues)\n    this.ldinput.emit(newValues)\n  }\n\n  private isDisabled = () => this.disabled || isAriaDisabled(this.ariaDisabled)\n\n  // This method must be a function declaration for testing purposes;\n  // otherwise Jest's mockImplementation won't work here.\n  private isOverflowing() {\n    /* istanbul ignore next */\n    return (\n      this.selectionListRef.scrollHeight >\n      this.selectionListRef.clientHeight + 2\n    )\n  }\n\n  private updateTriggerMoreIndicator = (refresh = false) => {\n    if (!this.multiple || !this.maxRows) return\n\n    if (refresh) this.hasMore = false\n\n    requestAnimationFrame(() => {\n      if (!this.selectionListRef) return\n\n      const selectionListItems = Array.from(\n        this.selectionListRef.querySelectorAll<HTMLLIElement>(\n          '.ld-select__selection-list-item'\n        )\n      )\n\n      if (!this.hasMore) {\n        // reset\n        this.selectionListRef\n          .querySelector('.ld-select__selection-list-more')\n          ?.remove()\n        selectionListItems.forEach((el) => {\n          el.classList.remove('ld-select__selection-list-item--overflowing')\n        })\n      }\n\n      // If overflowing, hide overflowing and show \"+X\" indicator\n      if (this.isOverflowing()) {\n        let moreItem\n        if (!this.hasMore) {\n          moreItem = document.createElement('li')\n          moreItem.classList.add('ld-select__selection-list-more')\n          this.selectionListRef.prepend(moreItem)\n        } else {\n          moreItem = this.selectionListRef.querySelector(\n            '.ld-select__selection-list-more'\n          )\n        }\n        this.hasMore = true\n\n        const maxOffset = this.maxRows * 1.75 * 16\n\n        let overflowingTotal = 0\n        selectionListItems.forEach((el) => {\n          const overflowing = overflowingTotal\n            ? true\n            : el.offsetTop >= maxOffset\n          el.classList[overflowing ? 'add' : 'remove'](\n            'ld-select__selection-list-item--overflowing'\n          )\n          if (overflowing) overflowingTotal++\n        })\n\n        const hideLastVisibleIfMoreIndicatorOverflowing = () => {\n          moreItem = this.selectionListRef.querySelector(\n            '.ld-select__selection-list-more'\n          )\n          moreItem.innerText = `+${overflowingTotal}`\n          if (moreItem.offsetTop < maxOffset) {\n            /* istanbul ignore next */\n            return\n          }\n\n          const notOverflowing = Array.from(\n            this.selectionListRef.querySelectorAll(\n              '.ld-select__selection-list-item:not(.ld-select__selection-list-item--overflowing)'\n            )\n          )\n          const [lastNotOverflowing] = notOverflowing.slice(-1)\n          if (lastNotOverflowing) {\n            lastNotOverflowing.classList.add(\n              'ld-select__selection-list-item--overflowing'\n            )\n            overflowingTotal++\n            moreItem.innerText = `+${overflowingTotal}`\n\n            requestAnimationFrame(() => {\n              hideLastVisibleIfMoreIndicatorOverflowing()\n            })\n          }\n        }\n        hideLastVisibleIfMoreIndicatorOverflowing()\n      }\n    })\n  }\n\n  private updatePopperWidth = () => {\n    this.listboxRef.style.setProperty(\n      'width',\n      `${this.selectRef.getBoundingClientRect().width}px`\n    )\n  }\n\n  private updatePopperShadowHeight = () => {\n    const ldPopper = this.listboxRef\n    ldPopper.updateShadowHeight(\n      `calc(100% + ${this.triggerRef.getBoundingClientRect().height}px)`\n    )\n  }\n\n  private updatePopperTheme = () => {\n    const themeEl = this.el.closest('[class*=\"ld-theme-\"]')\n    if (!themeEl) return\n\n    setTimeout(() => {\n      // Array.from(themeEl.classList).find doesn't work in JSDom for some reason.\n      this.theme = themeEl.classList\n        .toString()\n        .split(' ')\n        .find((cl) => cl.startsWith('ld-theme-'))\n        ?.substring(9)\n    })\n  }\n\n  private updatePopper = () => {\n    if (!this.popper) this.initPopper()\n    this.popper.position()\n    this.updatePopperWidth()\n    this.updatePopperShadowHeight()\n    this.updatePopperTheme()\n  }\n\n  private initPopper = () => {\n    const customTetherOptions: Partial<Tether.ITetherOptions> =\n      typeof this.tetherOptions === 'string'\n        ? JSON.parse(this.tetherOptions)\n        : this.tetherOptions\n    const tetherOptions: Tether.ITetherOptions = {\n      classPrefix: 'ld-tether',\n      element: this.listboxRef,\n      target: this.selectRef,\n      attachment: 'top left',\n      targetAttachment: 'bottom left',\n      offset: this.mode ? '-4px 0' : '0 0',\n      constraints: [\n        {\n          to: 'window',\n          pin: true,\n        },\n      ],\n      ...customTetherOptions,\n    }\n\n    this.popper = new Tether(tetherOptions)\n\n    // Observe popper in order to set focus as soon as it becomes visible.\n    this.initPopperObserver()\n\n    this.listboxRef.classList.add('ld-select__popper--initialized')\n  }\n\n  private getOptsRec = (\n    children: Element[]\n  ): (HTMLLdOptionElement | HTMLLdOptionInternalElement)[] => {\n    const options = children.flatMap((child) => {\n      if (isLdOption(child)) {\n        return child\n      }\n      if (isLdOptgroup(child)) {\n        return this.getOptsRec(Array.from(child.children))\n      }\n      return []\n    })\n    return options\n  }\n\n  private getInternalOptionHTML = (\n    ldOption: HTMLLdOptionElement,\n    optgroupDisabled = false\n  ) => {\n    const classStr = ldOption.classList.toString()\n    return `<ld-option-internal${classStr ? ' class=\"' + classStr + '\"' : ''}${\n      this.multiple ? ' mode=\"checkbox\"' : ''\n    }${this.size ? ' size=\"' + this.size + '\"' : ''}${\n      this.preventDeselection ? ' prevent-deselection' : ''\n    }${ldOption.selected ? ' selected' : ''}${\n      ldOption.hidden ? ' hidden' : ''\n    }${ldOption.value ? ' value=\"' + ldOption.value + '\"' : ''}${\n      ldOption.disabled || optgroupDisabled ? ' disabled' : ''\n    }>${ldOption.innerHTML.replaceAll(\n      /<ld-icon (.|\\n|\\r)*slot=\"icon\"(.|\\n|\\r)*>(.|\\n|\\r)*<\\/ld-icon>/g,\n      ''\n    )}</ld-option-internal>`\n  }\n\n  private getInternalOptgroupHTML = (ldOptgroup: HTMLLdOptgroupElement) => {\n    const classStr = ldOptgroup.classList.toString()\n    return `<ld-optgroup-internal label=${ldOptgroup.label} ${\n      classStr ? ' class=\"' + classStr + '\"' : ''\n    }${this.multiple ? ' mode=\"checkbox\"' : ''}${\n      this.size ? ' size=\"' + this.size + '\"' : ''\n    }${ldOptgroup.hidden ? ' hidden' : ''}${\n      ldOptgroup.disabled ? ' disabled' : ''\n    }>${Array.from(ldOptgroup.children)\n      .map((ldOption: HTMLLdOptionElement) =>\n        this.getInternalOptionHTML(ldOption, ldOptgroup.disabled)\n      )\n      .join('')}</ld-optgroup-internal>`\n  }\n\n  private initOptions = () => {\n    const initialized = this.initialized\n    const children = Array.from(\n      initialized ? this.internalOptionsContainerRef.children : this.el.children\n    )\n\n    const options = this.getOptsRec(children)\n\n    if (!options.length) {\n      throw new TypeError(\n        'ld-select requires at least one ld-option element as a child, but found none.'\n      )\n    }\n\n    const selectedOptions = options.filter((child) => {\n      return child.selected\n    })\n\n    if (selectedOptions.length > 1 && !this.multiple) {\n      throw new TypeError(\n        'Multiple selected options are not allowed, if multiple option is not set.'\n      )\n    }\n\n    if (!initialized) {\n      let internalOptionsHTML = ''\n      children.forEach((child) => {\n        if (isLdOption(child)) {\n          internalOptionsHTML += this.getInternalOptionHTML(child)\n        } else if (isLdOptgroup(child)) {\n          internalOptionsHTML += this.getInternalOptgroupHTML(child)\n        } // else it's the slotted icon which we ignore.\n      })\n      this.internalOptionsHTML = internalOptionsHTML\n    }\n    this.selected = selectedOptions.map((child) => {\n      return {\n        value: child.value,\n        html: child.innerHTML,\n        text: child.innerText,\n      }\n    })\n\n    if (this.listboxRef) {\n      this.typeAheadHandler.options =\n        this.listboxRef.querySelectorAll('ld-option-internal')\n    }\n    this.updateTriggerMoreIndicator(true)\n  }\n\n  private updateSelectedHiddenInputs = (selected: SelectOption[]) => {\n    const selectedValues = selected.map(({ value }) => value)\n    const inputs = this.el.querySelectorAll('input')\n\n    // For each existing input, remove it from DOM if not in selected.\n    // Remove each value from selectedValues if hidden input already exists.\n    inputs.forEach((hiddenInput) => {\n      const index = selectedValues.indexOf(hiddenInput.value)\n      if (index >= 0) {\n        selectedValues.splice(index, 1)\n      } else {\n        hiddenInput.remove()\n      }\n    })\n\n    // If nothing is selected we need only one hidden input without value.\n    if (selected.length === 0) {\n      this.appendHiddenInput()\n      return\n    }\n\n    // Else add hidden inputs for each value in selectedValues.\n    selectedValues.forEach(this.appendHiddenInput)\n  }\n\n  private appendHiddenInput = (value?: string) => {\n    const hiddenInput = document.createElement('input')\n\n    // Slot required to keep the hidden input outside the popper.\n    hiddenInput.setAttribute('slot', 'hidden')\n    hiddenInput.name = this.name\n    hiddenInput.type = 'hidden'\n\n    if (value !== undefined) {\n      hiddenInput.value = value\n    }\n\n    this.el.appendChild(hiddenInput)\n  }\n\n  @Watch('name')\n  @Watch('form')\n  updateHiddenInputs() {\n    const hiddenInputs = this.el.querySelectorAll('input')\n\n    const outerForm = this.el.closest('form')\n    if (!this.name || !(outerForm || this.form)) {\n      hiddenInputs.forEach((hiddenInput) => {\n        hiddenInput.remove()\n      })\n      return\n    }\n\n    if (!hiddenInputs.length) {\n      this.updateSelectedHiddenInputs(this.selected)\n      return\n    }\n\n    hiddenInputs.forEach((hiddenInput) => {\n      hiddenInput.name = this.name\n      if (this.form) {\n        hiddenInput.setAttribute('form', this.form)\n      }\n    })\n  }\n\n  private handleSlotChange = (mutationsList: MutationRecord[]) => {\n    if (!this.isObserverEnabled) return\n    if (\n      !mutationsList.some(\n        (record) => isLdOption(record.target) || isLdOptgroup(record.target)\n      )\n    ) {\n      return\n    }\n\n    this.initialized = false\n\n    const oldValues = [...this.selected]\n    this.initOptions()\n\n    this.initialized = true\n    const newValues = [...this.selected]\n    this.emitEventsAndUpdateHidden(newValues, oldValues)\n  }\n\n  private handlePopperChange = (mutationsList: MutationRecord[]) => {\n    if (\n      this.listboxRef.classList.contains('ld-tether-enabled') &&\n      mutationsList.some((mutation) =>\n        mutation.oldValue.includes('display: none;')\n      )\n    ) {\n      // Popper has just been expanded and is visible.\n\n      // If there is a selected option in single select mode, focus it.\n      let toFocus\n      if (!this.multiple) {\n        // Using find instead of ld-option-internal[selected] selector below\n        // in order to prevent \"TypeError: e.getAttributeNode is not a function\" in JSDom.\n        toFocus = Array.from(\n          this.listboxRef.querySelectorAll('ld-option-internal')\n        )\n          .find((ldOption) => ldOption.hasAttribute('selected'))\n          ?.shadowRoot.querySelector('[role=\"option\"]')\n      }\n\n      // Otherwise, focus either the filter input (if available) or the trigger button.\n      if (!toFocus) {\n        if (this.filter) {\n          toFocus = this.getFilterInput()\n        } else {\n          toFocus = this.triggerRef\n        }\n      }\n\n      toFocus.focus()\n    }\n  }\n\n  private initSlotChangeObserver = () => {\n    this.slotChangeObserver = new MutationObserver(this.handleSlotChange)\n    this.slotChangeObserver.observe(this.el, {\n      subtree: true,\n      childList: true,\n      attributes: true,\n    })\n  }\n\n  private initPopperObserver = () => {\n    this.popperObserver = new MutationObserver(this.handlePopperChange)\n    this.popperObserver.observe(this.listboxRef, {\n      subtree: false,\n      childList: false,\n      attributes: true,\n      attributeFilter: ['style'],\n      attributeOldValue: true,\n    })\n  }\n\n  private getFilterInput = () =>\n    this.listboxRef.shadowRoot.querySelector<HTMLInputElement>(\n      '.ld-select-popper__filter-input'\n    )\n\n  private togglePopper = () => {\n    if (!this.popper) this.initPopper()\n\n    this.expanded = !this.expanded\n\n    if (this.expanded) {\n      this.popper.enable()\n    } else {\n      this.popper.disable()\n      this.focusInner()\n    }\n  }\n\n  private clearSelection = () => {\n    Array.from(this.listboxRef.querySelectorAll('ld-option-internal')).forEach(\n      (option) => {\n        option.selected = false\n      }\n    )\n    this.selected = []\n  }\n\n  @Listen('resize', { target: 'window', passive: true })\n  handleWindowResize() {\n    if (this.isDisabled()) return // this is for a minor performance optimization only\n\n    this.updatePopperWidth()\n    this.updateTriggerMoreIndicator(true)\n    this.updatePopperShadowHeight()\n  }\n\n  @Listen('ldoptionselect', { target: 'window', passive: true })\n  handleSelect(ev: CustomEvent<boolean>) {\n    const target = ev.target as HTMLLdOptionInternalElement\n\n    // Ignore events which are not fired on current instance.\n    if (target.closest('[role=\"listbox\"]') !== this.listboxRef) return\n\n    if (!this.optionSelectListenerEnabled) return\n    this.optionSelectListenerEnabled = false\n\n    if (!this.multiple) {\n      // Deselect currently selected option, if it's not the target option.\n      this.listboxRef\n        .querySelectorAll('ld-option-internal')\n        .forEach((option) => {\n          if (option !== target.closest('ld-option-internal')) {\n            option.selected = false\n          }\n        })\n      this.togglePopper()\n      if (this.filter) {\n        this.resetFilter()\n        this.focusInner()\n      }\n    }\n    this.initOptions()\n\n    this.optionSelectListenerEnabled = true\n  }\n\n  private handleHome = (ev) => {\n    ev.preventDefault()\n    this.focusInner()\n  }\n\n  private handleEnd = (ev) => {\n    // Move focus to the last option.\n    ev.preventDefault()\n    const visibleOptions = Array.from(\n      this.listboxRef.querySelectorAll('ld-option-internal')\n    ).filter((option) => !isLdOptInternalHidden(option))\n    if (document.activeElement !== visibleOptions[visibleOptions.length - 1]) {\n      visibleOptions[visibleOptions.length - 1].focusInner()\n    }\n  }\n\n  private selectAndFocus = (\n    ev: KeyboardEvent,\n    opt: HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement | undefined\n  ) => {\n    if (!opt) return\n\n    if (this.multiple && ev.shiftKey) {\n      if (\n        isLdOptionInternal(document.activeElement) &&\n        !isLdOptgroupInternal(document.activeElement) &&\n        !document.activeElement.hasAttribute('selected')\n      ) {\n        document.activeElement.dispatchEvent(\n          new KeyboardEvent('keydown', { key: ' ' })\n        )\n      }\n      if (!opt.hasAttribute('selected') && !isLdOptgroupInternal(opt)) {\n        opt.dispatchEvent(new KeyboardEvent('keydown', { key: ' ' }))\n      }\n    }\n    opt.focusInner()\n  }\n\n  private handleFilterChange = (ev: CustomEvent<string>) => {\n    // Hide options which do not match the filter query.\n    const opts = this.internalOptionsContainerRef.querySelectorAll<\n      HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement\n    >('ld-option-internal, ld-optgroup-internal')\n    const query = ev.detail.trim().toLowerCase()\n    let allFiltered = true\n    let filterMatchesOpt = false\n    const filteredOpts = Array.from(opts).filter((opt) => {\n      const optTextLower = isLdOptionInternal(opt)\n        ? opt.textContent.toLowerCase()\n        : (opt as HTMLLdOptgroupInternalElement).label.toLowerCase()\n      const filtered = Boolean(query) && !optTextLower.includes(query)\n\n      opt.filtered = filtered\n      if (optTextLower === query) {\n        filterMatchesOpt = true\n      }\n      if (!opt.filtered) {\n        allFiltered = false\n      }\n\n      return !filtered\n    })\n\n    this.typeAheadHandler.options = filteredOpts\n    this.allOptsFiltered = allFiltered\n    this.filterMatchesOpt = filterMatchesOpt\n\n    // Re-position popper after new height has been applied.\n    requestAnimationFrame(() => {\n      this.updatePopper()\n    })\n  }\n\n  private handleFilterCreate = () => {\n    // In single select mode, deselect currently selected option\n    if (!this.multiple) {\n      const options = this.el.querySelectorAll('ld-option')\n      options.forEach((ldOption) => {\n        ldOption.selected = false\n      })\n    }\n\n    const value = this.getFilterInput().value\n    this.resetFilter()\n    this.ldoptioncreate.emit(value)\n  }\n\n  private canCreate = () => {\n    return Boolean(\n      this.creatable && !this.filterMatchesOpt && this.getFilterInput().value\n    )\n  }\n\n  private focusPrev = (\n    current: HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement,\n    ev: KeyboardEvent\n  ) => {\n    // Focus previous visible option, if any.\n    // If the previous is an option, we check if it's visible.\n    if (isLdOptionInternal(current.previousElementSibling)) {\n      if (isLdOptInternalHidden(current.previousElementSibling)) {\n        // If it's hidden, we repeat with the hidden option.\n        this.focusPrev(current.previousElementSibling, ev)\n        return\n      }\n      // If it's not hidden we focus it.\n      this.selectAndFocus(ev, current.previousElementSibling)\n      return\n    }\n\n    // If the previous is an optgroup, we try to focus the last option in it.\n    if (isLdOptgroupInternal(current.previousElementSibling)) {\n      const lastInOptgroup = Array.from(\n        current.previousElementSibling.children\n      ).at(-1) as HTMLLdOptionInternalElement\n\n      // If it's hidden, we repeat with the hidden option.\n      if (isLdOptInternalHidden(lastInOptgroup)) {\n        this.focusPrev(lastInOptgroup, ev)\n        return\n      }\n      // If it's not hidden we focus it.\n      this.selectAndFocus(ev, lastInOptgroup)\n      return\n    }\n\n    // If there is no previous element, we check if we are currently in an optgroup.\n    const closestOptgroup =\n      isLdOptionInternal(current) &&\n      current.closest<HTMLLdOptgroupInternalElement | undefined>(\n        'ld-optgroup-internal'\n      )\n    // If we are in an optgroup, we try to focus the optgroup.\n    if (closestOptgroup) {\n      // If the optgroup is not visible, we set current to the optgroup and repeat.\n      if (isLdOptInternalHidden(closestOptgroup)) {\n        this.focusPrev(closestOptgroup, ev)\n        return\n      }\n      closestOptgroup.focusInner()\n      return\n    }\n\n    // Otherwise we focus either the filter input or the trigger button.\n    if (this.filter) {\n      this.getFilterInput().focus()\n      return\n    }\n    this.handleHome(ev)\n  }\n\n  private focusNext = (\n    current: HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement,\n    ev: KeyboardEvent\n  ) => {\n    // Focus next visible option, if any.\n    // If current is an optgroup, try to focus the first option in it.\n    if (isLdOptgroupInternal(current)) {\n      const firstInOptgroup = current.children[0] as HTMLLdOptionInternalElement\n      // If it's hidden, we repeat with the hidden option.\n      if (isLdOptInternalHidden(firstInOptgroup)) {\n        this.focusNext(firstInOptgroup, ev)\n        return\n      }\n      // If it's not hidden we focus it.\n      this.selectAndFocus(ev, firstInOptgroup)\n      return\n    }\n\n    // If the next is an option, we check if it's visible.\n    if (isLdOptionInternal(current.nextElementSibling)) {\n      if (isLdOptInternalHidden(current.nextElementSibling)) {\n        // If it's hidden, we repeat with the hidden option.\n        this.focusNext(current.nextElementSibling, ev)\n        return\n      }\n      // If it's not hidden we focus it.\n      this.selectAndFocus(ev, current.nextElementSibling)\n      return\n    }\n\n    // If the next is an optgroup, we try to focus the optgroup.\n    if (isLdOptgroupInternal(current.nextElementSibling)) {\n      // If it's hidden, we repeat with first input within the hidden optgroup.\n      if (isLdOptInternalHidden(current.nextElementSibling)) {\n        const firstInOptgroup = current.nextElementSibling\n          .children[0] as HTMLLdOptionInternalElement\n        // If the first is not visible, we continue with it as current.\n        if (isLdOptInternalHidden(firstInOptgroup)) {\n          this.focusNext(firstInOptgroup, ev)\n          return\n        }\n        // Otherwise we focus it.\n        this.selectAndFocus(ev, firstInOptgroup)\n        return\n      }\n      // If it's not hidden we focus it.\n      this.selectAndFocus(ev, current.nextElementSibling)\n      return\n    }\n\n    // If there is no next element, we check if we are currently in an optgroup.\n    const closestOptgroup =\n      isLdOptionInternal(current) &&\n      current.closest<HTMLLdOptgroupInternalElement | undefined>(\n        'ld-optgroup-internal'\n      )\n    // If we are in an optgroup, we try to focus its next sibling.\n    if (closestOptgroup) {\n      const next = closestOptgroup.nextElementSibling as\n        | HTMLLdOptionInternalElement\n        | HTMLLdOptgroupInternalElement\n        | undefined\n      if (!next) return\n\n      // If the next sibling is not visible, we repeat with the next sibling.\n      if (isLdOptInternalHidden(next)) {\n        this.focusNext(next, ev)\n        return\n      }\n      // If it's visible, we focus it.\n      next.focusInner()\n    }\n  }\n\n  @Listen('keydown', { passive: false, target: 'window' })\n  handleKeyDown(ev: KeyboardEvent) {\n    if (this.isDisabled()) return\n\n    // Ignore page special meta key combos.\n    if (ev.metaKey && !['ArrowDown', 'ArrowUp'].includes(ev.key)) return\n\n    // Ignore events if current instance has no focus.\n    if (\n      document.activeElement.closest('[role=\"listbox\"]') !== this.listboxRef &&\n      document.activeElement.closest('ld-select') !== this.el\n    ) {\n      return\n    }\n\n    const filterHasFocus =\n      this.filter &&\n      this.listboxRef?.shadowRoot.activeElement === this.getFilterInput()\n\n    // If filter has focus...\n    if (filterHasFocus) {\n      // ... and create mode is active\n      if (this.canCreate() && ev.key === 'Enter') {\n        this.handleFilterCreate()\n        return\n      }\n\n      // Ignore events if filter input has focus,\n      // except for navigation-specific keys.\n      if (\n        !['ArrowDown', 'ArrowUp', 'End', 'Escape', 'Home', 'Tab'].includes(\n          ev.key\n        )\n      ) {\n        return\n      }\n    }\n\n    // If the clear button is focused, ignore Enter and Space key events.\n    if (\n      this.el.shadowRoot.activeElement === this.btnClearRef &&\n      (ev.key === ' ' || ev.key === 'Enter')\n    ) {\n      return\n    }\n\n    switch (ev.key) {\n      case 'ArrowDown': {\n        // If not expanded, expand popper.\n        // If expanded, move focus to the next option.\n        // If shift is pressed, select the next option.\n        // Holding down the Shift key and then using the Down cursor keys\n        // increases the range of items selected (multiple mode only).\n        ev.preventDefault()\n        if (!this.expanded) {\n          this.togglePopper()\n          return\n        }\n\n        if (ev.metaKey) {\n          this.handleEnd(ev)\n          return\n        }\n\n        // Focus next visible option, if any,\n        // or the filter input, if applicable.\n        if (document.activeElement === this.el || filterHasFocus) {\n          if (this.filter && !filterHasFocus) {\n            this.getFilterInput().focus()\n          } else {\n            const nextOpt = Array.from(\n              this.listboxRef.querySelectorAll<\n                HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement\n              >('ld-option-internal, ld-optgroup-internal')\n            ).find((opt) => !isLdOptInternalHidden(opt))\n            this.selectAndFocus(ev, nextOpt)\n          }\n        } else {\n          this.focusNext(\n            document.activeElement as\n              | HTMLLdOptionInternalElement\n              | HTMLLdOptgroupInternalElement,\n            ev\n          )\n        }\n        break\n      }\n      case 'ArrowUp': {\n        // If not expanded, expand popper.\n        // If expanded, move focus to the previous option.\n        // If the first option is focused, focus the trigger button.\n        // Holding down the Shift key and then using the Up cursor keys\n        // increases the range of items selected (multiple mode only).\n        ev.preventDefault()\n        if (!this.expanded) {\n          this.togglePopper()\n          return\n        }\n\n        if (ev.metaKey || filterHasFocus) {\n          this.handleHome(ev)\n          return\n        }\n\n        // Focus previous visible option, if any.\n        if (\n          isLdOptionInternal(document.activeElement) ||\n          isLdOptgroupInternal(document.activeElement)\n        ) {\n          this.focusPrev(document.activeElement, ev)\n        }\n        break\n      }\n      case 'Home':\n        if (this.expanded) {\n          this.handleHome(ev)\n        }\n        break\n      case 'End':\n        if (this.expanded) {\n          this.handleEnd(ev)\n        }\n        break\n      case ' ': {\n        // If trigger has focus: Toggle popper.\n        ev.stopImmediatePropagation()\n        ev.preventDefault()\n        if (this.expanded) {\n          this.togglePopper()\n        } else {\n          this.togglePopper()\n        }\n        break\n      }\n      case 'Enter':\n        // If expanded and trigger button is focused: Toggle popper.\n        ev.preventDefault()\n        if (\n          this.expanded &&\n          this.el.shadowRoot.activeElement === this.triggerRef\n        ) {\n          this.togglePopper()\n        }\n        break\n      case 'Escape':\n        // If expanded: Close popper.\n        if (this.expanded) {\n          ev.preventDefault()\n          ev.stopImmediatePropagation()\n          this.togglePopper()\n        }\n        break\n      case 'Tab': // Also covers Shift+Tab\n        // If expanded and popper element has focus within: Prevent default.\n        if (\n          this.expanded &&\n          document.activeElement.closest('[role=\"listbox\"]') === this.listboxRef\n        ) {\n          ev.preventDefault()\n          ev.stopImmediatePropagation()\n        }\n        break\n      default:\n        if (this.expanded) {\n          ev.stopImmediatePropagation()\n          ev.preventDefault()\n          this.typeAheadHandler.typeAhead(ev.key)\n        }\n    }\n  }\n\n  @Listen('click', {\n    target: 'window',\n  })\n  handleClickOutside(ev) {\n    // closest utility function must be used here for the component\n    // to work in Solid.js app, where ev.target can be an element\n    // within the shadow DOM of the component.\n    // Usage of ev.composedPath() is required for penetrating shadow DOM.\n    const target = 'composedPath' in ev ? ev.composedPath().at(0) : ev.target\n    if (\n      ev.isTrusted &&\n      closest('ld-select', target) !== this.el &&\n      closest('[role=\"listbox\"]', target) !== this.listboxRef\n    ) {\n      this.expanded = false\n      this.resetFilter()\n    }\n  }\n\n  // Mobile Safari in some cases does not react to click events on elements\n  // which are not interactive. But it does to touch events.\n  @Listen('touchend', {\n    target: 'window',\n    passive: true,\n  })\n  handleTouchOutside(ev) {\n    this.handleClickOutside(ev)\n  }\n\n  private resetFilter = () => {\n    this.allOptsFiltered = false\n    this.filterMatchesOpt = false\n\n    if (!this.filter) return\n    const filterInput = this.getFilterInput()\n    if (!filterInput) return\n\n    filterInput.value = ''\n    const opts = this.internalOptionsContainerRef.querySelectorAll<\n      HTMLLdOptionInternalElement | HTMLLdOptgroupInternalElement\n    >('ld-option-internal, ld-optgroup-internal')\n\n    opts.forEach((opt) => {\n      opt.filtered = false\n    })\n\n    this.typeAheadHandler.options = opts\n    this.listboxRef.resetFilter()\n  }\n\n  private handleFocusEvent = (ev: FocusEvent) => {\n    // Emit event only, if focus is not within the select component.\n    if (\n      ev.relatedTarget === null ||\n      ev.relatedTarget === this.listboxRef ||\n      isLdOption(ev.relatedTarget) ||\n      isLdOptgroup(ev.relatedTarget) ||\n      closest('ld-select', ev.relatedTarget as HTMLElement) === this.el\n    ) {\n      ev.stopImmediatePropagation()\n    } else {\n      // Focus left the select component - make sure it is not expanded.\n      this.expanded = false\n      this.resetFilter()\n    }\n  }\n\n  private handleTriggerClick = (ev: Event) => {\n    ev.preventDefault()\n\n    if (this.isDisabled()) return\n\n    this.togglePopper()\n  }\n\n  private handleClearClick = (ev: MouseEvent) => {\n    ev.preventDefault()\n    ev.stopImmediatePropagation()\n\n    if (this.isDisabled()) return\n\n    this.clearSelection()\n    this.focusInner()\n  }\n\n  private handleClearSingleClick = (ev: MouseEvent, optionValue) => {\n    ev.preventDefault()\n    ev.stopImmediatePropagation()\n\n    if (this.isDisabled()) return\n\n    this.selected = this.selected.filter(\n      (selection) => selection.value !== optionValue\n    )\n\n    this.listboxRef\n      .querySelector(`ld-option-internal[value='${optionValue}']`)\n      ?.dispatchEvent(new KeyboardEvent('keydown', { key: ' ' }))\n  }\n\n  componentWillLoad() {\n    const outerForm = this.el.closest('form')\n\n    if (this.name && (outerForm || this.form)) {\n      this.renderHiddenInput = true\n    }\n\n    const customIcon = this.el.querySelector('ld-icon')\n    this.hasCustomIcon = !!customIcon\n\n    if (customIcon) {\n      customIcon.setAttribute('size', this.size)\n    }\n\n    this.initOptions()\n\n    if (this.renderHiddenInput) {\n      this.updateSelectedHiddenInputs(this.selected)\n    }\n\n    registerAutofocus(this.autofocus)\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.initSlotChangeObserver()\n      this.typeAheadHandler = new TypeAheadHandler(\n        this.listboxRef.querySelectorAll('ld-option-internal')\n      )\n      this.initialized = true\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.expanded) {\n      this.updatePopper()\n    }\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.popperObserver) this.popperObserver.disconnect()\n    /* istanbul ignore if */\n    if (this.popper) this.popper.destroy()\n    /* istanbul ignore if */\n    if (this.slotChangeObserver) this.slotChangeObserver.disconnect()\n    /* istanbul ignore if */\n    if (this.listboxRef) this.listboxRef.remove()\n    /* istanbul ignore if */\n    if (this.typeAheadHandler) this.typeAheadHandler.clearTimeout()\n  }\n\n  render() {\n    // Endable detached mode if any display mode is set.\n    const detached = !!this.mode\n\n    // Implicitly enable inline mode if ghost mode is enabled.\n    const inline = this.mode === 'inline' || this.mode === 'ghost'\n\n    // Disallow ghost in combination with multiple select mode.\n    const ghost = !this.multiple && this.mode === 'ghost'\n\n    const cl = [\n      'ld-select',\n      this.disabled && 'ld-select--disabled',\n      this.size && `ld-select--${this.size}`,\n      this.invalid && 'ld-select--invalid',\n      this.expanded && 'ld-select--expanded',\n      detached && 'ld-select--detached',\n      inline && 'ld-select--inline',\n      ghost && 'ld-select--ghost',\n    ]\n\n    const triggerCl = [\n      'ld-select__btn-trigger',\n      this.invalid && 'ld-select__btn-trigger--invalid',\n      detached && 'ld-select__btn-trigger--detached',\n      inline && 'ld-select__btn-trigger--inline',\n      ghost && 'ld-select__btn-trigger--ghost',\n    ]\n\n    const triggerIconCl = [\n      'ld-select__icon',\n      this.expanded && 'ld-select__icon--rotated',\n    ]\n\n    const triggerHtml = this.multiple\n      ? this.placeholder\n      : this.selected[0]?.html || this.placeholder\n\n    const triggerText = this.multiple\n      ? this.placeholder\n      : this.selected[0]?.text || this.placeholder\n\n    return (\n      <Host>\n        <div\n          class={getClassNames(cl)}\n          aria-disabled={this.isDisabled() ? 'true' : undefined}\n          part=\"root\"\n          onBlur={this.handleFocusEvent}\n          onFocusout={this.handleFocusEvent}\n          style={\n            this.expanded\n              ? {\n                  zIndex: '2147483647', // Highest possible z-index\n                }\n              : undefined\n          }\n        >\n          {this.renderHiddenInput && <slot name=\"hidden\" />}\n          <div class=\"ld-select__slot-container\" part=\"slot-container\">\n            <slot></slot>\n          </div>\n          <div\n            class=\"ld-select__select\"\n            part=\"select\"\n            ref={(el) => (this.selectRef = el)}\n          >\n            <div\n              class={getClassNames(triggerCl)}\n              role=\"button\"\n              part=\"btn-trigger focusable\"\n              tabindex={\n                this.disabled && !isAriaDisabled(this.ariaDisabled)\n                  ? undefined\n                  : this.ldTabindex\n              }\n              aria-disabled={this.isDisabled() ? 'true' : undefined}\n              aria-haspopup=\"listbox\"\n              aria-expanded={this.expanded ? 'true' : 'false'}\n              aria-label={triggerText}\n              onClick={this.handleTriggerClick}\n              ref={(el) => (this.triggerRef = el)}\n            >\n              {this.multiple && this.selected.length ? (\n                <div\n                  class=\"ld-select__selection-list-container\"\n                  part=\"selection-list-container\"\n                >\n                  <ul\n                    class=\"ld-select__selection-list\"\n                    part=\"selection-list\"\n                    aria-label=\"Selected options\"\n                    ref={(el) => (this.selectionListRef = el)}\n                    style={{\n                      maxHeight:\n                        this.maxRows && this.maxRows > 0\n                          ? `${this.maxRows * 1.75}rem`\n                          : undefined,\n                    }}\n                  >\n                    {this.selected.map((selection, index) => {\n                      return (\n                        <li\n                          key={index}\n                          class=\"ld-select__selection-list-item\"\n                          style={{ order: index + 1 + '' }}\n                          part=\"selection-list-item\"\n                        >\n                          <label class=\"ld-select__selection-label\">\n                            <span\n                              class=\"ld-select__selection-label-text\"\n                              title={selection.text}\n                              part=\"selection-label-text\"\n                              innerHTML={sanitize(\n                                selection.html,\n                                this.sanitizeConfig\n                              )}\n                            ></span>\n\n                            <button\n                              disabled={this.isDisabled() ? true : undefined}\n                              class=\"ld-select__btn-clear-single\"\n                              part=\"btn-clear-single focusable\"\n                              onClick={(ev) => {\n                                this.handleClearSingleClick.call(\n                                  this,\n                                  ev,\n                                  selection.value\n                                )\n                              }}\n                            >\n                              {/* custom icon cross */}\n                              <svg\n                                class=\"ld-select__btn-clear-single-icon\"\n                                part=\"icon-clear-single\"\n                                fill=\"none\"\n                                viewBox=\"0 0 12 12\"\n                              >\n                                <title>Clear</title>\n                                <path\n                                  stroke=\"#fff\"\n                                  stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\"\n                                  stroke-width=\"2\"\n                                  d=\"M2 2l8 8M2 10l8-8\"\n                                />\n                              </svg>\n                            </button>\n\n                            <span\n                              class=\"ld-select__selection-label-bg\"\n                              part=\"selection-label-bg\"\n                            />\n                          </label>\n                        </li>\n                      )\n                    })}\n                  </ul>\n                </div>\n              ) : (\n                <span\n                  class=\"ld-select__btn-trigger-text-wrapper\"\n                  title={triggerText}\n                  part=\"trigger-text-wrapper\"\n                >\n                  <span\n                    class=\"ld-select__btn-trigger-text\"\n                    part=\"trigger-text\"\n                    innerHTML={sanitize(triggerHtml, this.sanitizeConfig)}\n                  ></span>\n                </span>\n              )}\n\n              {this.selected?.length && this.multiple ? (\n                <button\n                  class=\"ld-select__btn-clear\"\n                  disabled={this.isDisabled() ? true : undefined}\n                  onClick={this.handleClearClick}\n                  ref={(el) => (this.btnClearRef = el)}\n                  part=\"btn-clear focusable\"\n                >\n                  {/* custom icon cross */}\n                  <svg\n                    class=\"ld-select__btn-clear-icon\"\n                    fill=\"none\"\n                    viewBox=\"0 0 21 20\"\n                    part=\"icon-clear\"\n                  >\n                    <title>Clear all</title>\n                    <path\n                      fill=\"currentColor\"\n                      fill-rule=\"evenodd\"\n                      d=\"M10 20a10 10 0 100-20 10 10 0 000 20z\"\n                      clip-rule=\"evenodd\"\n                    />\n                    <path\n                      stroke=\"#fff\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                      stroke-width=\"2\"\n                      d=\"M6.67 6.67l6.67 6.66M6.67 13.33l6.67-6.66\"\n                    />\n                  </svg>\n                </button>\n              ) : (\n                ''\n              )}\n\n              <slot name=\"icon\"></slot>\n              {!this.hasCustomIcon && (\n                /* custom icon arrow-down */\n                <svg\n                  class={getClassNames(triggerIconCl)}\n                  role={'presentation'}\n                  viewBox=\"0 0 16 16\"\n                  part=\"trigger-icon\"\n                >\n                  <path\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"3\"\n                    d=\"M3 6l5 4 5-4\"\n                  />\n                </svg>\n              )}\n            </div>\n          </div>\n          <ld-select-popper\n            allOptionsFiltered={this.allOptsFiltered}\n            creatable={this.creatable}\n            createButtonLabel={this.createButtonLabel}\n            createInputLabel={this.createInputLabel}\n            detached={detached}\n            expanded={this.expanded}\n            filter={this.filter}\n            filterMatchesOption={this.filterMatchesOpt}\n            filterPlaceholder={this.filterPlaceholder}\n            onBlur={this.handleFocusEvent}\n            onFocusout={this.handleFocusEvent}\n            onLdselectfilterchange={this.handleFilterChange}\n            onLdselectfiltercreate={this.handleFilterCreate}\n            popperClass={this.popperClass}\n            ref={(el) => (this.listboxRef = el)}\n            role=\"listbox\"\n            size={this.size}\n            theme={this.theme}\n          >\n            <div\n              ref={(el) => (this.internalOptionsContainerRef = el)}\n              innerHTML={sanitize(this.internalOptionsHTML, {\n                ...(typeof this.sanitizeConfig === 'string'\n                  ? JSON.parse(this.sanitizeConfig)\n                  : this.sanitizeConfig),\n                ADD_ATTR: ['prevent-deselection'],\n              })}\n              part=\"options-container\"\n            ></div>\n          </ld-select-popper>\n        </div>\n      </Host>\n    )\n  }\n}\n",":host {\n  display: inline-flex;\n\n  .ld-select {\n    flex-grow: 1;\n    max-width: 100%;\n  }\n}\n\n:host,\n.ld-select {\n  /* reset */\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  ul {\n    list-style: none;\n  }\n}\n\n.ld-select {\n  /* layout */\n  --ld-select-min-width: 12.8125rem;\n  --ld-select-min-height: var(--ld-sp-40);\n  --ld-select-min-height-sm: var(--ld-sp-32);\n  --ld-select-min-height-lg: 3.125rem;\n  --ld-select-padding-x: var(--ld-sp-12);\n  --ld-select-padding-x-sm: 0.625rem;\n  --ld-select-padding-x-lg: 0.875rem;\n  --ld-select-padding-y: var(--ld-sp-8);\n  --ld-select-padding-y-sm: var(--ld-sp-4);\n  --ld-select-padding-y-lg: var(--ld-sp-8);\n  --ld-select-padding-right: calc(var(--ld-sp-40) + var(--ld-sp-12));\n  --ld-select-padding-right-sm: calc(var(--ld-sp-40) + 0.625rem);\n  --ld-select-padding-right-lg: calc(var(--ld-sp-40) + 0.875rem);\n  --ld-select-icon-size: 1.25rem;\n  --ld-select-icon-size-sm: var(--ld-sp-16);\n  --ld-select-icon-size-lg: var(--ld-sp-24);\n  --ld-select-trigger-line-height: 1.25;\n\n  &--sm {\n    --ld-select-min-height: var(--ld-select-min-height-sm);\n    --ld-select-padding-x: var(--ld-select-padding-x-sm);\n    --ld-select-padding-y: var(--ld-select-padding-y-sm);\n    --ld-select-padding-right: var(--ld-select-padding-right-sm);\n    --ld-select-icon-size: var(--ld-select-icon-size-sm);\n  }\n\n  &--lg {\n    --ld-select-min-height: var(--ld-select-min-height-lg);\n    --ld-select-padding-x: var(--ld-select-padding-x-lg);\n    --ld-select-padding-y: var(--ld-select-padding-y-lg);\n    --ld-select-padding-right: var(--ld-select-padding-right-lg);\n    --ld-select-icon-size: var(--ld-select-icon-size-lg);\n  }\n\n  /* colors */\n  --ld-select-col: var(--ld-col-neutral-900);\n  --ld-select-col-disabled: var(--ld-col-neutral-100);\n  --ld-select-col-border: var(--ld-col-neutral-100);\n  --ld-select-col-border-hover: var(--ld-col-neutral-300);\n  --ld-select-bg-col: var(--ld-col-wht);\n  --ld-select-selection-col: var(--ld-col-wht);\n\n  /* themable colors */\n  --ld-select-invalid-col: var(--ld-thm-error);\n  --ld-select-invalid-icon-col-hover: var(--ld-thm-error-hover);\n  --ld-select-invalid-icon-col-focus: var(--ld-thm-error-focus);\n  --ld-select-invalid-icon-col-active: var(--ld-thm-error-active);\n  --ld-select-invalid-disabled-bg-col: var(--ld-thm-error-disabled);\n  --ld-select-thm-col: var(--ld-thm-primary);\n  --ld-select-thm-col-hover: var(--ld-thm-primary-hover);\n  --ld-select-thm-col-focus: var(--ld-thm-primary-focus);\n  --ld-select-thm-col-active: var(--ld-thm-primary-active);\n  --ld-select-ghost-trigger-bg-col-hover: var(--ld-thm-primary-alpha-lowest);\n  --ld-select-ghost-trigger-bg-col-focus: var(--ld-thm-primary-alpha-low);\n\n  display: inline-flex;\n  position: relative;\n\n  select + .ld-icon,\n  ::slotted(ld-icon) {\n    width: var(--ld-select-icon-size);\n    height: var(--ld-select-icon-size);\n  }\n\n  ::slotted(ld-icon) {\n    display: contents !important;\n  }\n\n  select {\n    + .ld-icon,\n    + .ld-select__icon {\n      position: absolute;\n      right: var(--ld-select-padding-x);\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    &[multiple] + .ld-icon,\n    &[multiple] + .ld-select__icon {\n      display: none;\n    }\n\n    + .ld-icon {\n      width: var(--ld-select-icon-size);\n      height: var(--ld-select-icon-size);\n    }\n  }\n\n  > select[multiple] {\n    overflow: auto;\n  }\n}\n\n/* Mobile Safari (iOS only) */\n/* stylelint-disable-next-line media-feature-range-notation, media-feature-name-no-vendor-prefix */\n@media screen and (max-width: 767px) and (-webkit-min-device-pixel-ratio: 0) {\n  .ld-select > select[multiple] {\n    padding-right: calc(var(--ld-select-padding-x) + var(--ld-sp-24));\n\n    + .ld-icon,\n    + .ld-select__icon {\n      display: flex;\n    }\n  }\n}\n\n.ld-select--expanded {\n  .ld-tether-target-attached-bottom {\n    .ld-select__btn-trigger:not(.ld-select__btn-trigger--detached) {\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  }\n}\n\n:where(.ld-select:not(.ld-select--inline, .ld-select--ghost)) {\n  min-width: var(--ld-select-min-width);\n}\n\n.ld-select__select,\n.ld-select__btn-trigger {\n  width: 100%;\n}\n\n.ld-select > select,\n.ld-select__btn-trigger {\n  /* outline: none; */\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  font: var(--ld-typo-body-m);\n  line-height: var(--ld-select-trigger-line-height);\n  border: 0;\n  padding: var(--ld-select-padding-y) var(--ld-select-padding-x);\n  border-radius: var(--ld-br-m);\n  height: 100%;\n  user-select: none;\n  touch-action: manipulation;\n  color: var(--ld-select-col);\n  background-color: var(--ld-select-bg-col);\n  text-align: left;\n  appearance: none;\n  -webkit-touch-callout: none;\n\n  &:where(select) {\n    width: 100%;\n  }\n\n  &:where(select:not([multiple])) {\n    padding-right: calc(var(--ld-select-padding-x) + var(--ld-sp-24));\n  }\n\n  &:where(\n      select:not(\n          :disabled,\n          [aria-disabled]:where(\n              :not([aria-disabled=''], [aria-disabled='false'])\n            )\n        )\n    ),\n  &:where(\n      .ld-select__btn-trigger:not(\n          [aria-disabled]:where(\n              :not([aria-disabled=''], [aria-disabled='false'])\n            )\n        )\n    ) {\n    cursor: pointer;\n  }\n\n  &:where([aria-expanded='true']) {\n    z-index: 2;\n\n    &:not(:focus:focus-visible, .ld-select__btn-trigger--detached) {\n      box-shadow: none;\n    }\n  }\n\n  &:disabled,\n  &:disabled + .ld-select__icon,\n  &:disabled + .ld-icon,\n  &:where(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ),\n  &:where(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    )\n    + .ld-select__icon,\n  &:where(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    )\n    + .ld-icon {\n    color: var(--ld-select-col-disabled);\n  }\n}\n\n.ld-select__btn-trigger {\n  overflow: hidden;\n}\n\n:where(.ld-select),\n:where(.ld-select) > select {\n  min-height: var(--ld-select-min-height);\n}\n\n.ld-select--ghost {\n  &:not(ld-select),\n  select,\n  .ld-select__btn-trigger {\n    background-color: transparent;\n  }\n\n  select,\n  .ld-select__btn-trigger {\n    &:not(:focus) {\n      box-shadow: none;\n    }\n  }\n}\n\n.ld-select:where(:not(.ld-select--ghost)) {\n  &:where(.ld-select--detached),\n  &:where(:not(.ld-select--detached, .ld-select--expanded)) {\n    :where(select),\n    :where(.ld-select__btn-trigger) {\n      box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-col-border);\n    }\n  }\n\n  &:where(:not(.ld-select--invalid)) {\n    select,\n    .ld-select__btn-trigger {\n      &:where(\n          .ld-select__btn-trigger--detached:not(\n              :disabled,\n              [aria-disabled]:where(\n                  :not([aria-disabled=''], [aria-disabled='false'])\n                )\n            )\n        ),\n      &:where(\n          :not(\n              :disabled,\n              [aria-disabled]:where(\n                  :not([aria-disabled=''], [aria-disabled='false'])\n                ),\n              .ld-select__btn-trigger--detached,\n              [aria-expanded='true']\n            )\n        ) {\n        @media (hover: hover) {\n          &:hover:not(:focus:focus-visible) {\n            box-shadow: inset 0 0 0 var(--ld-sp-2)\n              var(--ld-select-col-border-hover);\n          }\n        }\n      }\n    }\n  }\n}\n\n.ld-select--invalid > select,\n.ld-select--invalid .ld-select__btn-trigger--invalid {\n  &:where(:not(:disabled)) {\n    &:where(:focus:focus-visible) {\n      box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-invalid-col);\n    }\n  }\n\n  &:where(\n      :not(\n          :disabled,\n          [aria-disabled]:where(\n              :not([aria-disabled=''], [aria-disabled='false'])\n            )\n        )\n    ) {\n    &:where(:not(:focus:focus-visible)) {\n      background-color: var(--ld-select-invalid-disabled-bg-col);\n      color: var(--ld-select-invalid-col);\n    }\n\n    &:where(:not(.ld-select__btn-trigger--ghost)) {\n      box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-invalid-col);\n    }\n\n    + .ld-icon,\n    + .ld-select__icon,\n    .ld-select__icon {\n      color: var(--ld-select-invalid-col);\n    }\n\n    @media (hover: hover) {\n      &:hover {\n        box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-invalid-col);\n\n        + .ld-icon,\n        + .ld-select__icon,\n        .ld-select__icon,\n        ::slotted(ld-icon) {\n          color: var(--ld-select-invalid-icon-col-hover);\n        }\n      }\n    }\n    &:where(:focus:focus-visible) {\n      + .ld-icon,\n      + .ld-select__icon,\n      .ld-select__icon,\n      ::slotted(ld-icon) {\n        color: var(--ld-select-invalid-icon-col-focus);\n      }\n    }\n    &:where(:active),\n    &:where(:active:focus-visible) {\n      + .ld-icon,\n      + .ld-select__icon,\n      .ld-select__icon,\n      ::slotted(ld-icon) {\n        color: var(--ld-select-invalid-icon-col-active);\n      }\n    }\n  }\n}\n\n.ld-select__btn-trigger-text-wrapper,\n.ld-select__selection-list {\n  flex-grow: 1;\n}\n\n.ld-select__btn-trigger-text-wrapper {\n  font: var(--ld-typo-label-m);\n  line-height: var(--ld-select-trigger-line-height);\n  padding: var(--ld-sp-6) var(--ld-sp-8) var(--ld-sp-6) 0;\n  height: calc(100% + var(--ld-sp-12));\n  margin: calc(-1 * var(--ld-sp-6)) 0;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n}\n\n.ld-select > select,\n.ld-select__btn-trigger-text,\n.ld-select__selection-label-text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.ld-select__selection-list-container {\n  display: flex;\n  flex-direction: column-reverse;\n  gap: var(--ld-sp-6);\n  margin-right: auto;\n}\n\n.ld-select__selection-list {\n  display: flex;\n  flex-wrap: wrap;\n  margin: calc(-1 * var(--ld-sp-1)) var(--ld-sp-4) calc(-1 * var(--ld-sp-4)) 0;\n  overflow: hidden;\n  padding: 0;\n}\n\n.ld-select__selection-list-item {\n  flex: 0 1;\n  margin-right: var(--ld-sp-4);\n  margin-bottom: var(--ld-sp-4);\n  width: 100%;\n}\n\n.ld-select__selection-list-item--overflowing {\n  display: none;\n}\n\n.ld-select__selection-list-more {\n  order: 2147483647; /* Highest possible */\n  display: inline-flex;\n  align-items: center;\n  font: var(--ld-typo-label-s);\n  font-weight: 700;\n  padding: var(--ld-sp-4) var(--ld-sp-6);\n  border-radius: var(--ld-br-m);\n  margin-right: var(--ld-sp-4);\n  margin-bottom: var(--ld-sp-4);\n}\n\n.ld-select__btn-clear-single,\n.ld-select__btn-clear {\n  /* outline: none; */\n  border: 0;\n  padding: 0;\n  border-radius: var(--ld-br-full);\n  user-select: none;\n  touch-action: manipulation;\n  background-color: transparent;\n  line-height: 0;\n  -webkit-touch-callout: none;\n\n  &:not(:disabled) {\n    cursor: pointer;\n  }\n}\n\n.ld-select__btn-clear {\n  margin-right: var(--ld-sp-6);\n  flex-shrink: 0;\n\n  &:disabled {\n    color: var(--ld-select-col-disabled);\n  }\n}\n\n.ld-select__btn-clear-single {\n  z-index: 1;\n  margin-left: var(--ld-sp-6);\n}\n\n.ld-select__selection-label {\n  position: relative;\n  width: 100%;\n  display: inline-flex;\n  align-items: center;\n  color: var(--ld-select-selection-col);\n  font: var(--ld-typo-label-s);\n  font-weight: 700;\n  padding: var(--ld-sp-4) var(--ld-sp-6);\n}\n\n.ld-select__selection-label-bg {\n  position: absolute;\n  inset: 0;\n  border-radius: var(--ld-br-m);\n\n  :where(\n      .ld-select__btn-trigger[aria-disabled]:where(\n          :not([aria-disabled=''], [aria-disabled='false'])\n        )\n    )\n    & {\n    background-color: var(--ld-select-col-disabled);\n  }\n}\n\n.ld-select__selection-label-text {\n  z-index: 1;\n}\n\n.ld-select__btn-clear-single-icon {\n  --ld-select-btn-clear-single-size: 0.75rem;\n  width: var(--ld-select-btn-clear-single-size);\n  height: var(--ld-select-btn-clear-single-size);\n}\n\n.ld-select__btn-clear-icon {\n  --ld-select-btn-clear-size: 1.25rem;\n  width: var(--ld-select-btn-clear-size);\n  height: var(--ld-select-btn-clear-size);\n}\n\n.ld-select__icon {\n  fill: none;\n  width: var(--ld-sp-16);\n  height: var(--ld-sp-16);\n}\n\n.ld-select select + .ld-icon,\n.ld-select__icon,\n.ld-select ::slotted(ld-icon) {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  pointer-events: none;\n\n  :where(\n      select[aria-disabled]:where(\n          :not([aria-disabled=''], [aria-disabled='false'])\n        )\n    )\n    &,\n  :where(select:disabled) &,\n  :where(\n      .ld-select__btn-trigger[aria-disabled]:where(\n          :not([aria-disabled=''], [aria-disabled='false'])\n        )\n    )\n    & {\n    color: var(--ld-select-col-disabled);\n  }\n\n  .ld-icon,\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.ld-select__icon--rotated {\n  transform-origin: center;\n  transform: rotate(180deg);\n}\n\n.ld-select__slot-container {\n  display: none;\n}\n\n:where(\n    .ld-select:not(.ld-select--disabled, [aria-disabled], .ld-select--invalid)\n  ) {\n  .ld-select__btn-trigger {\n    &:where(:focus:focus-visible) {\n      box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-thm-col);\n    }\n  }\n\n  &.ld-select--ghost {\n    :where(select:not(:disabled)),\n    :where(.ld-select__btn-trigger) {\n      @media (hover: hover) {\n        &:hover:not(:focus) {\n          background-color: var(--ld-select-ghost-trigger-bg-col-hover);\n        }\n      }\n      &:active,\n      &:active:focus-visible {\n        background-color: var(--ld-select-ghost-trigger-bg-col-focus);\n      }\n    }\n  }\n\n  :where(select:not(:disabled)),\n  :where(.ld-select__btn-trigger) {\n    .ld-select__icon,\n    + .ld-icon,\n    + .ld-select__icon,\n    ::slotted(ld-icon) {\n      color: var(--ld-select-thm-col);\n    }\n\n    @media (hover: hover) {\n      &:where(:hover) {\n        .ld-select__icon,\n        + .ld-icon,\n        + .ld-select__icon,\n        ::slotted(ld-icon) {\n          color: var(--ld-select-thm-col-hover);\n        }\n      }\n    }\n    &:where(:focus:focus-visible) {\n      box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-thm-col);\n\n      .ld-select__icon,\n      + .ld-select__icon,\n      ::slotted(ld-icon) {\n        color: var(--ld-select-thm-col-focus);\n      }\n    }\n    &:where(:active),\n    &:where(:active:focus-visible) {\n      .ld-select__icon,\n      + .ld-icon,\n      + .ld-select__icon,\n      ::slotted(ld-icon) {\n        color: var(--ld-select-thm-col-active);\n      }\n    }\n  }\n}\n\n:where(.ld-select:not(.ld-select--disabled)):not(.ld-select--invalid) {\n  :where(select:not(:disabled)),\n  :where(.ld-select__btn-trigger) {\n    &:where(:focus:focus-visible) {\n      box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-select-thm-col);\n    }\n  }\n}\n\n:where(\n    .ld-select:not(\n        .ld-select--disabled,\n        [aria-disabled],\n        [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n      )\n  ) {\n  .ld-select__selection-list-more {\n    color: var(--ld-select-thm-col);\n  }\n  .ld-select__selection-label-bg {\n    background-color: var(--ld-select-thm-col);\n  }\n\n  .ld-select__btn-clear-single {\n    &:where(:focus:focus-visible) + .ld-select__selection-label-bg {\n      background-color: var(--ld-select-thm-col-focus);\n    }\n\n    &:where(:active),\n    &:where(:active:focus-visible) {\n      + .ld-select__selection-label-bg {\n        background-color: var(--ld-select-thm-col-active);\n      }\n    }\n  }\n\n  .ld-select__btn-clear {\n    color: var(--ld-select-thm-col);\n\n    &:where(:focus:focus-visible) {\n      color: var(--ld-select-thm-col-focus);\n    }\n    @media (hover: hover) {\n      &:where(:hover) {\n        color: var(--ld-select-thm-col-hover);\n      }\n    }\n    &:where(:active),\n    &:where(:active:focus-visible) {\n      color: var(--ld-select-thm-col-active);\n    }\n  }\n}\n","import { focusInnerOrFocus } from './focus'\n\nconst isPrintableCharacter = (key: string) =>\n  key.length === 1 && key.match(/\\S/)\n\nexport class TypeAheadHandler<T extends HTMLElement> {\n  private currentIndex: number\n  private typeAheadQuery = ''\n  private typeAheadTimeout: number\n  private _options: T[]\n\n  constructor(optionNodes: NodeListOf<T> | T[]) {\n    this.options = optionNodes\n  }\n\n  set options(optionNodes: NodeListOf<T> | T[]) {\n    this._options = Array.isArray(optionNodes)\n      ? optionNodes\n      : Array.from(optionNodes)\n  }\n\n  private getElementByQuery = () => {\n    if (!this.typeAheadQuery) return\n\n    const query = this.typeAheadQuery.toLowerCase()\n    const values = this._options.map((option) =>\n      option.textContent.trim().toLowerCase()\n    )\n    let index = values.findIndex(\n      (value, index) => index > this.currentIndex && value.indexOf(query) === 0\n    )\n\n    // only search again from index 0, if you previously started from an index > 0\n    if (index === -1 && this.currentIndex > -1) {\n      index = values.findIndex((value) => value.indexOf(query) === 0)\n    }\n\n    if (index > -1) {\n      return this._options[index]\n    }\n\n    // find the first value that is alphabetically following the query\n    const matchingLabel = [...values].sort().find((value) => query < value)\n\n    if (matchingLabel) {\n      return this._options[values.indexOf(matchingLabel)]\n    }\n  }\n\n  clearTimeout() {\n    window.clearTimeout(this.typeAheadTimeout)\n  }\n\n  /**\n   * Type a character: focus moves to the next item with a name that starts\n   * with the typed character. Type multiple characters in rapid succession:\n   * focus moves to the next item with a name that starts with the string of\n   * characters typed.\n   * @param key typed key\n   * @returns The focused element, if any\n   */\n  typeAhead = (key: string, currentElement?: T) => {\n    if (!isPrintableCharacter(key)) {\n      return\n    }\n\n    // set the current index only once while adding to a typeahead query\n    if (!this.typeAheadQuery) {\n      this.currentIndex = currentElement\n        ? this._options.indexOf(currentElement)\n        : -1\n    }\n\n    this.typeAheadQuery = this.typeAheadQuery + key\n\n    const focusableElement = this.getElementByQuery()\n\n    if (focusableElement) {\n      focusInnerOrFocus(focusableElement)\n    }\n\n    this.clearTimeout()\n    this.typeAheadTimeout = window.setTimeout(() => {\n      this.typeAheadQuery = ''\n    }, 500)\n\n    return focusableElement\n  }\n}\n"],"names":["isAriaDisabled","ariaDisabledValue","closest","selector","el","getRootNode","host","isLdOption","includes","tagName","isLdOptgroup","isLdOptionInternal","isLdOptgroupInternal","isLdOptInternalHidden","opt","hidden","filtered","LdSelect","isObserverEnabled","optionSelectListenerEnabled","isDisabled","this","disabled","ariaDisabled","updateTriggerMoreIndicator","refresh","arguments","length","undefined","_this","multiple","maxRows","hasMore","requestAnimationFrame","selectionListRef","selectionListItems","Array","from","querySelectorAll","_a","querySelector","remove","forEach","classList","isOverflowing","moreItem","document","createElement","add","prepend","maxOffset","overflowingTotal","overflowing","offsetTop","hideLastVisibleIfMoreIndicatorOverflowing","innerText","notOverflowing","lastNotOverflowing","slice","updatePopperWidth","listboxRef","style","setProperty","selectRef","getBoundingClientRect","width","updatePopperShadowHeight","updateShadowHeight","triggerRef","height","updatePopperTheme","themeEl","setTimeout","theme","toString","split","find","cl","startsWith","substring","updatePopper","popper","initPopper","position","customTetherOptions","tetherOptions","JSON","parse","Object","assign","classPrefix","element","target","attachment","targetAttachment","offset","mode","constraints","to","pin","Tether","initPopperObserver","getOptsRec","children","flatMap","child","getInternalOptionHTML","ldOption","optgroupDisabled","classStr","size","preventDeselection","selected","value","innerHTML","replaceAll","getInternalOptgroupHTML","ldOptgroup","label","map","join","initOptions","initialized","internalOptionsContainerRef","options","TypeError","selectedOptions","filter","internalOptionsHTML","html","text","typeAheadHandler","updateSelectedHiddenInputs","selectedValues","_ref","hiddenInput","index","indexOf","splice","appendHiddenInput","setAttribute","name","type","appendChild","handleSlotChange","mutationsList","some","record","oldValues","newValues","emitEventsAndUpdateHidden","handlePopperChange","contains","mutation","oldValue","toFocus","hasAttribute","shadowRoot","getFilterInput","focus","initSlotChangeObserver","slotChangeObserver","MutationObserver","observe","subtree","childList","attributes","popperObserver","attributeFilter","attributeOldValue","togglePopper","expanded","enable","disable","focusInner","clearSelection","option","handleHome","ev","preventDefault","handleEnd","visibleOptions","activeElement","selectAndFocus","shiftKey","dispatchEvent","KeyboardEvent","key","handleFilterChange","opts","query","detail","trim","toLowerCase","allFiltered","filterMatchesOpt","filteredOpts","optTextLower","textContent","Boolean","allOptsFiltered","handleFilterCreate","resetFilter","ldoptioncreate","emit","canCreate","creatable","focusPrev","current","previousElementSibling","lastInOptgroup","at","closestOptgroup","focusNext","firstInOptgroup","nextElementSibling","next","filterInput","handleFocusEvent","relatedTarget","stopImmediatePropagation","handleTriggerClick","handleClearClick","handleClearSingleClick","optionValue","selection","focusVisible","newSelection","oldSelection","stringify","renderHiddenInput","InputEvent","bubbles","composed","ldchange","ldinput","scrollHeight","clientHeight","updateHiddenInputs","hiddenInputs","outerForm","form","handleWindowResize","handleSelect","handleKeyDown","metaKey","filterHasFocus","btnClearRef","nextOpt","typeAhead","handleClickOutside","composedPath","isTrusted","handleTouchOutside","componentWillLoad","customIcon","hasCustomIcon","registerAutofocus","autofocus","componentDidLoad","TypeAheadHandler","componentDidUpdate","disconnectedCallback","disconnect","destroy","clearTimeout","render","detached","inline","ghost","invalid","triggerCl","triggerIconCl","triggerHtml","placeholder","triggerText","_b","h","Host","class","getClassNames","part","onBlur","onFocusout","zIndex","ref","role","tabindex","ldTabindex","onClick","maxHeight","order","title","sanitize","sanitizeConfig","call","fill","viewBox","stroke","d","_c","allOptionsFiltered","createButtonLabel","createInputLabel","filterMatchesOption","filterPlaceholder","onLdselectfilterchange","onLdselectfiltercreate","popperClass","ADD_ATTR","constructor","optionNodes","typeAheadQuery","getElementByQuery","values","_options","findIndex","currentIndex","matchingLabel","sort","currentElement","match","isPrintableCharacter","focusableElement","focusInnerOrFocus","typeAheadTimeout","window","isArray"],"sourceRoot":""}