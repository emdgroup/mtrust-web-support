{"version":3,"file":"static/js/306.605a654f.chunk.js","mappings":"yGAAA,SAASA,EAAQC,GACf,YAAiBC,IAAVD,GAAiC,OAAVA,GAA4B,UAAVA,CAClD,C,SAEgBE,IACd,MAAMC,EAAwB,IAAIC,IAAI,CACpC,QACA,KACA,QACA,OACA,UAN4BC,UAAAC,OAAA,QAAAL,IAAAI,UAAA,GAAAA,UAAA,GAA+B,KAWvDE,EAAoB,CAAC,EAC3B,IAAK,MAAMC,KAAQC,KAAKC,GAAGC,WAAY,CACrC,GAAIR,EAAsBS,IAAIJ,EAAKK,OAASd,EAAQS,EAAKR,OACvD,SAEF,MAAMc,EAA8B,KAAfN,EAAKR,OAAsBQ,EAAKR,MACrDO,EAAkBC,EAAKK,MAAQC,C,CAIjCL,KAAKM,iBAAmBR,EAGxB,MAiBMS,EAAW,IAAIC,kBAjBHC,IAEhB,IAAK,MAAMC,KAAYD,EAAe,CACpC,MAAM,cAAEE,GAAkBD,EAC1B,IAAKhB,EAAsBS,IAAIQ,GAAgB,CAC7C,MAAMC,EAAYZ,KAAKC,GAAGY,aAAaF,GACnCrB,EAAQsB,UACHZ,KAAKM,iBAAiBK,GAE7BX,KAAKM,iBAAiBK,GAAiBC,C,EAM7CZ,KAAKM,iBAAgBQ,OAAAC,OAAA,GAAQf,KAAKM,iBAAkB,IAStD,OANAC,EAASS,QAAQhB,KAAKC,GAAI,CACxBgB,SAAS,EACTC,WAAW,EACXhB,YAAY,IAGPK,CACT,C,0FCrDA,MCeMY,EAAU,IAAIC,IAAkB,CACpC,CAAC,SAAU,gBACX,CAAC,YAAa,SACd,CAAC,UAAW,mBAcDC,EAAU,M,oFAmDb,KAAAC,YAAeC,IACjBvB,KAAKwB,cACTxB,KAAKyB,eAAeC,KAAKH,EAAG,E,gGA/BR,U,iEAmBtB,gBAAMI,G,MACU,QAAdC,EAAA5B,KAAK6B,iBAAS,IAAAD,GAAAA,EAAED,Y,CAclBG,iBAAAA,GACE9B,KAAK+B,mBAAqBtC,EAAAA,EAAgBuC,KAAKhC,KAAM,CACnD,cACA,OACA,Q,CAIJiC,oBAAAA,GAEMjC,KAAK+B,oBAAoB/B,KAAK+B,mBAAmBG,Y,CAGvDC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,6CACHF,EAAAA,EAAAA,GAAA,MAAAE,IAAA,2CAAIC,MAAM,cAAcC,KAAK,WAAWC,KAAK,aAC3CL,EAAAA,EAAAA,GAAA,YAAAtB,OAAAC,OAAA,CAAAuB,IAAA,4CACMtC,KAAKM,iBAAgB,CACzBiC,MAAM,sBACNG,SAAU1C,KAAK0C,SACfC,KAAM3C,KAAK2C,KACXC,UAAU,EACVC,eAAe,QACfC,WAAY9C,KAAK8C,WACjBC,KAAM5B,EAAQ6B,IAAIhD,KAAK+C,MACvBE,QAASjD,KAAKsB,YACdkB,KAAK,mBACLU,IAAMC,GAAanD,KAAK6B,UAAYsB,EACpCC,KAAMpD,KAAKoD,KACXC,OAAQrD,KAAKqD,OACbC,KAAK,YAELlB,EAAAA,EAAAA,GAAA,QAAAE,IAAA,+C,wCDzHU,gF","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/cloneAttributes.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-context-menu/ld-menuitem/ld-menuitem.css?tag=ld-menuitem&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-context-menu/ld-menuitem/ld-menuitem.tsx"],"sourcesContent":["function isFalsy(value: string | null | undefined) {\n  return value === undefined || value === null || value === 'false'\n}\n\nexport function cloneAttributes(attributesToIgnore: string[] = []) {\n  const attributesToIgnoreSet = new Set([\n    'style',\n    'id',\n    'class',\n    'slot',\n    'part',\n    ...attributesToIgnore,\n  ])\n\n  // Get attributes not in props.\n  const attributesToClone = {}\n  for (const attr of this.el.attributes) {\n    if (attributesToIgnoreSet.has(attr.name) || isFalsy(attr.value)) {\n      continue\n    }\n    const valueToClone = attr.value === '' ? true : attr.value\n    attributesToClone[attr.name] = valueToClone\n  }\n\n  // Update cloned attributes state.\n  this.clonedAttributes = attributesToClone\n\n  // Set up attributes observer.\n  const callback = (mutationsList) => {\n    // Update cloned attributes state.\n    for (const mutation of mutationsList) {\n      const { attributeName } = mutation\n      if (!attributesToIgnoreSet.has(attributeName)) {\n        const attrValue = this.el.getAttribute(attributeName)\n        if (isFalsy(attrValue)) {\n          delete this.clonedAttributes[attributeName]\n        } else {\n          this.clonedAttributes[attributeName] = attrValue\n        }\n      }\n    }\n\n    // Trigger state update.\n    this.clonedAttributes = { ...this.clonedAttributes }\n  }\n  const observer = new MutationObserver(callback)\n  observer.observe(this.el, {\n    subtree: false,\n    childList: false,\n    attributes: true,\n  })\n\n  return observer\n}\n",":host {\n  display: block;\n}\n\n.ld-menuitem .ld-menuitem__button {\n  display: grid;\n  width: 100%;\n}\n","import {\n  Component,\n  Element,\n  Host,\n  h,\n  Prop,\n  State,\n  Method,\n  Event,\n  EventEmitter,\n} from '@stencil/core'\nimport { cloneAttributes } from '../../../utils/cloneAttributes'\n\ntype Mode = 'highlight' | 'danger' | 'neutral'\n\nconst modeMap = new Map<Mode, string>([\n  ['danger', 'danger-ghost'],\n  ['highlight', 'ghost'],\n  ['neutral', 'neutral-ghost'],\n])\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part listitem - `li` element wrapping the `ld-button` element\n * @part button - `ld-button` element wrapping the default slot\n */\n@Component({\n  tag: 'ld-menuitem',\n  styleUrl: 'ld-menuitem.css',\n  shadow: true,\n})\nexport class LdMenuitem implements InnerFocusable {\n  @Element() el: HTMLLdMenuitemElement\n  private attributesObserver: MutationObserver\n  private buttonRef?: HTMLLdButtonElement\n\n  /** Disabled state of the menu item. */\n  @Prop() disabled?: boolean\n\n  /**\n   * Transforms the menu item to an anchor element.\n   * See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href)\n   * for more information on the `href` attribute.\n   */\n  @Prop() href?: HTMLLdButtonElement['href']\n\n  /** Tab index of the menu item. */\n  @Prop() ldTabindex?: number\n\n  /** Prevent closing of the context menu on click. */\n  @Prop() preventClose?: boolean\n\n  /** Display mode. */\n  @Prop() mode?: Mode = 'neutral'\n\n  /**\n   * Size of the menu item.\n   * @internal\n   */\n  @Prop() size?: 'sm' | 'lg'\n\n  /**\n   * The `target` attributed can be used in conjunction with the `href` attribute.\n   * See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)\n   * for more information on the `target` attribute.\n   */\n  @Prop() target?: HTMLLdButtonElement['target']\n\n  @State() clonedAttributes: Record<string, string>\n\n  /** Sets focus on the anchor or button */\n  @Method()\n  async focusInner() {\n    this.buttonRef?.focusInner()\n  }\n\n  /**\n   * @internal\n   * Emitted on menu item click if preventClose prop is not truethy.\n   */\n  @Event() ldclosetooltip: EventEmitter\n\n  private handleClick = (ev: MouseEvent) => {\n    if (this.preventClose) return\n    this.ldclosetooltip.emit(ev)\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, [\n      'ld-tabindex',\n      'mode',\n      'size',\n    ])\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    return (\n      <Host>\n        <li class=\"ld-menuitem\" part=\"listitem\" role=\"menuitem\">\n          <ld-button\n            {...this.clonedAttributes}\n            class=\"ld-menuitem__button\"\n            disabled={this.disabled}\n            href={this.href}\n            iconOnly={false}\n            justifyContent=\"start\"\n            ldTabindex={this.ldTabindex}\n            mode={modeMap.get(this.mode)}\n            onClick={this.handleClick}\n            part=\"focusable button\"\n            ref={(element) => (this.buttonRef = element)}\n            size={this.size}\n            target={this.target}\n            type=\"button\"\n          >\n            <slot></slot>\n          </ld-button>\n        </li>\n      </Host>\n    )\n  }\n}\n"],"names":["isFalsy","value","undefined","cloneAttributes","attributesToIgnoreSet","Set","arguments","length","attributesToClone","attr","this","el","attributes","has","name","valueToClone","clonedAttributes","observer","MutationObserver","mutationsList","mutation","attributeName","attrValue","getAttribute","Object","assign","observe","subtree","childList","modeMap","Map","LdMenuitem","handleClick","ev","preventClose","ldclosetooltip","emit","focusInner","_a","buttonRef","componentWillLoad","attributesObserver","call","disconnectedCallback","disconnect","render","h","Host","key","class","part","role","disabled","href","iconOnly","justifyContent","ldTabindex","mode","get","onClick","ref","element","size","target","type"],"sourceRoot":""}