{"version":3,"file":"static/js/5205.47d26074.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/closest.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion.shadow.css?tag=ld-accordion&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/scroll.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion-panel/ld-accordion-panel.shadow.css?tag=ld-accordion-panel&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion-panel/ld-accordion-panel.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion-section/ld-accordion-section.shadow.css?tag=ld-accordion-section&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion-section/ld-accordion-section.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion-toggle/ld-accordion-toggle.shadow.css?tag=ld-accordion-toggle&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-accordion/ld-accordion-toggle/ld-accordion-toggle.tsx"],"sourcesContent":["// This helper function is similar to Element.closest(),\n// however it also traverses shadow DOM boundaries.\nexport const closest = (selector: string, el: Element | Document) => {\n  return (\n    el &&\n    (('closest' in el && el.closest(selector)) ||\n      closest(selector, (el.getRootNode() as unknown as ShadowRoot).host))\n  )\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host {\n  /* colors */\n  --ld-accordion-col: var(--ld-col-neutral-900);\n  --ld-accordion-col-disabled: var(--ld-col-neutral-100);\n  --ld-accordion-col-hover: var(--ld-col-neutral-900);\n  --ld-accordion-col-focus: var(--ld-col-neutral-900);\n  --ld-accordion-bg-col: var(--ld-col-wht);\n  --ld-accordion-bg-col-active: var(--ld-col-wht);\n  --ld-accordion-bg-col-disabled: var(--ld-col-neutral-100);\n  --ld-accordion-bg-col-focus: var(--ld-col-neutral-100);\n  --ld-accordion-bg-col-hover: var(--ld-col-neutral-050);\n  --ld-accordion-trigger-icon-col-disabled: var(--ld-col-neutral-100);\n\n  /* themable colors */\n  --ld-accordion-col-active: var(--ld-thm-primary);\n  --ld-accordion-col-selected: var(--ld-thm-primary);\n  --ld-accordion-toggle-col: inherit;\n  --ld-accordion-toggle-indicator-bg-col: transparent;\n  --ld-accordion-toggle-trigger-col: var(--ld-thm-primary);\n  --ld-accordion-trigger-icon-col: var(--ld-thm-primary);\n  --ld-accordion-trigger-icon-col-hover: var(--ld-thm-primary-hover);\n  --ld-accordion-trigger-icon-col-focus: var(--ld-thm-primary-focus);\n  --ld-accordion-trigger-icon-col-active: var(--ld-thm-primary-active);\n  --ld-accordion-toggle-expanded-col: var(--ld-thm-primary);\n\n  /* layout */\n  --ld-accordion-padding-y: 0.45rem;\n  --ld-accordion-padding-x: 1.25rem;\n  --ld-accordion-toggle-size: 2.5rem;\n  --ld-accordion-toggle-line-height: 180%;\n  --ld-accordion-border-radius-size: 0;\n  --ld-accordion-border-radius: var(--ld-accordion-border-radius-size);\n  --ld-accordion-gap: var(--ld-sp-2);\n  --ld-accordion-gap-col: var(--ld-accordion-panel-border-top-col);\n  --ld-accordion-panel-border-top-col: var(--ld-col-neutral-010);\n\n  &(:where(.ld-accordion)) {\n    color-scheme: var(--ld-accordion-color-scheme, none);\n    display: block;\n    flex-grow: 1;\n  }\n\n  &(.ld-accordion--rounded) {\n    --ld-accordion-border-radius-size: var(--ld-br-m);\n  }\n\n  &(.ld-accordion--dark) {\n    --ld-accordion-bg-col: var(--ld-col-neutral-010);\n    --ld-accordion-bg-col-active: var(--ld-col-neutral-010);\n    --ld-accordion-panel-border-top-col: var(--ld-col-neutral-050);\n  }\n\n  &(.ld-accordion--brand-color) {\n    --ld-accordion-bg-col-hover: var(--ld-thm-primary-alpha-lowest);\n    --ld-accordion-bg-col-focus: var(--ld-thm-primary-alpha-low);\n  }\n\n  &(.ld-accordion--detached) {\n    --ld-accordion-gap: var(--ld-sp-8);\n    --ld-accordion-gap-col: transparent;\n  }\n\n  &(.ld-accordion:not(.ld-accordion--detached)) {\n    ::slotted(ld-accordion-section) {\n      --ld-accordion-border-radius: 0;\n    }\n    ::slotted(ld-accordion-section:first-of-type) {\n      --ld-accordion-border-radius: var(--ld-accordion-border-radius-size)\n        var(--ld-accordion-border-radius-size) 0 0;\n    }\n    ::slotted(ld-accordion-section:last-of-type) {\n      --ld-accordion-border-radius: 0 0 var(--ld-accordion-border-radius-size)\n        var(--ld-accordion-border-radius-size);\n    }\n  }\n\n  ::slotted(ld-accordion-section:not(:first-of-type)) {\n    border-top: solid var(--ld-accordion-gap) var(--ld-accordion-gap-col);\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { getScrollParent } from '../../utils/scroll'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion',\n  styleUrl: 'ld-accordion.shadow.css',\n  shadow: true,\n})\nexport class LdAccordion {\n  @Element() el: HTMLElement\n\n  private scrollIntoViewOnTransitionEnd = false\n\n  // `onBrandColor` is not possible, as Stencil expects `on*` props to be events.\n  /** Style the accordion so that it looks good on the primary color of the current theme. */\n  @Prop() brandColor?: boolean\n\n  /** Sets a small gap between each accordion section. */\n  @Prop() detached? = false\n\n  /** Applies rounded corners. */\n  @Prop() rounded? = false\n\n  /** When set to true, an open accordion element closes, if anthorer one opens. */\n  @Prop() single? = false\n\n  /**\n   * Use `'dark'` on white backgrounds. Default is a light tone.\n   * Takes only effect in conjunction with neutral mode.\n   */\n  @Prop() tone?: 'dark'\n\n  // The following event is not used within the ld-accordion component itself.\n  // Its only purpose is to create a type definition on the ld-accordion component,\n  // in order to be able to add an inline listener in TSX, for listening\n  // on the event bubling up from ld-accordion-section components.\n  /** Emitted on expansion and collapse of an accordion section element. */\n  @Event() ldaccordionchange: EventEmitter<boolean>\n\n  @Listen('ldaccordionchange', { passive: true })\n  handleAccordionExpandChange(ev) {\n    if (ev.target.tagName !== 'LD-ACCORDION-SECTION') return\n\n    // In single mode, close sibling sections of open section.\n    if (this.single && ev.target.expanded) {\n      const siblings = [...ev.target.parentElement.children].filter(\n        (section) => section !== ev.target\n      )\n      siblings.forEach((section) => {\n        section.expanded = false\n      })\n    }\n\n    if (ev.detail /* expanded */) {\n      this.scrollIntoView(ev.target)\n    }\n  }\n\n  private scrollIntoView = (section: HTMLLdAccordionSectionElement) => {\n    const scrollParent = getScrollParent(section)\n\n    const toggle = section.querySelector('ld-accordion-toggle')\n    const panel = section.querySelector('ld-accordion-panel')\n\n    // singleModeDelta is the height of the currently open panel, that needs\n    // to be subtracted from the scroll amount in single mode.\n    const allSections = Array.from(section.parentElement.children)\n    const singleModeDelta =\n      this.single && !this.scrollIntoViewOnTransitionEnd\n        ? allSections\n            .slice(\n              0,\n              allSections.findIndex((sec) => sec === section)\n            )\n            .find((sec) =>\n              sec.classList.contains('ld-accordion-section--expanded')\n            )?.children[1].scrollHeight || 0\n        : 0\n\n    const panelOffsetToScrollParent =\n      scrollParent.scrollTop +\n      panel.getBoundingClientRect().top -\n      Math.max(0, scrollParent.getBoundingClientRect().top)\n\n    const scrollPaddingTop =\n      parseFloat(window.getComputedStyle(scrollParent)['scrollPaddingTop']) || 0\n\n    // targetOffsetBottom is the distance from the scrollParent top to the\n    // bottom of the section that is being expanded in its expanded state.\n    const targetOffsetBottom =\n      panelOffsetToScrollParent +\n      Math.min(\n        panel.scrollHeight,\n        scrollParent.clientHeight - toggle.clientHeight - scrollPaddingTop\n      ) -\n      singleModeDelta\n\n    // If an accordion section expands at the bottom end of the accordion\n    // The scroll container may not have a sufficient height at that time\n    // in order to be scrollable to the target offset. In this case we\n    // postpone the scrolling to the transition end event.\n    if (\n      !this.scrollIntoViewOnTransitionEnd &&\n      scrollParent.scrollHeight < targetOffsetBottom\n    ) {\n      this.scrollIntoViewOnTransitionEnd = true\n      return\n    }\n\n    if (\n      !this.el.closest('ld-accordion-panel') &&\n      scrollParent.clientHeight + scrollParent.scrollTop < targetOffsetBottom\n    ) {\n      const prefersReducedMotion = window.matchMedia(\n        '(prefers-reduced-motion: reduce)'\n      ).matches\n\n      scrollParent.scrollTo({\n        top: targetOffsetBottom - scrollParent.clientHeight,\n        behavior: prefersReducedMotion ? 'auto' : 'smooth',\n      })\n    }\n  }\n\n  private focusToggle = (\n    currentToggle: HTMLLdAccordionToggleElement,\n    dir: 'prev' | 'next'\n  ) => {\n    const toggleToFocus = (\n      dir === 'prev'\n        ? currentToggle.parentElement.previousElementSibling\n        : currentToggle.parentElement.nextElementSibling\n    )?.querySelector('ld-accordion-toggle')\n    if (toggleToFocus) {\n      toggleToFocus.focusInner()\n    }\n  }\n\n  private onKeydown = (ev) => {\n    if (ev.target.tagName !== 'LD-ACCORDION-TOGGLE') {\n      return\n    }\n\n    switch (ev.key) {\n      case 'ArrowUp': {\n        ev.preventDefault()\n        this.focusToggle(ev.target, 'prev')\n        return\n      }\n      case 'ArrowDown': {\n        ev.preventDefault()\n        this.focusToggle(ev.target, 'next')\n        return\n      }\n    }\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    const target = ev.target as HTMLElement\n    if (\n      !this.scrollIntoViewOnTransitionEnd ||\n      target.tagName !== 'LD-ACCORDION-PANEL' ||\n      target.closest('ld-accordion') !== this.el ||\n      !target.closest('ld-accordion-section').expanded\n    ) {\n      return\n    }\n\n    this.scrollIntoView(target.closest('ld-accordion-section'))\n    this.scrollIntoViewOnTransitionEnd = false\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion',\n      this.detached && 'ld-accordion--detached',\n      this.brandColor && 'ld-accordion--brand-color',\n      !this.brandColor && this.tone && `ld-accordion--${this.tone}`,\n      this.rounded && 'ld-accordion--rounded',\n    ])\n\n    return (\n      <Host\n        class={cl}\n        onKeydown={this.onKeydown}\n        onTransitionEnd={this.onTransitionEnd}\n      >\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n","/**\n * Returns the scroll parent (the first scrollable ancestor of a given element).\n * This is a vanilla JS port of the jQuery UI scrollParent method:\n * https://github.com/jquery/jquery-ui/blob/main/ui/scroll-parent.js\n */\nexport function getScrollParent(element: HTMLElement, includeHidden?: boolean) {\n  let style = getComputedStyle(element)\n  if (style.position === 'fixed') {\n    return document.scrollingElement\n  }\n\n  const excludeStaticParent = style.position === 'absolute'\n  const overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/\n\n  // Using for loop instead of recursion in order to save memory.\n  for (let parent = element; (parent = parent.parentElement); ) {\n    style = getComputedStyle(parent)\n    if (excludeStaticParent && style.position === 'static') {\n      continue\n    }\n    if (\n      overflowRegex.test(style.overflow + style.overflowY + style.overflowX)\n    ) {\n      return parent\n    }\n  }\n\n  return document.scrollingElement\n}\n",":host{--ld-accordion-panel-transition-duration:var(\n    --ld-transition-duration-instant\n  );background-color:var(--ld-accordion-bg-col);border-radius:var(--ld-accordion-border-radius);border-top-left-radius:inherit;border-top-right-radius:inherit;box-sizing:border-box;display:block;max-height:var(--ld-accordion-panel-max-height,auto);overflow:hidden;position:relative;will-change:max-height}:host(.ld-accordion-panel--initialized){transition:max-height var(--ld-accordion-panel-transition-duration) ease}@media (prefers-reduced-motion:no-preference){:host(.ld-accordion-panel--initialized){--ld-accordion-panel-transition-duration:var(\n        --ld-transition-duration-normal\n      )}}:host(.ld-accordion-panel--expanded):before{background-color:var(--ld-accordion-panel-border-top-col);content:\"\";height:var(--ld-sp-2);left:0;position:absolute;right:0;top:0}:host(.ld-accordion-panel--expanded) .ld-accordion-panel__content{opacity:1;transition:opacity var(--ld-accordion-panel-transition-duration) linear;visibility:inherit}.ld-accordion-panel__content{opacity:0;transition:opacity var(--ld-accordion-panel-transition-duration) linear,visibility 0s var(--ld-accordion-panel-transition-duration) linear;visibility:hidden}","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  State,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion-panel',\n  styleUrl: 'ld-accordion-panel.shadow.css',\n  shadow: true,\n})\nexport class LdAccordionPanel {\n  @Element() el: HTMLElement\n\n  // Container to be observed for size changes.\n  // Note that we can not observe size changes on the element itself,\n  // As with the max-height prop applied to it changes to the content\n  // will not trigger a resize event. Hence, we use a container element.\n  private contentRef: HTMLDivElement\n\n  @State() expanded: boolean\n  @State() initialized = false\n  @State() transitionEnabled = false\n  @State() maxHeight: number\n  @State() resizeObserver: ResizeObserver\n  @State() innerPanelExpanding = false\n\n  /**\n   * @internal\n   * Emitted on accordion panel max-height change.\n   */\n  @Event() ldaccordionmaxheightchange: EventEmitter<number>\n\n  /**\n   * @internal\n   * Updates expanded state.\n   */\n  @Method()\n  async setExpanded(expanded: boolean) {\n    this.expanded = expanded\n\n    this.applyMaxHeight()\n  }\n\n  private applyMaxHeight = (additionalHeightFromInnerPanel = 0) => {\n    if (additionalHeightFromInnerPanel) {\n      this.innerPanelExpanding = true\n    }\n\n    // Apply max-height on outer panel inside nested accordion.\n    if (this.expanded) {\n      this.ldaccordionmaxheightchange.emit(this.el.scrollHeight)\n    }\n\n    this.maxHeight = this.expanded\n      ? this.el.scrollHeight + additionalHeightFromInnerPanel\n      : 0\n  }\n\n  private handleInnerMaxHeightChange = (ev: CustomEvent) => {\n    if (ev.target === this.el) return\n\n    ev.stopImmediatePropagation()\n    this.applyMaxHeight(ev.detail)\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    if (ev.target === this.el) {\n      this.innerPanelExpanding = false\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.resizeObserver = new ResizeObserver(() => {\n        // When a panel is expanding inside a nested accordion, the nested panel\n        // takes over the responsibility for updating the max-height on the outer\n        // panel. In other words: We disable the observer callback function in\n        // order to instantly update the max-height for a better performance.\n        if (!this.innerPanelExpanding) {\n          this.applyMaxHeight()\n        }\n      })\n      this.resizeObserver.observe(this.contentRef)\n      this.initialized = true\n    })\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.resizeObserver) this.resizeObserver.unobserve(this.contentRef)\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion-panel',\n      this.expanded && 'ld-accordion-panel--expanded',\n      this.initialized && 'ld-accordion-panel--initialized',\n    ])\n\n    return (\n      <Host\n        style={{ '--ld-accordion-panel-max-height': this.maxHeight + 'px' }}\n        class={cl}\n        onTransitionEnd={this.onTransitionEnd}\n        onLdaccordionmaxheightchange={this.handleInnerMaxHeightChange}\n      >\n        <div\n          part=\"content\"\n          ref={(ref) => (this.contentRef = ref)}\n          class=\"ld-accordion-panel__content\"\n        >\n          <slot></slot>\n        </div>\n      </Host>\n    )\n  }\n}\n",":host{display:block}","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { closest } from '../../../utils/closest'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion-section',\n  styleUrl: 'ld-accordion-section.shadow.css',\n  shadow: true,\n})\nexport class LdAccordionSection {\n  @Element() el: HTMLElement\n\n  /** Indicates that the accordion section is expanded. */\n  @Prop({ mutable: true }) expanded?: boolean\n\n  @State() initialized = false\n\n  /** Emitted on expansion and collapse. */\n  @Event() ldaccordionchange: EventEmitter<boolean>\n\n  @Watch('expanded')\n  updateExpandedState(newExpanded: boolean) {\n    Array.from(this.el.children).forEach(\n      (child: HTMLLdAccordionPanelElement | HTMLLdAccordionToggleElement) => {\n        if (typeof child.setExpanded === 'function') {\n          child.setExpanded(newExpanded)\n        }\n      }\n    )\n\n    if (this.initialized) {\n      this.ldaccordionchange.emit(newExpanded)\n    }\n  }\n\n  private handleToggleClick(ev) {\n    // closest utility function must be used here for the component\n    // to work in Solid.js app, where ev.target can be an element\n    // within the shadow DOM of the component.\n    // Usage of ev.composedPath() is required for penetrating shadow DOM.\n    const target = 'composedPath' in ev ? ev.composedPath().at(0) : ev.target\n    if (closest('ld-accordion-section', target) !== this.el) {\n      return\n    }\n    this.expanded = !this.expanded\n  }\n\n  componentWillLoad() {\n    this.updateExpandedState(this.expanded)\n    this.initialized = true\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion-section',\n      this.expanded && 'ld-accordion-section--expanded',\n    ])\n\n    return (\n      <Host\n        class={cl}\n        onLdaccordiontoggleclick={this.handleToggleClick.bind(this)}\n      >\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n",":host{border-radius:var(--ld-accordion-border-radius);display:block;position:relative;z-index:1}.ld-accordion-toggle__button,.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{border:0;box-sizing:border-box;margin:0;text-align:left;touch-action:manipulation;-webkit-user-select:none;user-select:none;width:100%;-webkit-touch-callout:none}.ld-accordion-toggle__button{align-items:center;background-color:var(--ld-accordion-bg-col);border-radius:inherit;color:var(--ld-accordion-col);direction:var(--ld-accordion-grid-dir);display:grid;font:var(--ld-typo-body-m);grid-template-columns:1fr var(--ld-accordion-toggle-size);padding:0;position:relative}.ld-accordion-toggle__button[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:before{background-color:var(--ld-accordion-toggle-indicator-bg-col);border-radius:var(--ld-accordion-border-radius);content:\"\";inset:0;position:absolute}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]:not([aria-disabled=\"\"]:not([aria-disabled=false]))):where(:focus:focus-visible){--ld-accordion-toggle-indicator-bg-col:var(\n          --ld-accordion-bg-col-focus\n        )}@media (hover:hover){:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]:not([aria-disabled=\"\"]:not([aria-disabled=false]))):where(:hover){--ld-accordion-toggle-indicator-bg-col:var(\n            --ld-accordion-bg-col-hover\n          )}}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]:not([aria-disabled=\"\"]:not([aria-disabled=false]))):where(:active),:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:not([aria-disabled]:not([aria-disabled=\"\"]:not([aria-disabled=false]))):where(:active:focus-visible){--ld-accordion-toggle-indicator-bg-col:var(\n          --ld-accordion-bg-col-active\n        )}:host(.ld-accordion-toggle--expanded:not(.ld-accordion-toggle--split)) .ld-accordion-toggle__button:before{border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:focus:focus-visible){--ld-accordion-toggle-col:var(--ld-accordion-col-focus)}@media (hover:hover){:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:hover){--ld-accordion-toggle-col:var(--ld-accordion-col-hover)}}:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:active),:host(.ld-accordion-toggle:not(.ld-accordion-toggle--split):not(.ld-accordion-toggle--expanded)) .ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:active:focus-visible){--ld-accordion-toggle-col:var(--ld-accordion-col-active)}.ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))) .ld-accordion-toggle__trigger{color:var(--ld-accordion-trigger-icon-col)}.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{background-color:initial;font:inherit}button.ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))),button.ld-accordion-toggle__label:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))),button.ld-accordion-toggle__trigger:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))){cursor:pointer}.ld-accordion-toggle__label{border-radius:var(--ld-accordion-border-radius);border-bottom-right-radius:0;border-top-right-radius:0;padding:var(--ld-accordion-padding-y) var(--ld-accordion-padding-x);position:relative}.ld-accordion-toggle__trigger{border-radius:var(--ld-accordion-border-radius);border-bottom-left-radius:0;border-top-left-radius:0;display:grid;height:var(--ld-accordion-toggle-size);overflow:hidden;place-items:center;position:relative;width:var(--ld-accordion-toggle-size)}.ld-accordion-toggle__label-content,.ld-accordion-toggle__trigger-content{display:grid;position:relative;transform:translateX(calc(-1 * var(--ld-sp-1)))}.ld-accordion-toggle__label:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))) .ld-accordion-toggle__label-content{color:var(--ld-accordion-toggle-col)}:host(.ld-accordion-toggle--expanded){--ld-accordion-toggle-col:var(--ld-accordion-toggle-expanded-col);border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle--expanded) .ld-accordion-toggle__trigger-icon{transform:scaleY(-1)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{border-radius:var(--ld-br-s);content:\"\";inset:var(--ld-sp-4);left:var(--ld-sp-2);position:absolute}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label[aria-disabled],:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before{background-color:var(--ld-accordion-toggle-label-indicator-bg-col);transform:translateX(calc(var(--ld-sp-2)))}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{background-color:var(--ld-accordion-toggle-trigger-indicator-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))){background-color:var(--ld-accordion-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:focus:focus-visible){--ld-accordion-toggle-label-indicator-bg-col:var(\n        --ld-accordion-bg-col-focus\n      )}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:hover){--ld-accordion-toggle-label-indicator-bg-col:var(\n          --ld-accordion-bg-col-hover\n        )}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:active:focus-visible){--ld-accordion-toggle-label-indicator-bg-col:var(\n        --ld-accordion-bg-col-active\n      )}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:focus:focus-visible){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-focus);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n        --ld-accordion-bg-col-focus\n      )}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:hover){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-hover);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n          --ld-accordion-bg-col-hover\n        )}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:not([aria-disabled]:where(:not([aria-disabled=\"\"]):not([aria-disabled=false]))):where(:active:focus-visible){--ld-accordion-toggle-trigger-col:var(--ld-accordion-col-active);--ld-accordion-toggle-trigger-indicator-bg-col:var(\n        --ld-accordion-bg-col-active\n      )}.ld-accordion-toggle__content{display:contents}","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-accordion-toggle',\n  styleUrl: 'ld-accordion-toggle.shadow.css',\n  shadow: true,\n})\nexport class LdAccordionToggle implements InnerFocusable {\n  @Element() el: HTMLElement\n\n  private btnRef: HTMLButtonElement\n\n  /** Disables the toggle. */\n  @Prop() disabled?: boolean\n\n  /**\n   * Tag to be used for the toggle label in split mode.\n   * This prop is especially usefull, if you want to place\n   * your own focusable element inside the toggle label element.\n   */\n  @Prop() labelTag?: 'button' | 'div' = 'button'\n\n  /** Tab index of the toggle. */\n  @Prop() ldTabindex?: number\n\n  /**\n   * Split the toggle in two parts with the second part containing\n   * the caret icon and being responsible for expanding / collapsing\n   * the accordion panel.\n   */\n  @Prop() split?: boolean\n\n  /** Used as aria-label value on the toggle trigger element. */\n  @Prop() toggleLabel? = 'Toggle'\n\n  @State() expanded: boolean\n  @State() hasCustomIcon = false\n\n  /** Focuses the toggle */\n  @Method()\n  async focusInner() {\n    this.btnRef.focus({ preventScroll: true })\n  }\n\n  /**\n   * @internal\n   * Updates expanded state.\n   */\n  @Method()\n  async setExpanded(expanded: boolean) {\n    this.expanded = expanded\n  }\n\n  /** Emitted on click of the accordion toggle trigger. */\n  @Event() ldaccordiontoggleclick: EventEmitter<undefined>\n\n  /** Emitted on click of the accordion toggle label. */\n  @Event() ldaccordionlabelclick: EventEmitter<undefined>\n\n  private handleToggleClick = (ev: MouseEvent) => {\n    ev.preventDefault()\n\n    if (this.disabled) return\n\n    this.ldaccordiontoggleclick.emit()\n  }\n\n  private handleLabelClick = (ev: MouseEvent) => {\n    ev.preventDefault()\n\n    if (this.disabled) return\n\n    this.ldaccordionlabelclick.emit()\n  }\n\n  componentWillLoad() {\n    this.hasCustomIcon = !!this.el.querySelector('[slot=\"icon\"]')\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-accordion-toggle',\n      this.expanded && 'ld-accordion-toggle--expanded',\n      this.split && 'ld-accordion-toggle--split',\n    ])\n\n    const toggleTriggerContent = (\n      <div class=\"ld-accordion-toggle__trigger-content\" part=\"trigger-content\">\n        <slot name=\"icon\"></slot>\n        {!this.hasCustomIcon && (\n          <ld-icon\n            name=\"arrow-down\"\n            size=\"sm\"\n            part=\"trigger-icon\"\n            aria-hidden=\"true\"\n            class=\"ld-accordion-toggle__trigger-icon\"\n          />\n        )}\n      </div>\n    )\n\n    const toggleTrigger = this.split ? (\n      <button\n        part=\"trigger focusable\"\n        class=\"ld-accordion-toggle__trigger\"\n        aria-disabled={this.disabled ? 'true' : undefined}\n        aria-expanded={this.expanded ? 'true' : 'false'}\n        aria-label={this.toggleLabel}\n        onClick={this.handleToggleClick}\n        ref={(el) => (this.btnRef = el as HTMLButtonElement)}\n      >\n        {toggleTriggerContent}\n      </button>\n    ) : (\n      <div part=\"trigger\" class=\"ld-accordion-toggle__trigger\">\n        {toggleTriggerContent}\n      </div>\n    )\n\n    const ToggleLabelTag = this.labelTag\n    const toggleLabel = this.split ? (\n      <ToggleLabelTag\n        part={`label${this.labelTag === 'button' ? ' focusable' : ''}`}\n        aria-disabled={this.disabled ? 'true' : undefined}\n        class=\"ld-accordion-toggle__label\"\n        onClick={this.handleLabelClick}\n      >\n        <div class=\"ld-accordion-toggle__label-content\" part=\"label-content\">\n          <slot />\n        </div>\n      </ToggleLabelTag>\n    ) : (\n      <div part=\"label\" class=\"ld-accordion-toggle__label\">\n        <div class=\"ld-accordion-toggle__label-content\" part=\"label-content\">\n          <slot />\n        </div>\n      </div>\n    )\n\n    const toggleContent = (\n      <div part=\"content\" class=\"ld-accordion-toggle__content\">\n        {toggleLabel}\n        {toggleTrigger}\n      </div>\n    )\n\n    const toggle = this.split ? (\n      <div part=\"toggle\" class=\"ld-accordion-toggle__button\">\n        {toggleContent}\n      </div>\n    ) : (\n      <button\n        aria-disabled={this.disabled ? 'true' : undefined}\n        aria-expanded={this.expanded ? 'true' : 'false'}\n        class=\"ld-accordion-toggle__button\"\n        onClick={this.handleToggleClick}\n        part=\"toggle focusable\"\n        ref={(el) => (this.btnRef = el as HTMLButtonElement)}\n        tabindex={this.ldTabindex}\n      >\n        {toggleContent}\n      </button>\n    )\n\n    return <Host class={cl}>{toggle}</Host>\n  }\n}\n"],"names":["closest","selector","el","getRootNode","host","getClassNames","classNames","filter","className","join","LdAccordion","scrollIntoViewOnTransitionEnd","scrollIntoView","section","scrollParent","element","includeHidden","style","getComputedStyle","position","document","scrollingElement","excludeStaticParent","overflowRegex","parent","parentElement","test","overflow","overflowY","overflowX","getScrollParent","toggle","querySelector","panel","allSections","Array","from","children","singleModeDelta","this","single","_a","slice","findIndex","sec","find","classList","contains","scrollHeight","panelOffsetToScrollParent","scrollTop","getBoundingClientRect","top","Math","max","scrollPaddingTop","parseFloat","window","targetOffsetBottom","min","clientHeight","prefersReducedMotion","matchMedia","matches","scrollTo","behavior","focusToggle","currentToggle","dir","toggleToFocus","previousElementSibling","nextElementSibling","focusInner","onKeydown","ev","target","tagName","key","preventDefault","onTransitionEnd","expanded","handleAccordionExpandChange","forEach","detail","render","cl","detached","brandColor","tone","rounded","h","Host","class","LdAccordionPanel","applyMaxHeight","additionalHeightFromInnerPanel","arguments","length","undefined","_this","innerPanelExpanding","ldaccordionmaxheightchange","emit","maxHeight","handleInnerMaxHeightChange","stopImmediatePropagation","setExpanded","componentDidLoad","setTimeout","resizeObserver","ResizeObserver","observe","contentRef","initialized","disconnectedCallback","unobserve","onLdaccordionmaxheightchange","part","ref","LdAccordionSection","updateExpandedState","newExpanded","child","ldaccordionchange","handleToggleClick","composedPath","at","componentWillLoad","onLdaccordiontoggleclick","bind","LdAccordionToggle","disabled","ldaccordiontoggleclick","handleLabelClick","ldaccordionlabelclick","btnRef","focus","preventScroll","hasCustomIcon","split","toggleTriggerContent","name","size","toggleTrigger","toggleLabel","onClick","ToggleLabelTag","labelTag","toggleContent","tabindex","ldTabindex"],"sourceRoot":""}