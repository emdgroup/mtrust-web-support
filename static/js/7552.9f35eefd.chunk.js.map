{"version":3,"file":"static/js/7552.9f35eefd.chunk.js","mappings":"0GAAA,SAASA,EAAQC,GACf,YAAiBC,IAAVD,GAAiC,OAAVA,GAA4B,UAAVA,CAClD,C,SAEgBE,IACd,MAAMC,EAAwB,IAAIC,IAAI,CACpC,QACA,KACA,QACA,OACA,UAN4BC,UAAAC,OAAA,QAAAL,IAAAI,UAAA,GAAAA,UAAA,GAA+B,KAWvDE,EAAoB,CAAC,EAC3B,IAAK,MAAMC,KAAQC,KAAKC,GAAGC,WAAY,CACrC,GAAIR,EAAsBS,IAAIJ,EAAKK,OAASd,EAAQS,EAAKR,OACvD,SAEF,MAAMc,EAA8B,KAAfN,EAAKR,OAAsBQ,EAAKR,MACrDO,EAAkBC,EAAKK,MAAQC,C,CAIjCL,KAAKM,iBAAmBR,EAGxB,MAiBMS,EAAW,IAAIC,kBAjBHC,IAEhB,IAAK,MAAMC,KAAYD,EAAe,CACpC,MAAM,cAAEE,GAAkBD,EAC1B,IAAKhB,EAAsBS,IAAIQ,GAAgB,CAC7C,MAAMC,EAAYZ,KAAKC,GAAGY,aAAaF,GACnCrB,EAAQsB,UACHZ,KAAKM,iBAAiBK,GAE7BX,KAAKM,iBAAiBK,GAAiBC,C,EAM7CZ,KAAKM,iBAAgBQ,OAAAC,OAAA,GAAQf,KAAKM,iBAAkB,IAStD,OANAC,EAASS,QAAQhB,KAAKC,GAAI,CACxBgB,SAAS,EACTC,WAAW,EACXhB,YAAY,IAGPK,CACT,C,uFCrDA,MCaaY,EAAM,M,+BA8ET,KAAAC,cAAgB,K,MACtB,OA0BgB,QA1BhBC,EAAC,CACC,QAAS,OACT,QAAS,OACT,UAAW,OACX,UAAW,OACXC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,KACLC,IAAK,MACJ1C,KAAK2C,gBAAQ,IAAAtB,EAAAA,EAAI,GAAG,E,6BAhEb,S,mDAcJuB,cAAAA,GACc,CAClB,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,OACAC,SAAS7C,KAAK2C,UAGd3C,KAAK8C,KAAKC,aACR,aACA/C,KAAKgD,WAAahD,KAAKC,GAAGgD,UAAUC,O,CAkC1CC,iBAAAA,GACEnD,KAAKoD,mBAAqB3D,EAAAA,EAAgB4D,KAAKrD,KAAM,CAAC,MAAO,W,CAG/DsD,kBAAAA,GACEtD,KAAK4C,gB,CAGPW,oBAAAA,GAEMvD,KAAKoD,oBAAoBpD,KAAKoD,mBAAmBI,Y,CAGvDC,MAAAA,GACE,MAAMC,EAAO1D,KAAK2D,KAAO3D,KAAKoB,gBAE9B,OACEwC,EAAAA,EAAAA,GAACF,EAAI5C,OAAAC,OAAA,CAAA8C,IAAA,4CACC7D,KAAKM,iBAAgB,CACzBwD,MAAO,oBAAoB9D,KAAK2C,UAChCoB,KAAK,MACLC,IAAMA,GAAsBhE,KAAK8C,KAAOkB,KAExCJ,EAAAA,EAAAA,GAAA,QAAAC,IAAA,6C,wCD/IU,s/D","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/cloneAttributes.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-typo/ld-typo.css?tag=ld-typo&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-typo/ld-typo.tsx"],"sourcesContent":["function isFalsy(value: string | null | undefined) {\n  return value === undefined || value === null || value === 'false'\n}\n\nexport function cloneAttributes(attributesToIgnore: string[] = []) {\n  const attributesToIgnoreSet = new Set([\n    'style',\n    'id',\n    'class',\n    'slot',\n    'part',\n    ...attributesToIgnore,\n  ])\n\n  // Get attributes not in props.\n  const attributesToClone = {}\n  for (const attr of this.el.attributes) {\n    if (attributesToIgnoreSet.has(attr.name) || isFalsy(attr.value)) {\n      continue\n    }\n    const valueToClone = attr.value === '' ? true : attr.value\n    attributesToClone[attr.name] = valueToClone\n  }\n\n  // Update cloned attributes state.\n  this.clonedAttributes = attributesToClone\n\n  // Set up attributes observer.\n  const callback = (mutationsList) => {\n    // Update cloned attributes state.\n    for (const mutation of mutationsList) {\n      const { attributeName } = mutation\n      if (!attributesToIgnoreSet.has(attributeName)) {\n        const attrValue = this.el.getAttribute(attributeName)\n        if (isFalsy(attrValue)) {\n          delete this.clonedAttributes[attributeName]\n        } else {\n          this.clonedAttributes[attributeName] = attrValue\n        }\n      }\n    }\n\n    // Trigger state update.\n    this.clonedAttributes = { ...this.clonedAttributes }\n  }\n  const observer = new MutationObserver(callback)\n  observer.observe(this.el, {\n    subtree: false,\n    childList: false,\n    attributes: true,\n  })\n\n  return observer\n}\n",":host {\n  display: block;\n  line-height: 0;\n\n  &([variant^='xb']),\n  &([variant='b1']),\n  &([variant='b2']),\n  &([variant='b3']),\n  &([variant='b4']),\n  &([variant='b5']),\n  &([variant='b6']) {\n    color: var(--ld-typo-text-brand-color);\n  }\n\n  /* Reset within the shadow DOM */\n  .ld-typo {\n    color: inherit;\n    margin: 0;\n  }\n}\n\n:host,\n.ld-typo {\n  --ld-typo-text-brand-color: var(--ld-thm-primary);\n}\n\n/* Reset for CSS component */\n:where(.ld-typo) {\n  margin: 0;\n}\n\n.ld-typo,\n.ld-typo--body-m {\n  font: var(--ld-typo-body-m);\n}\n.ld-typo--body-l {\n  font: var(--ld-typo-body-l);\n}\n.ld-typo--body-s {\n  font: var(--ld-typo-body-s);\n}\n.ld-typo--body-xl {\n  font: var(--ld-typo-body-xl);\n}\n.ld-typo--body-xs {\n  font: var(--ld-typo-body-xs);\n}\n\n.ld-typo--cap-l {\n  font: var(--ld-typo-cap-l);\n  letter-spacing: 0.15em;\n  text-transform: uppercase;\n}\n.ld-typo--cap-m {\n  font: var(--ld-typo-cap-m);\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n}\n\n.ld-typo--label-m {\n  font: var(--ld-typo-label-m);\n}\n.ld-typo--label-s {\n  font: var(--ld-typo-label-s);\n}\n\n.ld-typo--h1 {\n  font: var(--ld-typo-h1);\n}\n.ld-typo--h2 {\n  font: var(--ld-typo-h2);\n}\n.ld-typo--h3 {\n  font: var(--ld-typo-h3);\n}\n.ld-typo--h4 {\n  font: var(--ld-typo-h4);\n}\n.ld-typo--h5 {\n  font: var(--ld-typo-h5);\n}\n.ld-typo--h6 {\n  font: var(--ld-typo-h6);\n}\n\n.ld-typo--b1 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b1);\n  text-transform: uppercase;\n}\n.ld-typo--b2 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b2);\n  text-transform: uppercase;\n}\n.ld-typo--b3 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b3);\n  text-transform: uppercase;\n}\n.ld-typo--b4 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b4);\n  text-transform: uppercase;\n}\n.ld-typo--b5 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b5);\n  text-transform: uppercase;\n}\n.ld-typo--b6 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-b6);\n  text-transform: uppercase;\n}\n\n.ld-typo--xb1 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-xb1);\n  text-transform: uppercase;\n}\n.ld-typo--xb2 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-xb2);\n  text-transform: uppercase;\n}\n.ld-typo--xb3 {\n  color: var(--ld-typo-text-brand-color);\n  font: var(--ld-typo-xb3);\n  text-transform: uppercase;\n}\n\n.ld-typo--xh1 {\n  font: var(--ld-typo-xh1);\n}\n.ld-typo--xh2 {\n  font: var(--ld-typo-xh2);\n}\n.ld-typo--xh3 {\n  font: var(--ld-typo-xh3);\n}\n.ld-typo--xh4 {\n  font: var(--ld-typo-xh4);\n}\n.ld-typo--xh5 {\n  font: var(--ld-typo-xh5);\n}\n.ld-typo--xh6 {\n  font: var(--ld-typo-xh6);\n}\n","import { Component, Element, h, Prop, State } from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part tag - Actual tag\n */\n@Component({\n  tag: 'ld-typo',\n  styleUrl: 'ld-typo.css',\n  shadow: true,\n})\nexport class LdTypo implements ClonesAttributes {\n  @Element() el: HTMLElement\n\n  private attributesObserver: MutationObserver\n\n  private root: HTMLElement\n\n  /** The rendered HTML tag. Overrides tag inferred from the variant. */\n  @Prop() tag?: string\n\n  /** The font style. Every variant has a default tag that it renders with. */\n  @Prop({ mutable: true }) variant?:\n    | 'body-xs'\n    | 'body-s'\n    | 'body-m'\n    | 'body-l'\n    | 'body-xl'\n    | 'cap-m'\n    | 'cap-l'\n    | 'label-s'\n    | 'label-m'\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'b1'\n    | 'b2'\n    | 'b3'\n    | 'b4'\n    | 'b5'\n    | 'b6'\n    | 'xb1'\n    | 'xb2'\n    | 'xb3'\n    | 'xh1'\n    | 'xh2'\n    | 'xh3'\n    | 'xh4'\n    | 'xh5'\n    | 'xh6' = 'body-m'\n\n  /**\n   * Since b* and xb* variants are uppercase, screen readers need to be served a\n   * (non-uppercase) aria-label (otherwise they will read out the heading letter by letter).\n   * If you're using a b* or xb* variant, an aria-label will be\n   * set automatically on the element. The component will use the inner HTML for the\n   * label implicitly. If you want to set an aria-label explicitly (such as when you have\n   * inner HTML that should not be part of the label), you can use this property.\n   */\n  @Prop() ariaLabel: string\n\n  @State() clonedAttributes\n\n  private applyAriaLabel() {\n    const isUppercase = [\n      'cap-m',\n      'cap-l',\n      'b1',\n      'b2',\n      'b3',\n      'b4',\n      'b5',\n      'b6',\n      'xb1',\n      'xb2',\n      'xb3',\n    ].includes(this.variant)\n\n    if (isUppercase) {\n      this.root.setAttribute(\n        'aria-label',\n        this.ariaLabel || this.el.innerHTML.trim()\n      )\n    }\n  }\n\n  private getDefaultTag = () =>\n    ({\n      'cap-m': 'span',\n      'cap-l': 'span',\n      'label-s': 'span',\n      'label-m': 'span',\n      h1: 'h1',\n      h2: 'h2',\n      h3: 'h3',\n      h4: 'h4',\n      h5: 'h5',\n      h6: 'h6',\n      b1: 'h1',\n      b2: 'h2',\n      b3: 'h3',\n      b4: 'h4',\n      b5: 'h5',\n      b6: 'h6',\n      xb1: 'h1',\n      xb2: 'h2',\n      xb3: 'h3',\n      xh1: 'h1',\n      xh2: 'h2',\n      xh3: 'h3',\n      xh4: 'h4',\n      xh5: 'h5',\n      xh6: 'h6',\n    })[this.variant] ?? 'p'\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['tag', 'variant'])\n  }\n\n  componentDidRender() {\n    this.applyAriaLabel()\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    const HTag = this.tag || this.getDefaultTag()\n\n    return (\n      <HTag\n        {...this.clonedAttributes}\n        class={`ld-typo ld-typo--${this.variant}`}\n        part=\"tag\"\n        ref={(ref: HTMLElement) => (this.root = ref)}\n      >\n        <slot></slot>\n      </HTag>\n    )\n  }\n}\n"],"names":["isFalsy","value","undefined","cloneAttributes","attributesToIgnoreSet","Set","arguments","length","attributesToClone","attr","this","el","attributes","has","name","valueToClone","clonedAttributes","observer","MutationObserver","mutationsList","mutation","attributeName","attrValue","getAttribute","Object","assign","observe","subtree","childList","LdTypo","getDefaultTag","_a","h1","h2","h3","h4","h5","h6","b1","b2","b3","b4","b5","b6","xb1","xb2","xb3","xh1","xh2","xh3","xh4","xh5","xh6","variant","applyAriaLabel","includes","root","setAttribute","ariaLabel","innerHTML","trim","componentWillLoad","attributesObserver","call","componentDidRender","disconnectedCallback","disconnect","render","HTag","tag","h","key","class","part","ref"],"sourceRoot":""}