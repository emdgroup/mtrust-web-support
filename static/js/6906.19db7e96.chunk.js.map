{"version":3,"file":"static/js/6906.19db7e96.chunk.js","mappings":"iIAEaA,EAAUA,CAACC,EAAkBC,IAEtCA,IACE,YAAaA,GAAMA,EAAGF,QAAQC,IAC9BD,EAAQC,EAAWC,EAAGC,cAAwCC,M,wCCDvDC,EAAiBC,GAC5BA,EAAWC,QAAQC,GAAcA,IAAWC,KAAK,I,2FCNnD,MCuBaC,EAAe,M,+BA4DlB,KAAAC,iCAAoCC,IAC1CC,MAAMC,KAAKC,KAAKb,GAAGc,UAAUC,SAASf,IAIjC,CACC,uBACA,qBACA,uBACA,qBACAgB,SAAShB,EAAGiB,UAEdjB,EAAGkB,UAAUC,OAAO,6BAA8BT,E,GAEpD,E,6BA/D8B,E,aAOhB,E,eAOE,E,8CASpB,iBAAMU,GAA4B,IAAhBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACxBT,KAAKY,YAAYL,YAAYC,E,CAI/BK,cAAAA,CAAeC,G,MACTA,IACc,QAAhBC,EAAAf,KAAKY,mBAAW,IAAAG,GAAAA,EAAEC,gB,CAKtBC,8BAAAA,CAA+BC,GAC7BlB,KAAKmB,iBAAiBD,E,CAGhBC,gBAAAA,CAAiBD,GAEvBE,YAAW,KACTpB,KAAKqB,MAAMhB,UAAUC,OACnB,wCACAY,EACD,GACA,G,CAqBLI,4BAAAA,CACEC,GAKIA,EAAGC,SAAWxB,KAAKyB,UACnBF,EAAGG,OAAOC,WACZ3B,KAAKO,aAAY,GACjBP,KAAKJ,kCAAiC,IAEtCI,KAAKJ,kCAAiC,G,CAK1CgC,6BAAAA,CAA8BL,GAC5B,GAAIA,EAAGC,SAAWxB,KAAKyB,QAAS,OACRF,EAAGG,OAEzB1B,KAAKJ,kCAAiC,GAEtCI,KAAKJ,kCAAkCI,KAAKyB,QAAQE,U,CAIxDE,iBAAAA,GACE7B,KAAKyB,SAAUxC,EAAAA,EAAAA,GAAQ,aAAce,KAAKb,IAC1Ca,KAAK8B,gBAAoD,sBAAlC9B,KAAKb,GAAG4C,cAAc3B,O,CAG/C4B,MAAAA,GACE,MAAMC,GAAK3C,EAAAA,EAAAA,GAAc,CACvB,oBACAU,KAAKc,QAAU,4BACfd,KAAK8B,iBAAmB,yCAG1B,OACEI,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2CAACC,MAAOJ,IACXC,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CACEE,IAAMnD,GAAQa,KAAKqB,MAAQlC,EAC3BkD,MAAM,mCAERH,EAAAA,EAAAA,GAAA,gCAAAE,IAAA,2CACEG,MAAO,CACLC,YAAaxC,KAAKc,QAAUd,KAAKyC,SAAW,SAAW,WAEzDC,KAAK,mBACLJ,IAAMnD,GAAQa,KAAKY,YAAczB,IAEjC+C,EAAAA,EAAAA,GAAA,QAAAE,IAAA,8C,0JDxJuB,y0C","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/closest.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/ld-sidenav-subnav/ld-sidenav-subnav.shadow.css?tag=ld-sidenav-subnav&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/ld-sidenav-subnav/ld-sidenav-subnav.tsx"],"sourcesContent":["// This helper function is similar to Element.closest(),\n// however it also traverses shadow DOM boundaries.\nexport const closest = (selector: string, el: Element | Document) => {\n  return (\n    el &&\n    (('closest' in el && el.closest(selector)) ||\n      closest(selector, (el.getRootNode() as unknown as ShadowRoot).host))\n  )\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host {\n  --ld-sidenav-accordion-bg-col-hover: var(--ld-col-neutral-100);\n\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  transform: translateX(100%);\n  display: none;\n  z-index: 1; /* makes the scrollbar of the parent scroll-container disappear, */\n  background: var(\n    --ld-sidenav-bg-color\n  ); /* which only works with a background color */\n  visibility: hidden;\n\n  &(.ld-sidenav-subnav--active) {\n    display: block;\n  }\n\n  ::slotted(\n      :where(:not(ld-sidenav-separator, ld-sidenav-navitem, ld-sidenav-subnav))\n    ) {\n    margin-bottom: var(--ld-sidenav-padding-y);\n    transition: var(--ld-sidenav-collapse-content-transition);\n    will-change: opacity, transform; /* fixes flickering on slide */\n  }\n\n  ::slotted(.ld-sidenav-subnav__hidden) {\n    transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n        linear,\n      visibility 0s var(--ld-sidenav-transition-duration-collapse-expand) linear,\n      transform var(--ld-sidenav-transition-duration-collapse-expand) ease;\n    opacity: 0;\n    visibility: hidden;\n    transform: translateX(var(--ld-sidenav-translate-x-delta));\n  }\n\n  ::slotted(.ld-sidenav-accordion) {\n    transform: none;\n  }\n}\n\n.ld-sidenav-subnav__background {\n  opacity: 0;\n  transition: opacity var(--ld-sidenav-transition-duration) linear;\n  position: absolute;\n  inset: 0;\n  background-color: var(--ld-sidenav-bg-color);\n\n  &::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    background-color: var(--ld-sidenav-subnav-bg-color);\n  }\n\n  &--active {\n    opacity: 1;\n  }\n}\n\n:host(.ld-sidenav-subnav--has-parent-subnav) {\n  .ld-sidenav-subnav__background {\n    opacity: 1;\n  }\n}\n","import {\n  Component,\n  Element,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { closest } from '../../../utils/closest'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-sidenav-subnav',\n  styleUrl: 'ld-sidenav-subnav.shadow.css',\n  shadow: true,\n})\nexport class LdSidenavSubnav {\n  @Element() el: HTMLElement\n  private sidenav: HTMLLdSidenavElement\n  private scrollerRef: HTMLLdSidenavScrollerInternalElement\n  private bgRef: HTMLElement\n\n  /**\n   * @internal\n   * Internal prop indicating that the subnav is about to become active which\n   * may happen before a transition finishes after which it actually becomes active.\n   */\n  @Prop() activeBeforeTransition? = false\n\n  /**\n   * @internal\n   * Internal prop indicating that the subnav is either ancestor of the\n   * currently visible subnav or the currently visible subnav itself.\n   */\n  @Prop() active? = false\n\n  /**\n   * @internal\n   * Internal prop indicating that the subnav is ancestor of the\n   * currently visible subnav.\n   */\n  @Prop() ancestor? = false\n\n  /** Used in the ld-sidenav-back component to display parent nav label. */\n  @Prop() label!: string\n\n  @State() hasParentSubnav: boolean\n\n  /** Scrolls the subnav scroll container to the top. */\n  @Method()\n  async scrollToTop(smoothly = false) {\n    this.scrollerRef.scrollToTop(smoothly)\n  }\n\n  @Watch('active')\n  onActiveChange(active) {\n    if (active) {\n      this.scrollerRef?.updateShadows()\n    }\n  }\n\n  @Watch('activeBeforeTransition')\n  onActiveBeforeTransitionChange(activeBeforeTransition) {\n    this.updateBackground(activeBeforeTransition)\n  }\n\n  private updateBackground(activeBeforeTransition: boolean) {\n    // HACK: Timeout is required to make the transition work on nav item click\n    setTimeout(() => {\n      this.bgRef.classList.toggle(\n        'ld-sidenav-subnav__background--active',\n        activeBeforeTransition\n      )\n    }, 20)\n  }\n\n  private toggleVisibilityOnHidableContent = (visible: boolean) => {\n    Array.from(this.el.children).forEach((el) => {\n      // To also hide one of the following elements,\n      // it is possible to wrap it in a div with display contents.\n      if (\n        ![\n          'LD-SIDENAV-ACCORDION',\n          'LD-SIDENAV-NAVITEM',\n          'LD-SIDENAV-SEPARATOR',\n          'LD-SIDENAV-SUBNAV',\n        ].includes(el.tagName)\n      ) {\n        el.classList.toggle('ld-sidenav-subnav__hidden', !visible)\n      }\n    })\n  }\n\n  @Listen('ldSidenavCollapsedChange', { target: 'window', passive: true })\n  handleSidenavCollapsedChange(\n    ev: CustomEvent<{\n      collapsed: boolean\n      fully: boolean\n    }>\n  ) {\n    if (ev.target !== this.sidenav) return\n    if (ev.detail.collapsed) {\n      this.scrollToTop(true)\n      this.toggleVisibilityOnHidableContent(false)\n    } else {\n      this.toggleVisibilityOnHidableContent(true)\n    }\n  }\n\n  @Listen('ldSidenavBreakpointChange', { target: 'window', passive: true })\n  handleSidenavBreakpointChange(ev: CustomEvent<boolean>) {\n    if (ev.target !== this.sidenav) return\n    const sidenavClosable = ev.detail\n    if (sidenavClosable) {\n      this.toggleVisibilityOnHidableContent(true)\n    } else {\n      this.toggleVisibilityOnHidableContent(!this.sidenav.collapsed)\n    }\n  }\n\n  componentWillLoad() {\n    this.sidenav = closest('ld-sidenav', this.el)\n    this.hasParentSubnav = this.el.parentElement.tagName === 'LD-SIDENAV-SUBNAV'\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-sidenav-subnav',\n      this.active && 'ld-sidenav-subnav--active',\n      this.hasParentSubnav && 'ld-sidenav-subnav--has-parent-subnav',\n    ])\n\n    return (\n      <Host class={cl}>\n        <div\n          ref={(el) => (this.bgRef = el)}\n          class=\"ld-sidenav-subnav__background\"\n        ></div>\n        <ld-sidenav-scroller-internal\n          style={{\n            visibility: !this.active || this.ancestor ? 'hidden' : 'visible',\n          }}\n          part=\"scroll-container\"\n          ref={(el) => (this.scrollerRef = el)}\n        >\n          <slot></slot>\n        </ld-sidenav-scroller-internal>\n      </Host>\n    )\n  }\n}\n"],"names":["closest","selector","el","getRootNode","host","getClassNames","classNames","filter","className","join","LdSidenavSubnav","toggleVisibilityOnHidableContent","visible","Array","from","this","children","forEach","includes","tagName","classList","toggle","scrollToTop","smoothly","arguments","length","undefined","scrollerRef","onActiveChange","active","_a","updateShadows","onActiveBeforeTransitionChange","activeBeforeTransition","updateBackground","setTimeout","bgRef","handleSidenavCollapsedChange","ev","target","sidenav","detail","collapsed","handleSidenavBreakpointChange","componentWillLoad","hasParentSubnav","parentElement","render","cl","h","Host","key","class","ref","style","visibility","ancestor","part"],"sourceRoot":""}