{"version":3,"file":"static/js/5060.41491dc8.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/closest.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/ld-sidenav-slider/ld-sidenav-slider.shadow.css?tag=ld-sidenav-slider&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-sidenav/ld-sidenav-slider/ld-sidenav-slider.tsx"],"sourcesContent":["// This helper function is similar to Element.closest(),\n// however it also traverses shadow DOM boundaries.\nexport const closest = (selector: string, el: Element | Document) => {\n  return (\n    el &&\n    (('closest' in el && el.closest(selector)) ||\n      closest(selector, (el.getRootNode() as unknown as ShadowRoot).host))\n  )\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host {\n  transition: transform var(--ld-sidenav-transition-duration) ease;\n  display: block;\n  height: 100%;\n  width: 100%;\n  position: absolute;\n\n  &.ld-sidenav-slider--subnav-active {\n    visibility: hidden;\n  }\n\n  ::slotted(\n      :where(:not(ld-sidenav-separator, ld-sidenav-navitem, ld-sidenav-subnav))\n    ) {\n    margin-bottom: var(--ld-sidenav-padding-y);\n    transition: var(--ld-sidenav-collapse-content-transition);\n    will-change: opacity, transform; /* fixes flickering on slide */\n  }\n\n  ::slotted(.ld-sidenav-slider__hidden) {\n    transition: opacity var(--ld-sidenav-transition-duration-collapse-expand)\n        linear,\n      visibility 0s var(--ld-sidenav-transition-duration-collapse-expand) linear,\n      transform var(--ld-sidenav-transition-duration-collapse-expand) ease;\n    opacity: 0;\n    visibility: hidden;\n    transform: translateX(var(--ld-sidenav-translate-x-delta));\n  }\n\n  ::slotted(.ld-sidenav-accordion) {\n    transform: none;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../../utils/getClassNames'\nimport { closest } from '../../../utils/closest'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-sidenav-slider',\n  styleUrl: 'ld-sidenav-slider.shadow.css',\n  shadow: true,\n})\nexport class LdSidenavSlider {\n  @Element() el: HTMLLdSidenavSliderElement\n  private sidenav: HTMLLdSidenavElement\n  private scrollerRef: HTMLLdSidenavScrollerInternalElement\n\n  /** ID of the subnav that shall be shown on initial render. */\n  @Prop({ mutable: true }) currentSubnav?: string\n\n  /** Used in the ld-sidenav-back component to display parent nav label. */\n  @Prop() label!: string\n\n  @State() currentNavLevel: number\n  @State() activeSubnavs: HTMLLdSidenavSubnavElement[] = []\n  @State() isFirstLevelHidden = false\n\n  /** Emitted on navigation (before transition ends). */\n  @Event() ldSidenavSliderChange: EventEmitter<\n    { id: string; label: string } | undefined\n  >\n\n  /** Emitted after navigation (after transition ends). */\n  @Event() ldSidenavSliderChanged: EventEmitter<\n    { id: string; label: string } | undefined\n  >\n\n  private navigateToSubnav() {\n    // Make current subnav and all ancestor subnavs active.\n    let parentSubnav: HTMLLdSidenavSubnavElement\n    let subnavId = this.currentSubnav\n    this.activeSubnavs = []\n    while (subnavId) {\n      const subnav = document.querySelector<HTMLLdSidenavSubnavElement>(\n        `#${subnavId}`\n      )\n      if (subnav) {\n        subnav.active = true\n        parentSubnav = subnav.closest(`ld-sidenav-subnav:not(#${subnavId})`)\n        this.activeSubnavs.unshift(subnav)\n        if (parentSubnav) {\n          subnavId = parentSubnav.id\n        } else {\n          subnavId = undefined\n        }\n      } else {\n        subnavId = undefined\n      }\n    }\n\n    if (this.activeSubnavs.length !== this.currentNavLevel) {\n      // Condition is true for almost all use cases.\n      let needsInertUpdate = false\n      if (\n        this.currentNavLevel === undefined ||\n        this.currentNavLevel > this.activeSubnavs.length\n      ) {\n        needsInertUpdate = true\n        this.updateAncestor()\n      }\n      this.currentNavLevel = this.activeSubnavs.length\n      if (needsInertUpdate) this.updateFirstLevelHidden()\n\n      this.updateActiveBeforeTransition()\n    } else if (this.activeSubnavs.length > 0) {\n      // This condition applies if navigating to a subnav\n      // which has the same level as the currently active subnav.\n      // This happens on change of the currentSubnav prop from\n      // the outside.\n      this.updateActive()\n      this.updateAncestor()\n      this.updateFirstLevelHidden()\n      this.scrollInactiveToTop()\n    }\n  }\n\n  @Watch('currentSubnav')\n  handleSubnavChange() {\n    this.navigateToSubnav()\n    this.emitChange()\n  }\n\n  @Listen('ldSidenavNavitemTo')\n  slideToHandler(ev: CustomEvent<{ id: string; label: string }>) {\n    this.currentSubnav = ev.detail.id\n  }\n\n  @Listen('ldSidenavCollapsedChange', { target: 'window', passive: true })\n  handleSidenavCollapsedChange(\n    ev: CustomEvent<{\n      collapsed: boolean\n      fully: boolean\n    }>\n  ) {\n    if (ev.target !== this.sidenav) return\n    if (ev.detail.collapsed) {\n      this.scrollerRef.scrollToTop(true)\n      this.toggleVisibilityOnHidableContent(false)\n    } else {\n      this.toggleVisibilityOnHidableContent(true)\n    }\n  }\n\n  @Listen('ldSidenavBreakpointChange', { target: 'window', passive: true })\n  handleSidenavBreakpointChange(ev: CustomEvent<boolean>) {\n    if (ev.target !== this.sidenav) return\n    const sidenavClosable = ev.detail\n    if (sidenavClosable) {\n      this.toggleVisibilityOnHidableContent(true)\n    } else {\n      this.toggleVisibilityOnHidableContent(!this.sidenav.collapsed)\n    }\n  }\n\n  /** Navigates back to the parent nav. */\n  @Method()\n  async navigateBack() {\n    if (this.currentNavLevel > 0) {\n      const parentSubnav = this.activeSubnavs[this.activeSubnavs.length - 2]\n      this.currentSubnav = parentSubnav?.id || ''\n    }\n  }\n\n  private emitChange(afterTransition = false) {\n    const activeSubnav = this.activeSubnavs[this.activeSubnavs.length - 1]\n    const toEmit = afterTransition\n      ? this.ldSidenavSliderChanged\n      : this.ldSidenavSliderChange\n    if (activeSubnav) {\n      const parentSubnav =\n        this.activeSubnavs[this.activeSubnavs.length - 2] || this.el\n      toEmit.emit({\n        id: activeSubnav.id,\n        label: parentSubnav.label,\n      })\n    } else if (!this.currentSubnav) {\n      toEmit.emit()\n    }\n  }\n\n  private updateActiveBeforeTransition = () => {\n    // reset\n    this.el.querySelectorAll('ld-sidenav-subnav').forEach((subnav) => {\n      subnav.activeBeforeTransition = false\n    })\n\n    // update\n    this.activeSubnavs.forEach((subnav) => {\n      subnav.activeBeforeTransition = true\n    })\n  }\n\n  private updateActive = () => {\n    // reset\n    this.el.querySelectorAll('ld-sidenav-subnav').forEach((subnav) => {\n      subnav.active = false\n    })\n\n    // update\n    this.activeSubnavs.forEach((subnav) => {\n      subnav.active = true\n    })\n  }\n\n  private updateAncestor = () => {\n    // reset\n    this.el.querySelectorAll('ld-sidenav-subnav').forEach((subnav) => {\n      subnav.ancestor = false\n    })\n\n    // update\n    this.activeSubnavs.forEach((subnav, index) => {\n      subnav.ancestor = index < this.activeSubnavs.length - 1\n    })\n  }\n\n  private updateFirstLevelHidden = () => {\n    this.isFirstLevelHidden = this.currentNavLevel > 0\n  }\n\n  private scrollInactiveToTop = () => {\n    // Scroll all inactive subnav scroll containers to top.\n    Array.from(\n      this.el.querySelectorAll<HTMLLdSidenavSubnavElement>('ld-sidenav-subnav')\n    ).forEach((subnav) => {\n      if (!subnav.active) {\n        subnav.scrollToTop()\n      }\n    })\n  }\n\n  private onTransitionEnd = (ev: TransitionEvent) => {\n    if (ev.target !== this.el) return\n\n    this.updateActive()\n    this.updateAncestor()\n    this.updateFirstLevelHidden()\n    this.scrollInactiveToTop()\n    this.emitChange(true)\n  }\n\n  private toggleVisibilityOnHidableContent = (visible: boolean) => {\n    Array.from(this.el.children).forEach((el) => {\n      // To also hide one of the following elements,\n      // it is possible to wrap it in a div with display contents.\n      if (\n        ![\n          'LD-SIDENAV-ACCORDION',\n          'LD-SIDENAV-NAVITEM',\n          'LD-SIDENAV-SEPARATOR',\n          'LD-SIDENAV-SUBNAV',\n        ].includes(el.tagName)\n      ) {\n        el.classList.toggle('ld-sidenav-slider__hidden', !visible)\n      }\n    })\n  }\n\n  componentWillLoad() {\n    this.sidenav = closest('ld-sidenav', this.el)\n    if (this.currentSubnav) {\n      this.handleSubnavChange()\n    }\n    if (this.currentNavLevel === undefined) {\n      this.currentNavLevel = 0\n    }\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-sidenav-slider',\n      this.currentNavLevel > 0 && 'ld-sidenav-slider--subnav-active',\n    ])\n\n    return (\n      <Host\n        onTransitionEnd={this.onTransitionEnd}\n        class={cl}\n        style={{\n          transform: `translateX(-${this.currentNavLevel}00%)`,\n          visibility: this.isFirstLevelHidden ? 'hidden' : 'inherit',\n        }}\n      >\n        <ld-sidenav-scroller-internal\n          part=\"scroll-container\"\n          ref={(el) => (this.scrollerRef = el)}\n        >\n          <slot></slot>\n        </ld-sidenav-scroller-internal>\n      </Host>\n    )\n  }\n}\n"],"names":["closest","selector","el","getRootNode","host","getClassNames","classNames","filter","className","join","LdSidenavSlider","updateActiveBeforeTransition","this","querySelectorAll","forEach","subnav","activeBeforeTransition","activeSubnavs","updateActive","active","updateAncestor","ancestor","index","length","updateFirstLevelHidden","isFirstLevelHidden","currentNavLevel","scrollInactiveToTop","Array","from","scrollToTop","onTransitionEnd","ev","target","emitChange","toggleVisibilityOnHidableContent","visible","children","includes","tagName","classList","toggle","navigateToSubnav","parentSubnav","subnavId","currentSubnav","document","querySelector","unshift","id","undefined","needsInertUpdate","handleSubnavChange","slideToHandler","detail","handleSidenavCollapsedChange","sidenav","collapsed","scrollerRef","handleSidenavBreakpointChange","navigateBack","afterTransition","arguments","activeSubnav","toEmit","ldSidenavSliderChanged","ldSidenavSliderChange","emit","label","componentWillLoad","render","cl","h","Host","key","class","style","transform","visibility","part","ref"],"sourceRoot":""}