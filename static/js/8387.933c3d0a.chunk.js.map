{"version":3,"file":"static/js/8387.933c3d0a.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/ariaDisabled.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/cloneAttributes.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/focus.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-radio/ld-radio.css?tag=ld-radio&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-radio/ld-radio.tsx"],"sourcesContent":["// 'true', '1', 'yolo' etc. correspond to an aria disabled element, but not 'false'.\nexport const isAriaDisabled = (ariaDisabledValue: string | undefined) =>\n  ariaDisabledValue && ariaDisabledValue !== 'false'\n","function isFalsy(value: string | null | undefined) {\n  return value === undefined || value === null || value === 'false'\n}\n\nexport function cloneAttributes(attributesToIgnore: string[] = []) {\n  const attributesToIgnoreSet = new Set([\n    'style',\n    'id',\n    'class',\n    'slot',\n    'part',\n    ...attributesToIgnore,\n  ])\n\n  // Get attributes not in props.\n  const attributesToClone = {}\n  for (const attr of this.el.attributes) {\n    if (attributesToIgnoreSet.has(attr.name) || isFalsy(attr.value)) {\n      continue\n    }\n    const valueToClone = attr.value === '' ? true : attr.value\n    attributesToClone[attr.name] = valueToClone\n  }\n\n  // Update cloned attributes state.\n  this.clonedAttributes = attributesToClone\n\n  // Set up attributes observer.\n  const callback = (mutationsList) => {\n    // Update cloned attributes state.\n    for (const mutation of mutationsList) {\n      const { attributeName } = mutation\n      if (!attributesToIgnoreSet.has(attributeName)) {\n        const attrValue = this.el.getAttribute(attributeName)\n        if (isFalsy(attrValue)) {\n          delete this.clonedAttributes[attributeName]\n        } else {\n          this.clonedAttributes[attributeName] = attrValue\n        }\n      }\n    }\n\n    // Trigger state update.\n    this.clonedAttributes = { ...this.clonedAttributes }\n  }\n  const observer = new MutationObserver(callback)\n  observer.observe(this.el, {\n    subtree: false,\n    childList: false,\n    attributes: true,\n  })\n\n  return observer\n}\n","export const focusableSelector = [\n  'a[href]',\n  'area[href]',\n  'input:not([type=\"hidden\"]):not([type=\"radio\"]):not(:disabled)',\n  'input[type=\"radio\"]:not(:disabled)',\n  'select:not(:disabled)',\n  'textarea:not(:disabled)',\n  'button:not(:disabled)',\n  'iframe',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]',\n  '[tabindex]',\n]\n  .map((selector) => selector + ':not([tabindex^=\"-\"])')\n  .join(',')\n\nexport const getFirstFocusable = (el: HTMLElement): HTMLElement | undefined => {\n  // Directly focusable element.\n  if (el.matches(focusableSelector)) {\n    return el\n  }\n\n  // Slot.\n  if (el.tagName === 'SLOT') {\n    const hostEl = el.getRootNode()['host']\n    const slotName = el.getAttribute('name')\n    const slottedEl = slotName\n      ? hostEl.querySelector(`[slot=\"${el.getAttribute('name')}\"]`)\n      : Array.from(hostEl.children).find(\n          (child) => !(child as HTMLElement).hasAttribute('slot')\n        )\n    if (slottedEl) {\n      return getFirstFocusable(slottedEl)\n    }\n    return null\n  }\n\n  // Web Component.\n  if (el.shadowRoot) {\n    const shadowRootChildren = Array.from(el.shadowRoot.children)\n    for (const child of shadowRootChildren) {\n      const focusable = getFirstFocusable(child as HTMLElement)\n      if (focusable) return focusable\n    }\n  }\n\n  // Element with children.\n  const children = Array.from(el.children)\n  for (const child of children) {\n    const focusable = getFirstFocusable(child as HTMLElement)\n    if (focusable) return focusable\n  }\n\n  return null\n}\n\nexport const isInnerFocusable = <T extends object>(\n  element?: T\n): element is T & InnerFocusable => element && 'focusInner' in element\n\nlet autofocusHandlerTimeout\nexport const registerAutofocus = (autofocus: boolean) => {\n  if (!autofocus || autofocusHandlerTimeout) return\n  autofocusHandlerTimeout = setTimeout(() => {\n    const firstWithAutofocus = Array.from(\n      document.querySelectorAll<HTMLInputElement>('[autofocus]')\n    ).find((el) => !el.disabled)\n    if (isInnerFocusable(firstWithAutofocus)) {\n      firstWithAutofocus.focusInner()\n    }\n  }, 200)\n}\n\nexport const focusInnerOrFocus = (element: HTMLElement) => {\n  if (isInnerFocusable(element)) {\n    element.focusInner()\n  } else {\n    element.focus()\n  }\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host,\n.ld-radio {\n  /* layout */\n  --ld-radio-size: 1.25rem;\n  --ld-radio-dot-size: 0.625rem;\n\n  /* colors */\n  --ld-radio-bg-col: var(--ld-col-wht);\n  --ld-radio-bg-col-hover: var(--ld-col-neutral-010);\n  --ld-radio-bg-col-active: var(--ld-col-neutral-050);\n  --ld-radio-disabled-col: var(--ld-col-neutral-300);\n  --ld-radio-disabled-bg-col: var(--ld-col-neutral-100);\n  --ld-radio-dark-bg-col: var(--ld-col-neutral-050);\n  --ld-radio-dark-bg-col-hover: var(--ld-col-neutral-100);\n  --ld-radio-dark-bg-col-active: var(--ld-col-neutral-300);\n  --ld-radio-checked-col: var(--ld-col-wht);\n  --ld-radio-checked-col-active: var(--ld-col-wht);\n  --ld-radio-invalid-checked-col: var(--ld-col-wht);\n  --ld-radio-invalid-checked-col-active: var(--ld-col-wht);\n\n  /* themable colors */\n  --ld-radio-col: var(--ld-thm-primary);\n  --ld-radio-col-hover: var(--ld-thm-primary-hover);\n  --ld-radio-col-active: var(--ld-thm-primary-active);\n  --ld-radio-col-focus: var(--ld-thm-primary-focus);\n  --ld-radio-invalid-col: var(--ld-thm-error);\n  --ld-radio-invalid-col-hover: var(--ld-thm-error-hover);\n  --ld-radio-invalid-col-focus: var(--ld-thm-error-focus);\n  --ld-radio-invalid-col-active: var(--ld-thm-error-active);\n  --ld-radio-warn-col: var(--ld-thm-warning);\n  --ld-radio-warn-col-hover: var(--ld-thm-warning-hover);\n  --ld-radio-warn-col-focus: var(--ld-thm-warning-focus);\n  --ld-radio-warn-col-active: var(--ld-thm-warning-active);\n  --ld-radio-warn-checked-col: var(--ld-thm-warning-active);\n  --ld-radio-warn-checked-col-active: var(--ld-thm-warning-hover);\n\n  position: relative;\n  display: inline-flex;\n  flex-shrink: 0;\n  width: var(--ld-radio-size);\n  height: var(--ld-radio-size);\n  min-width: auto !important;\n  box-sizing: border-box;\n\n  input {\n    appearance: none;\n    background-color: transparent; /* Required for Mobile Sarari */\n    height: 100%;\n    inset: 0;\n    margin: 0;\n    position: absolute;\n    width: 100%;\n    z-index: 1;\n\n    &:checked {\n      ~ .ld-radio__dot {\n        visibility: inherit;\n      }\n    }\n\n    &:where(:disabled),\n    &:where(\n        [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n      ) {\n      ~ .ld-radio__dot {\n        background-color: var(--ld-radio-disabled-col);\n      }\n      ~ .ld-radio__box {\n        background-color: transparent;\n        box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-disabled-bg-col);\n      }\n\n      &:checked {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-disabled-bg-col);\n        }\n      }\n    }\n\n    &:where(\n        :not(\n            :disabled,\n            [aria-disabled]:where(\n                :not([aria-disabled=''], [aria-disabled='false'])\n              )\n          )\n      ) {\n      cursor: pointer;\n\n      ~ .ld-radio__dot {\n        background-color: var(--ld-radio-col-active);\n      }\n      ~ .ld-radio__box {\n        box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col);\n      }\n\n      &:focus:focus-visible {\n        ~ .ld-radio__box {\n          background-color: transparent;\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-focus);\n        }\n      }\n      &:active,\n      &:active:focus-visible {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-bg-col-active);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-active);\n        }\n      }\n\n      &:checked {\n        ~ .ld-radio__dot {\n          background-color: var(--ld-radio-checked-col);\n        }\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-col);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col);\n        }\n\n        &:focus:focus-visible {\n          ~ .ld-radio__dot {\n            background-color: var(--ld-radio-col-active);\n          }\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-col-focus);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-focus);\n          }\n        }\n        &:active,\n        &:active:focus-visible {\n          ~ .ld-radio__dot {\n            background-color: var(--ld-radio-checked-col-active);\n          }\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-col-active);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-active);\n          }\n        }\n      }\n    }\n  }\n\n  :where(\n      input:not(\n          :disabled,\n          input[aria-disabled]:where(\n              :not([aria-disabled=''], [aria-disabled='false'])\n            )\n        )\n    ) {\n    ~ .ld-radio__box {\n      background-color: var(--ld-radio-bg-col);\n    }\n\n    @media (hover: hover) {\n      &:hover {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-bg-col-hover);\n          box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-hover);\n        }\n\n        &:checked {\n          ~ .ld-radio__dot {\n            color: var(--ld-radio-checked-col);\n          }\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-col-hover);\n            box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-radio-col-hover);\n          }\n        }\n      }\n    }\n  }\n}\n\n.ld-radio.ld-radio--dark,\n:host(.ld-radio.ld-radio--dark) {\n  :where(input) {\n    &:not(\n        :disabled,\n        input[aria-disabled]:where(\n            :not([aria-disabled=''], [aria-disabled='false'])\n          ),\n        :checked\n      ) {\n      ~ .ld-radio__box {\n        background-color: var(--ld-radio-dark-bg-col);\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          ~ .ld-radio__box {\n            background-color: var(--ld-radio-dark-bg-col-hover);\n          }\n        }\n      }\n\n      &:active,\n      &:active:focus-visible {\n        ~ .ld-radio__box {\n          background-color: var(--ld-radio-dark-bg-col-active);\n        }\n      }\n    }\n  }\n}\n\n.ld-radio__dot {\n  visibility: hidden;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  z-index: 1;\n  width: var(--ld-radio-dot-size);\n  height: var(--ld-radio-dot-size);\n}\n\n.ld-radio__box {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  box-shadow: inset 0 0 0 var(--ld-sp-2) var(--ld-col-rblck4);\n}\n\n:host,\n.ld-radio,\n.ld-radio__dot,\n.ld-radio__box {\n  border-radius: var(--ld-br-full);\n}\n\n:host(.ld-radio--highlight),\n.ld-radio--highlight {\n  --ld-radio-col: var(--ld-radio-warn-col);\n  --ld-radio-col-hover: var(--ld-radio-warn-col-hover);\n  --ld-radio-col-active: var(--ld-radio-warn-col-focus);\n  --ld-radio-col-focus: var(--ld-radio-warn-col-active);\n  --ld-radio-checked-col: var(--ld-radio-warn-checked-col);\n  --ld-radio-checked-col-active: var(--ld-radio-warn-checked-col-active);\n}\n\n:host(.ld-radio--invalid),\n:host(.ld-radio--danger),\n.ld-radio--invalid,\n.ld-radio--danger {\n  --ld-radio-col: var(--ld-radio-invalid-col);\n  --ld-radio-col-hover: var(--ld-radio-invalid-col-hover);\n  --ld-radio-col-active: var(--ld-radio-invalid-col-focus);\n  --ld-radio-col-focus: var(--ld-radio-invalid-col-active);\n  --ld-radio-checked-col: var(--ld-radio-invalid-checked-col);\n  --ld-radio-checked-col-active: var(--ld-radio-invalid-checked-col-active);\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { registerAutofocus } from '../../utils/focus'\nimport { isAriaDisabled } from '../../utils/ariaDisabled'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part input - Actual input element\n */\n@Component({\n  tag: 'ld-radio',\n  styleUrl: 'ld-radio.css',\n  shadow: true,\n})\nexport class LdRadio implements InnerFocusable, ClonesAttributes {\n  @Element() el: HTMLInputElement\n\n  private attributesObserver: MutationObserver\n\n  private input: HTMLInputElement\n  private hiddenInput: HTMLInputElement\n\n  /** Alternative disabled state that keeps element focusable */\n  @Prop() ariaDisabled: string\n\n  /** Automatically focus the form control when the page is loaded. */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /** Indicates whether the radio button is selected. */\n  @Prop({ mutable: true }) checked? = false\n\n  /** Disabled state of the radio. */\n  @Prop() disabled?: boolean\n\n  /** Associates the control with a form element. */\n  @Prop() form?: string\n\n  /**\n   * @internal\n   * States that this radio button or another radio button with the same name is checked.\n   */\n  @Prop() groupChecked? = false\n\n  /** Set this property to `true` in order to mark the radio visually as invalid. */\n  @Prop() invalid?: boolean\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex?: number\n\n  /** Display mode. */\n  @Prop() mode?: 'highlight' | 'danger'\n\n  /** Used to specify the name of the control. */\n  @Prop() name!: string\n\n  /** The value is not editable. */\n  @Prop() readonly?: boolean\n\n  /** Set this property to `true` in order to mark the radio button as required. */\n  @Prop() required?: boolean\n\n  /** radio tone. Use `'dark'` on white backgrounds. Default is a light tone. */\n  @Prop() tone?: 'dark'\n\n  /** The input value. */\n  @Prop() value?: string\n\n  @State() clonedAttributes\n\n  /** Emitted when the input value changed and the element loses focus. */\n  @Event() ldchange: EventEmitter<boolean>\n\n  /** Emitted when the input value changed. */\n  @Event() ldinput: EventEmitter<boolean>\n\n  /** Sets focus on the radio button. */\n  @Method()\n  async focusInner() {\n    if (this.input !== undefined) {\n      this.input.focus()\n    }\n  }\n\n  @Watch('checked')\n  @Watch('form')\n  @Watch('name')\n  @Watch('value')\n  updateHiddenInput() {\n    const outerForm = this.el.closest('form')\n    if (!this.hiddenInput && this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n    }\n\n    if (this.hiddenInput) {\n      if (!this.name) {\n        this.hiddenInput.remove()\n        this.hiddenInput = undefined\n        return\n      }\n\n      this.hiddenInput.name = this.name\n      this.hiddenInput.checked = this.checked\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      } else {\n        this.hiddenInput.removeAttribute('value')\n      }\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      } else if (this.hiddenInput.getAttribute('form')) {\n        if (outerForm) {\n          this.hiddenInput.removeAttribute('form')\n        } else {\n          this.hiddenInput.remove()\n          this.hiddenInput = undefined\n        }\n      }\n    }\n  }\n\n  private createHiddenInput() {\n    this.hiddenInput = document.createElement('input')\n    this.hiddenInput.type = 'radio'\n    this.hiddenInput.style.visibility = 'hidden'\n    this.hiddenInput.style.position = 'absolute'\n    this.hiddenInput.style.pointerEvents = 'none'\n    this.el.appendChild(this.hiddenInput)\n  }\n\n  private handleKeyDown = (ev: KeyboardEvent) => {\n    switch (ev.key) {\n      case 'ArrowUp':\n      case 'ArrowLeft': {\n        ev.preventDefault()\n        this.focusAndSelect('prev')\n        return\n      }\n      case 'ArrowDown':\n      case 'ArrowRight': {\n        ev.preventDefault()\n        this.focusAndSelect('next')\n        return\n      }\n    }\n  }\n\n  private handleChange = (event: InputEvent) => {\n    this.el.dispatchEvent(new InputEvent('change', event))\n    this.ldchange.emit(this.checked)\n  }\n\n  private handleClick = (ev?: MouseEvent) => {\n    if (this.disabled || isAriaDisabled(this.el.ariaDisabled)) {\n      ev?.preventDefault()\n      return\n    }\n\n    if (this.checked) return\n\n    // Uncheck radios with same name.\n    if (this.name) {\n      // Attribute selector fails in test env, hance filtering with js below.\n      Array.from(document.querySelectorAll('ld-radio'))\n        .filter((ldRadio) => ldRadio.getAttribute('name') === this.name)\n        .forEach((ldRadio) => {\n          ldRadio.checked = false\n          ldRadio.groupChecked = true\n        })\n    }\n\n    this.checked = true\n\n    if (!ev.isTrusted) {\n      // This happens, when a click event is dispatched on the host element\n      // from the outside i.e. on click on a parent ld-label element.\n      this.el.dispatchEvent(\n        new InputEvent('input', { bubbles: true, composed: true })\n      )\n      this.handleInput()\n      this.el.dispatchEvent(new InputEvent('change', { bubbles: true }))\n      this.ldchange.emit(this.checked)\n    }\n  }\n\n  private handleInput = () => {\n    this.ldinput.emit(this.checked)\n  }\n\n  private focusAndSelect(dir: 'next' | 'prev') {\n    const ldRadios = Array.from(document.querySelectorAll('ld-radio')).filter(\n      (ldRadio) => ldRadio.getAttribute('name') === this.name\n    )\n    ldRadios.forEach((ldRadio, index) => {\n      if (ldRadio === (this.el as unknown as HTMLLdRadioElement)) {\n        const targetLdRadio = ldRadios[index + (dir === 'next' ? 1 : -1)]\n        if (targetLdRadio) {\n          targetLdRadio.focusInner()\n          targetLdRadio.click()\n        }\n      }\n    })\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, ['tone', 'mode'])\n\n    const outerForm = this.el.closest('form')\n\n    if (this.name && (outerForm || this.form)) {\n      this.createHiddenInput()\n      this.hiddenInput.checked = this.checked\n      this.hiddenInput.name = this.name\n\n      if (this.form) {\n        this.hiddenInput.setAttribute('form', this.form)\n      }\n\n      if (this.value) {\n        this.hiddenInput.value = this.value\n      }\n    }\n\n    if (this.checked) {\n      Array.from(document.querySelectorAll('ld-radio'))\n        .filter((ldRadio) => ldRadio.getAttribute('name') === this.name)\n        .forEach((ldRadio) => {\n          ldRadio.groupChecked = true\n        })\n    }\n\n    registerAutofocus(this.autofocus)\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  render() {\n    const cl = [\n      'ld-radio',\n      this.mode && `ld-radio--${this.mode}`,\n      this.tone && `ld-radio--${this.tone}`,\n      this.invalid && 'ld-radio--invalid',\n    ]\n\n    return (\n      <Host part=\"root\" class={getClassNames(cl)} onClick={this.handleClick}>\n        <input\n          type=\"radio\"\n          {...this.clonedAttributes}\n          part=\"input focusable\"\n          onChange={this.handleChange}\n          onInput={this.handleInput}\n          onKeyDown={this.handleKeyDown}\n          ref={(ref) => (this.input = ref)}\n          disabled={this.disabled}\n          checked={this.checked}\n          tabIndex={\n            this.disabled || this.checked || !this.groupChecked\n              ? this.ldTabindex\n              : -1\n          }\n          value={this.value}\n        />\n        <div part=\"dot\" class=\"ld-radio__dot\"></div>\n        <div class=\"ld-radio__box\" part=\"box\"></div>\n      </Host>\n    )\n  }\n}\n"],"names":["isAriaDisabled","ariaDisabledValue","isFalsy","value","undefined","cloneAttributes","attributesToIgnoreSet","Set","arguments","length","attributesToClone","attr","this","el","attributes","has","name","valueToClone","clonedAttributes","observer","MutationObserver","mutationsList","mutation","attributeName","attrValue","getAttribute","Object","assign","observe","subtree","childList","focusableSelector","map","selector","join","getFirstFocusable","matches","tagName","hostEl","getRootNode","slottedEl","querySelector","Array","from","children","find","child","hasAttribute","shadowRoot","shadowRootChildren","focusable","isInnerFocusable","element","autofocusHandlerTimeout","registerAutofocus","autofocus","setTimeout","firstWithAutofocus","document","querySelectorAll","disabled","focusInner","focusInnerOrFocus","focus","getClassNames","classNames","filter","className","LdRadio","handleKeyDown","ev","key","preventDefault","focusAndSelect","handleChange","event","dispatchEvent","InputEvent","ldchange","emit","checked","handleClick","ariaDisabled","ldRadio","forEach","groupChecked","isTrusted","bubbles","composed","handleInput","ldinput","input","updateHiddenInput","outerForm","closest","hiddenInput","form","createHiddenInput","remove","removeAttribute","setAttribute","createElement","type","style","visibility","position","pointerEvents","appendChild","dir","ldRadios","index","targetLdRadio","click","componentWillLoad","attributesObserver","call","disconnectedCallback","disconnect","render","cl","mode","tone","invalid","h","Host","part","class","onClick","onChange","onInput","onKeyDown","ref","tabIndex","ldTabindex"],"sourceRoot":""}