{"version":3,"file":"static/js/9727.eb542726.chunk.js","mappings":"mIAEA,IAAIA,GAAmC,EAQhC,MAAMC,EAAgBC,I,MAE3B,MAAMC,EAEL,QAFuBC,EAAAC,SAASC,KAAKC,cACpC,mCACD,IAAAH,OAAA,EAAAA,EAAEI,QAAQC,YAELC,EAAoBC,OAAOC,kBAO3BC,EAEFV,GAAmBO,GANF,0EAUnBG,EAAcC,WAAW,mCACxBd,IAEDA,GAAmC,EACnCe,QAAQC,KACN,6QAIJ,IAAIC,EAAYf,EAUhB,OARIA,EAAKY,WAAW,QAClBG,EAAYf,EAAKgB,UAAU,IAGxBL,EAAcM,SAAS,OAC1BF,EAAY,IAAMA,GAGbJ,EAAgBI,CAAS,EC9C5BG,EAAa,CAAC,EACdC,EAAe,CAAC,EAEfC,eAAeC,EAAaC,GACjC,aAAaC,EAAW,GAAGD,aAC7B,CAEOF,eAAeI,EAAUC,GAC9B,aAAaF,EAAW,GAAGE,QAC7B,CAEOL,eAAeG,EAAWvB,GAC/B,GAAIkB,EAAWlB,GACb,OAAOkB,EAAWlB,GAGfmB,EAAanB,KAChBmB,EAAanB,GAAQ0B,MAAM,GAAG3B,EAAa,eAAeC,KACvD2B,MAAMC,GAASA,EAAKC,SACpBC,OAAOC,IACNlB,QAAQmB,MAAM,IAAIhC,0BAA8B+B,GACzC,OAIb,MAAME,QAAgBd,EAAanB,GAGnC,OAFAkB,EAAWlB,GAAQiC,EAEZA,CACT,C,wCC1BaC,EAAiBC,GAC5BA,EAAWC,QAAQC,GAAcA,IAAWC,KAAK,I,iFCNnD,MCgBaC,EAAM,M,yCAIwB,K,iBAMjC,sBAAMC,GACZ,IAA+CC,KAAKC,KAClD,OAGF,MAAMC,EAAMxC,SAASyC,cAAc,OAC7BC,QAAmBrB,EAAAA,EAAAA,GAAUiB,KAAKC,MAEnCG,IAELF,EAAIG,UAAYD,EAAWE,QACzB,OACA,yCAEFC,MAAMC,KAAKR,KAAKS,GAAGC,WAAWC,UAAUC,SAASC,IAEzB,UAAlBA,EAAMC,SACRd,KAAKS,GAAGC,WAAWK,YAAYF,E,IAGnCb,KAAKS,GAAGC,WAAWM,YAAYd,EAAIe,Y,CAGrCC,iBAAAA,GACElB,KAAKD,kB,CAGPoB,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2CACHC,OAAO9B,EAAAA,EAAAA,GAAc,CAAC,UAAWO,KAAKwB,MAAQ,YAAYxB,KAAKwB,SAC/DC,KAAK,iBAEHzB,KAAKC,OAAQmB,EAAAA,EAAAA,GAAA,a,yID3DL,24B","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/assetPath.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/fetchAsset.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-icon/ld-icon.css?tag=ld-icon&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-icon/ld-icon.tsx"],"sourcesContent":["import { Build } from '@stencil/core'\n\nlet missingAssetPathWarningDisplayed = false\n\n/**\n * Reads components asset path config from meta tag or global variable.\n * This is a workaround until the following issues are resolved:\n * https://github.com/ionic-team/stencil/issues/3470\n * https://github.com/ionic-team/stencil-ds-output-targets/issues/186\n */\nexport const getAssetPath = (path: string) => {\n  // Get asset path from meta tag if available\n  const metaLdAssetPath = document.head.querySelector<HTMLMetaElement>(\n    'meta[data-ld-asset-path]'\n  )?.dataset.ldAssetPath\n  // Get asset path from window if available\n  const windowLdAssetPath = window.__LD_ASSET_PATH__\n  // Uses CDN as fallback if no asset path is set\n  const version = '5.8.1'\n  const cdnAssetPath = `https://cdn.jsdelivr.net/npm/@emdgroup-liquid/liquid${\n    '@' + version\n  }/dist/liquid/`\n\n  const assetBasePath = Build.isTesting\n    ? '/dist/liquid'\n    : metaLdAssetPath || windowLdAssetPath || cdnAssetPath || '/'\n\n  // Display warning if assets are fetched from CDN. This is only displayed once.\n  if (\n    assetBasePath.startsWith('https://cdn.jsdelivr.net/npm/') &&\n    !missingAssetPathWarningDisplayed\n  ) {\n    missingAssetPathWarningDisplayed = true\n    console.warn(\n      `Fetching Liquid Oxygen assets from jsDelivr CDN.\\n\\nWe recommend bundling Liquid Oxygen assets with your application and setting the asset path accordingly.\\n\\nFor more information see the documentation:\\nhttps://liquid.merck.design/liquid/guides/component-assets/`\n    )\n  }\n\n  let assetPath = path\n\n  if (path.startsWith('./')) {\n    assetPath = path.substring(2)\n  }\n\n  if (!assetBasePath.endsWith('/')) {\n    assetPath = '/' + assetPath\n  }\n\n  return assetBasePath + assetPath\n}\n","import { getAssetPath } from './assetPath'\n\nconst assetCache = {}\nconst requestCache = {}\n\nexport async function fetchPattern(patternName: string): Promise<string> {\n  return await fetchAsset(`${patternName}-cell.svg`)\n}\n\nexport async function fetchIcon(iconName: string): Promise<string> {\n  return await fetchAsset(`${iconName}.svg`)\n}\n\nexport async function fetchAsset(path: string): Promise<string> {\n  if (assetCache[path]) {\n    return assetCache[path]\n  }\n\n  if (!requestCache[path]) {\n    requestCache[path] = fetch(`${getAssetPath('./assets')}/${path}`)\n      .then((resp) => resp.text())\n      .catch((err) => {\n        console.error(`\"${path}\" could not be fetched`, err)\n        return ''\n      })\n  }\n\n  const content = await requestCache[path]\n  assetCache[path] = content\n\n  return content\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host,\n:where(.ld-icon) {\n  --ld-icon-secondary-col: var(--ld-col-wht);\n  --ld-icon-size-sm: 1rem;\n  --ld-icon-size-md: 1.25rem;\n  --ld-icon-size-lg: 1.5rem;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--ld-icon-size-md);\n  height: var(--ld-icon-size-md);\n\n  ::slotted(svg),\n  :where(svg) {\n    width: var(--ld-icon-size-md);\n    height: var(--ld-icon-size-md);\n    flex-shrink: 0;\n  }\n}\n\n:host(.ld-icon--sm),\n:where(.ld-icon--sm) {\n  &,\n  ::slotted(svg),\n  :where(svg) {\n    width: var(--ld-icon-size-sm);\n    height: var(--ld-icon-size-sm);\n  }\n}\n:host(.ld-icon--lg),\n:where(.ld-icon--lg) {\n  &,\n  ::slotted(svg),\n  :where(svg) {\n    width: var(--ld-icon-size-lg);\n    height: var(--ld-icon-size-lg);\n  }\n}\n","import { Build, Component, Host, h, Prop, Watch, Element } from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { fetchIcon } from '../../utils/fetchAsset'\n\n/**\n * @slot - (optional) Custom SVG icon (only valid without name prop).\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part icon - Actual SVG element\n */\n@Component({\n  assetsDirs: ['assets'],\n  tag: 'ld-icon',\n  styleUrl: 'ld-icon.css',\n  shadow: true,\n})\nexport class LdIcon {\n  @Element() el: HTMLElement\n\n  /** The icon name. */\n  @Prop({ reflect: true }) name?: string = null\n\n  /** Size of the icon. */\n  @Prop() size?: 'sm' | 'lg'\n\n  @Watch('name')\n  private async loadIconPathData(): Promise<void> {\n    if ((!Build.isBrowser && !Build.isTesting) || !this.name) {\n      return\n    }\n\n    const div = document.createElement('div')\n    const iconString = await fetchIcon(this.name)\n\n    if (!iconString) return\n\n    div.innerHTML = iconString.replace(\n      '<svg',\n      '<svg class=\"ld-icon__svg\" part=\"icon\"'\n    )\n    Array.from(this.el.shadowRoot.children).forEach((child) => {\n      /* istanbul ignore next */\n      if (child.tagName !== 'STYLE') {\n        this.el.shadowRoot.removeChild(child)\n      }\n    })\n    this.el.shadowRoot.appendChild(div.firstChild)\n  }\n\n  componentWillLoad() {\n    this.loadIconPathData()\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames(['ld-icon', this.size && `ld-icon--${this.size}`])}\n        role=\"presentation\"\n      >\n        {!this.name && <slot></slot>}\n      </Host>\n    )\n  }\n}\n"],"names":["missingAssetPathWarningDisplayed","getAssetPath","path","metaLdAssetPath","_a","document","head","querySelector","dataset","ldAssetPath","windowLdAssetPath","window","__LD_ASSET_PATH__","assetBasePath","startsWith","console","warn","assetPath","substring","endsWith","assetCache","requestCache","async","fetchPattern","patternName","fetchAsset","fetchIcon","iconName","fetch","then","resp","text","catch","err","error","content","getClassNames","classNames","filter","className","join","LdIcon","loadIconPathData","this","name","div","createElement","iconString","innerHTML","replace","Array","from","el","shadowRoot","children","forEach","child","tagName","removeChild","appendChild","firstChild","componentWillLoad","render","h","Host","key","class","size","role"],"sourceRoot":""}