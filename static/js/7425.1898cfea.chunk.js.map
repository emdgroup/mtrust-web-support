{"version":3,"file":"static/js/7425.1898cfea.chunk.js","mappings":"mIAEA,IAAIA,GAAmC,EAQhC,MAAMC,EAAgBC,I,MAE3B,MAAMC,EAEL,QAFuBC,EAAAC,SAASC,KAAKC,cACpC,mCACD,IAAAH,OAAA,EAAAA,EAAEI,QAAQC,YAELC,EAAoBC,OAAOC,kBAO3BC,EAEFV,GAAmBO,GANF,0EAUnBG,EAAcC,WAAW,mCACxBd,IAEDA,GAAmC,EACnCe,QAAQC,KACN,6QAIJ,IAAIC,EAAYf,EAUhB,OARIA,EAAKY,WAAW,QAClBG,EAAYf,EAAKgB,UAAU,IAGxBL,EAAcM,SAAS,OAC1BF,EAAY,IAAMA,GAGbJ,EAAgBI,CAAS,EC9C5BG,EAAa,CAAC,EACdC,EAAe,CAAC,EAEfC,eAAeC,EAAaC,GACjC,aAAaC,EAAW,GAAGD,aAC7B,CAEOF,eAAeI,EAAUC,GAC9B,aAAaF,EAAW,GAAGE,QAC7B,CAEOL,eAAeG,EAAWvB,GAC/B,GAAIkB,EAAWlB,GACb,OAAOkB,EAAWlB,GAGfmB,EAAanB,KAChBmB,EAAanB,GAAQ0B,MAAM,GAAG3B,EAAa,eAAeC,KACvD2B,MAAMC,GAASA,EAAKC,SACpBC,OAAOC,IACNlB,QAAQmB,MAAM,IAAIhC,0BAA8B+B,GACzC,OAIb,MAAME,QAAgBd,EAAanB,GAGnC,OAFAkB,EAAWlB,GAAQiC,EAEZA,CACT,C,wCC1BaC,EAAiBC,GAC5BA,EAAWC,QAAQC,GAAcA,IAAWC,KAAK,I,qFCNnD,MCoCaC,EAAS,M,yCAIM,U,kBAGH,E,eAGH,C,CAGZ,yBAAMC,GACZ,IAA+CC,KAAKC,KAClD,OAGF,MAAMC,QAAsBtB,EAAAA,EAAAA,GAAaoB,KAAKC,MAC9CD,KAAKG,GAAGC,WAAWC,iBAAiB,OAAOC,SAASC,I,MAClD,MAAMC,EAAM9C,SAAS+C,cAAc,OACnCD,EAAIE,UAAYR,EAChBS,MAAMC,MAAoB,QAAfnD,EAAA+C,EAAIK,SAAS,UAAE,IAAApD,OAAA,EAAAA,EAAEoD,WAAY,IAAIP,SAASQ,IAC7B,WAAlBA,EAAMC,SACRR,EAAMS,YAAYF,E,GAEpB,G,CAING,iBAAAA,GACEjB,KAAKD,qB,CAGPmB,MAAAA,GAEE,IAAIC,EAAWnB,KAAKC,KASpB,MAPiB,cAAbkB,IAA0BA,EAAW,WACxB,eAAbA,IAA2BA,EAAW,KACzB,cAAbA,IAA0BA,EAAW,KACxB,YAAbA,IAAwBA,EAAW,QACtB,cAAbA,IAA0BA,EAAW,WACxB,YAAbA,IAAwBA,EAAW,MAGrCC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2CACHC,OAAO9B,EAAAA,EAAAA,GAAc,CACnB,cACA,gBAAgB0B,IAChBnB,KAAKwB,aAAe,gCAGtBJ,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CACEC,OAAO9B,EAAAA,EAAAA,GAAc,CACnB,+BACAO,KAAKyB,UAAY,2CAEnBC,QAAQ,gBACRC,KAAK,OACLC,MAAM,6BACNC,KAAK,qBAEPT,EAAAA,EAAAA,GAAA,OAAAE,IAAA,2CACEC,OAAO9B,EAAAA,EAAAA,GAAc,CACnB,qBACAO,KAAKyB,UAAY,iCAEnBC,QAAQ,gBACRC,KAAK,OACLC,MAAM,6BACNC,KAAK,U,4ID3GM,kzS","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/assetPath.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/fetchAsset.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-bg-cells/ld-bg-cells.css?tag=ld-bg-cells&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-bg-cells/ld-bg-cells.tsx"],"sourcesContent":["import { Build } from '@stencil/core'\n\nlet missingAssetPathWarningDisplayed = false\n\n/**\n * Reads components asset path config from meta tag or global variable.\n * This is a workaround until the following issues are resolved:\n * https://github.com/ionic-team/stencil/issues/3470\n * https://github.com/ionic-team/stencil-ds-output-targets/issues/186\n */\nexport const getAssetPath = (path: string) => {\n  // Get asset path from meta tag if available\n  const metaLdAssetPath = document.head.querySelector<HTMLMetaElement>(\n    'meta[data-ld-asset-path]'\n  )?.dataset.ldAssetPath\n  // Get asset path from window if available\n  const windowLdAssetPath = window.__LD_ASSET_PATH__\n  // Uses CDN as fallback if no asset path is set\n  const version = '5.8.1'\n  const cdnAssetPath = `https://cdn.jsdelivr.net/npm/@emdgroup-liquid/liquid${\n    '@' + version\n  }/dist/liquid/`\n\n  const assetBasePath = Build.isTesting\n    ? '/dist/liquid'\n    : metaLdAssetPath || windowLdAssetPath || cdnAssetPath || '/'\n\n  // Display warning if assets are fetched from CDN. This is only displayed once.\n  if (\n    assetBasePath.startsWith('https://cdn.jsdelivr.net/npm/') &&\n    !missingAssetPathWarningDisplayed\n  ) {\n    missingAssetPathWarningDisplayed = true\n    console.warn(\n      `Fetching Liquid Oxygen assets from jsDelivr CDN.\\n\\nWe recommend bundling Liquid Oxygen assets with your application and setting the asset path accordingly.\\n\\nFor more information see the documentation:\\nhttps://liquid.merck.design/liquid/guides/component-assets/`\n    )\n  }\n\n  let assetPath = path\n\n  if (path.startsWith('./')) {\n    assetPath = path.substring(2)\n  }\n\n  if (!assetBasePath.endsWith('/')) {\n    assetPath = '/' + assetPath\n  }\n\n  return assetBasePath + assetPath\n}\n","import { getAssetPath } from './assetPath'\n\nconst assetCache = {}\nconst requestCache = {}\n\nexport async function fetchPattern(patternName: string): Promise<string> {\n  return await fetchAsset(`${patternName}-cell.svg`)\n}\n\nexport async function fetchIcon(iconName: string): Promise<string> {\n  return await fetchAsset(`${iconName}.svg`)\n}\n\nexport async function fetchAsset(path: string): Promise<string> {\n  if (assetCache[path]) {\n    return assetCache[path]\n  }\n\n  if (!requestCache[path]) {\n    requestCache[path] = fetch(`${getAssetPath('./assets')}/${path}`)\n      .then((resp) => resp.text())\n      .catch((err) => {\n        console.error(`\"${path}\" could not be fetched`, err)\n        return ''\n      })\n  }\n\n  const content = await requestCache[path]\n  assetCache[path] = content\n\n  return content\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host,\n.ld-bg-cells {\n  --ld-bg-cells-bg-col: var(--ld-thm-secondary);\n  --ld-bg-cells-layer-col: var(--ld-thm-primary);\n  --ld-bg-cells-layer-translation-x: -80%;\n  --ld-bg-cells-layer-translation-y: -6%;\n  --ld-bg-cells-layer-size: 260%;\n  --ld-bg-cells-layer-rotation: 0deg;\n  --ld-bg-cells-secondary-layer-col: transparent;\n  --ld-bg-cells-secondary-layer-translation-x: 0%;\n  --ld-bg-cells-secondary-layer-translation-y: 0%;\n  --ld-bg-cells-secondary-layer-size: 150%;\n  --ld-bg-cells-secondary-layer-rotation: 0deg;\n\n  --ld-bg-cells-base-size-factor: 0.39;\n\n  --ld-bg-cells-layer-size-clamped: clamp(\n    50%,\n    var(--ld-bg-cells-layer-size),\n    800%\n  );\n  --ld-bg-cells-layer-size-normalized: calc(\n    var(--ld-bg-cells-layer-size-clamped) * var(--ld-bg-cells-base-size-factor)\n  );\n  --ld-bg-cells-secondary-layer-size-clamped: clamp(\n    50%,\n    var(--ld-bg-cells-secondary-layer-size),\n    800%\n  );\n  --ld-bg-cells-secondary-layer-size-normalized: calc(\n    var(--ld-bg-cells-secondary-layer-size-clamped) *\n      var(--ld-bg-cells-base-size-factor)\n  );\n\n  --ld-bg-cells-layer-animation-translate: 0.3%;\n  --ld-bg-cells-layer-animation-scale: 4%;\n  --ld-bg-cells-layer-animation-rotate: 6deg;\n  --ld-bg-cells-layer-animation-speed: 1;\n\n  --ld-bg-cells-layer-animation-dur: calc(\n    126s / var(--ld-bg-cells-layer-animation-speed)\n  );\n  --ld-bg-cells-secondary-layer-animation-dur: calc(\n    84s / var(--ld-bg-cells-layer-animation-speed)\n  );\n\n  background: var(--ld-bg-cells-bg-col);\n  position: relative;\n  display: block;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n/* We are scaling the layer up to 1000% to smoothen calculations for the transformation.\n  Original size leads to rounding errors and therefore jumping of the pattern. */\n.ld-bg-cells__layer,\n.ld-bg-cells__secondary-layer {\n  inset: 0;\n  position: absolute;\n  min-width: 1000%;\n  min-height: 1000%;\n  top: 50%;\n  left: 50%;\n}\n\n.ld-bg-cells__layer {\n  color: var(--ld-bg-cells-layer-col);\n  transform: translate(\n      calc((var(--ld-bg-cells-layer-translation-x) / 10) - 50%),\n      calc((var(--ld-bg-cells-layer-translation-y) / 10) - 50%)\n    )\n    scale(var(--ld-bg-cells-layer-size-normalized))\n    rotate(var(--ld-bg-cells-layer-rotation));\n\n  &--animated {\n    animation: layer-animate var(--ld-bg-cells-layer-animation-dur) ease-in-out\n      infinite;\n\n    @media (prefers-reduced-motion: reduce) {\n      animation: none;\n    }\n  }\n}\n\n.ld-bg-cells__secondary-layer {\n  color: var(--ld-bg-cells-secondary-layer-col);\n  transform: translate(\n      calc((var(--ld-bg-cells-secondary-layer-translation-x) / 10) - 50%),\n      calc((var(--ld-bg-cells-secondary-layer-translation-y) / 10) - 50%)\n    )\n    scale(var(--ld-bg-cells-secondary-layer-size-normalized))\n    rotate(var(--ld-bg-cells-secondary-layer-rotation));\n\n  &--animated {\n    animation: secondary-layer-animate\n      var(--ld-bg-cells-secondary-layer-animation-dur) ease-in-out infinite\n      reverse;\n\n    @media (prefers-reduced-motion: reduce) {\n      animation: none;\n    }\n  }\n}\n\n.ld-bg-cells {\n  :host(&--three-layers),\n  &--three-layers {\n    --ld-bg-cells-layer-col: var(--ld-thm-primary);\n    --ld-bg-cells-secondary-layer-col: var(--ld-col-vy);\n    --ld-bg-cells-layer-size: 390%;\n    --ld-bg-cells-layer-translation-x: -50%;\n    --ld-bg-cells-layer-rotation: -30deg;\n    --ld-bg-cells-secondary-layer-size: 580%;\n    --ld-bg-cells-secondary-layer-translation-x: -20%;\n    --ld-bg-cells-secondary-layer-translation-y: -100%;\n  }\n\n  :host(&--bioreliance),\n  &--bioreliance {\n    --ld-bg-cells-base-size-factor: 0.46;\n    --ld-bg-cells-bg-col: var(--ld-col-vg);\n    --ld-bg-cells-layer-col: var(--ld-col-rp);\n    --ld-bg-cells-secondary-layer-col: transparent;\n    --ld-bg-cells-layer-translation-x: -89%;\n    --ld-bg-cells-layer-translation-y: 48%;\n    --ld-bg-cells-layer-size: 297%;\n  }\n\n  :host(&--f),\n  &--f {\n    --ld-bg-cells-base-size-factor: 0.49;\n    --ld-bg-cells-layer-translation-x: -79%;\n    --ld-bg-cells-layer-translation-y: 24%;\n    --ld-bg-cells-layer-size: 240%;\n  }\n\n  :host(&--mdo),\n  &--mdo {\n    --ld-bg-cells-base-size-factor: 0.2;\n    --ld-bg-cells-bg-col: var(--ld-col-rb);\n    --ld-bg-cells-layer-col: var(--ld-col-sy);\n    --ld-bg-cells-secondary-layer-col: var(--ld-col-sb);\n    --ld-bg-cells-layer-translation-x: -107%;\n    --ld-bg-cells-layer-translation-y: -32%;\n    --ld-bg-cells-layer-size: 147%;\n    --ld-bg-cells-layer-rotation: 145deg;\n    --ld-bg-cells-secondary-layer-translation-x: 133%;\n    --ld-bg-cells-secondary-layer-translation-y: 46%;\n    --ld-bg-cells-secondary-layer-size: 150%;\n    --ld-bg-cells-secondary-layer-rotation: 145deg;\n  }\n\n  :host(&--millipore),\n  &--millipore {\n    --ld-bg-cells-base-size-factor: 0.43;\n    --ld-bg-cells-bg-col: var(--ld-col-rb);\n    --ld-bg-cells-layer-col: var(--ld-col-vy);\n    --ld-bg-cells-secondary-layer-col: transparent;\n    --ld-bg-cells-layer-translation-x: -80%;\n    --ld-bg-cells-layer-translation-y: 43%;\n    --ld-bg-cells-layer-size: 230%;\n  }\n\n  :host(&--milliq),\n  &--milliq {\n    --ld-bg-cells-base-size-factor: 0.23;\n    --ld-bg-cells-bg-col: var(--ld-col-vc);\n    --ld-bg-cells-layer-col: var(--ld-col-rp);\n    --ld-bg-cells-secondary-layer-col: transparent;\n    --ld-bg-cells-layer-translation-x: -70%;\n    --ld-bg-cells-layer-translation-y: 100%;\n    --ld-bg-cells-layer-size: 420%;\n  }\n\n  :host(&--o),\n  &--o {\n    --ld-bg-cells-base-size-factor: 0.33;\n    --ld-bg-cells-layer-translation-x: -75%;\n    --ld-bg-cells-layer-translation-y: -21%;\n    --ld-bg-cells-layer-size: 190%;\n  }\n\n  :host(&--supelco),\n  &--supelco {\n    --ld-bg-cells-base-size-factor: 0.66;\n    --ld-bg-cells-bg-col: var(--ld-col-rg);\n    --ld-bg-cells-layer-col: var(--ld-col-vy);\n    --ld-bg-cells-secondary-layer-col: transparent;\n    --ld-bg-cells-layer-translation-x: -59%;\n    --ld-bg-cells-layer-translation-y: 43%;\n    --ld-bg-cells-layer-size: 190%;\n  }\n\n  :host(&--safc),\n  &--safc {\n    --ld-bg-cells-base-size-factor: 0.34;\n    --ld-bg-cells-bg-col: var(--ld-col-vm);\n    --ld-bg-cells-layer-col: var(--ld-col-vy);\n    --ld-bg-cells-secondary-layer-col: transparent;\n    --ld-bg-cells-layer-translation-x: -122%;\n    --ld-bg-cells-layer-translation-y: 5%;\n    --ld-bg-cells-layer-size: 362%;\n  }\n\n  :host(&--sigma-aldrich),\n  &--sigma-aldrich {\n    --ld-bg-cells-base-size-factor: 0.53;\n    --ld-bg-cells-bg-col: var(--ld-col-rr);\n    --ld-bg-cells-layer-col: var(--ld-col-vy);\n    --ld-bg-cells-secondary-layer-col: transparent;\n    --ld-bg-cells-layer-translation-x: -124%;\n    --ld-bg-cells-layer-translation-y: -2%;\n    --ld-bg-cells-layer-size: 460%;\n  }\n\n  :host(&--t),\n  &--t {\n    --ld-bg-cells-base-size-factor: 0.47;\n    --ld-bg-cells-layer-translation-x: -108%;\n    --ld-bg-cells-layer-translation-y: 72%;\n    --ld-bg-cells-layer-size: 312%;\n  }\n\n  :host(&--tile),\n  &--tile {\n    --ld-bg-cells-base-size-factor: 0.31;\n    --ld-bg-cells-layer-translation-x: -93%;\n    --ld-bg-cells-layer-translation-y: -1%;\n    --ld-bg-cells-layer-size: 340%;\n  }\n}\n\n@keyframes layer-animate {\n  0%,\n  100% {\n    transform: translate(\n        calc(\n          (var(--ld-bg-cells-layer-translation-x) / 10) -\n            (50% - var(--ld-bg-cells-layer-animation-translate))\n        ),\n        calc(\n          (var(--ld-bg-cells-layer-translation-y) / 10) -\n            (50% - var(--ld-bg-cells-layer-animation-translate) / 2)\n        )\n      )\n      scale(calc(var(--ld-bg-cells-layer-size-normalized)))\n      rotate(calc(var(--ld-bg-cells-layer-rotation)));\n  }\n  25% {\n    transform: translate(\n        calc(\n          (\n            (var(--ld-bg-cells-layer-translation-x) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate))\n          )\n        ),\n        calc(\n          (\n            (var(--ld-bg-cells-layer-translation-y) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate) / 2)\n          )\n        )\n      )\n      scale(\n        calc(\n          var(--ld-bg-cells-layer-size-normalized) +\n            var(--ld-bg-cells-layer-animation-scale)\n        )\n      )\n      rotate(\n        calc(\n          var(--ld-bg-cells-layer-rotation) -\n            var(--ld-bg-cells-layer-animation-rotate)\n        )\n      );\n  }\n  50% {\n    transform: translate(\n        calc(\n          (\n            (var(--ld-bg-cells-layer-translation-x) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate) / 2)\n          )\n        ),\n        calc(\n          (\n            (var(--ld-bg-cells-layer-translation-y) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate))\n          )\n        )\n      )\n      scale(calc(var(--ld-bg-cells-layer-size-normalized)))\n      rotate(calc(var(--ld-bg-cells-layer-rotation)));\n  }\n  75% {\n    transform: translate(\n        calc(\n          (\n            (var(--ld-bg-cells-layer-translation-x) / 10) -\n              (50% - var(--ld-bg-cells-layer-animation-translate) / 2)\n          )\n        ),\n        calc(\n          (\n            (var(--ld-bg-cells-layer-translation-y) / 10) -\n              (50% - var(--ld-bg-cells-layer-animation-translate))\n          )\n        )\n      )\n      scale(\n        calc(\n          var(--ld-bg-cells-layer-size-normalized) -\n            var(--ld-bg-cells-layer-animation-scale)\n        )\n      )\n      rotate(\n        calc(\n          var(--ld-bg-cells-layer-rotation) +\n            var(--ld-bg-cells-layer-animation-rotate)\n        )\n      );\n  }\n}\n\n@keyframes secondary-layer-animate {\n  0%,\n  100% {\n    transform: translate(\n        calc(\n          (var(--ld-bg-cells-secondary-layer-translation-x) / 10) -\n            (50% - var(--ld-bg-cells-layer-animation-translate))\n        ),\n        calc(\n          (var(--ld-bg-cells-secondary-layer-translation-y) / 10) -\n            (50% - var(--ld-bg-cells-layer-animation-translate) / 2)\n        )\n      )\n      scale(calc(var(--ld-bg-cells-secondary-layer-size-normalized)))\n      rotate(calc(var(--ld-bg-cells-secondary-layer-rotation)));\n  }\n  25% {\n    transform: translate(\n        calc(\n          (\n            (var(--ld-bg-cells-secondary-layer-translation-x) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate))\n          )\n        ),\n        calc(\n          (\n            (var(--ld-bg-cells-secondary-layer-translation-y) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate) / 2)\n          )\n        )\n      )\n      scale(\n        calc(\n          var(--ld-bg-cells-secondary-layer-size-normalized) +\n            var(--ld-bg-cells-layer-animation-scale)\n        )\n      )\n      rotate(\n        calc(\n          var(--ld-bg-cells-secondary-layer-rotation) -\n            var(--ld-bg-cells-layer-animation-rotate)\n        )\n      );\n  }\n  50% {\n    transform: translate(\n        calc(\n          (\n            (var(--ld-bg-cells-secondary-layer-translation-x) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate) / 2)\n          )\n        ),\n        calc(\n          (\n            (var(--ld-bg-cells-secondary-layer-translation-y) / 10) -\n              (50% + var(--ld-bg-cells-layer-animation-translate))\n          )\n        )\n      )\n      scale(calc(var(--ld-bg-cells-secondary-layer-size-normalized)))\n      rotate(calc(var(--ld-bg-cells-secondary-layer-rotation)));\n  }\n  75% {\n    transform: translate(\n        calc(\n          (\n            (var(--ld-bg-cells-secondary-layer-translation-x) / 10) -\n              (50% - var(--ld-bg-cells-layer-animation-translate) / 2)\n          )\n        ),\n        calc(\n          (\n            (var(--ld-bg-cells-secondary-layer-translation-y) / 10) -\n              (50% - var(--ld-bg-cells-layer-animation-translate))\n          )\n        )\n      )\n      scale(\n        calc(\n          var(--ld-bg-cells-secondary-layer-size-normalized) -\n            var(--ld-bg-cells-layer-animation-scale)\n        )\n      )\n      rotate(\n        calc(\n          var(--ld-bg-cells-secondary-layer-rotation) +\n            var(--ld-bg-cells-layer-animation-rotate)\n        )\n      );\n  }\n}\n","import { Build, Component, Element, h, Host, Prop, Watch } from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { fetchPattern } from '../../utils/fetchAsset'\n\nexport type CellType =\n  | 'bioreliance'\n  | 'f' // Functional\n  | 'functional'\n  | 'hexagon' // Synthetic\n  | 'mdo'\n  | 'millipore'\n  | 'milliq'\n  | 'o' // Organic\n  | 'organic'\n  | 'plastic'\n  | 'qa-x2f-qc' // Supelco\n  | 'safc'\n  | 'sigma-aldrich'\n  | 'supelco'\n  | 'synthetic'\n  | 't' // Technical\n  | 'technical'\n  | 'tile' // Plastic\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part layer - the primary cell layer\n * @part secondary-layer - the secondary cell layer\n */\n@Component({\n  assetsDirs: ['assets'],\n  tag: 'ld-bg-cells',\n  styleUrl: 'ld-bg-cells.css',\n  shadow: true,\n})\nexport class LdBgCells {\n  @Element() el: HTMLElement\n\n  /** Cells pattern */\n  @Prop() type?: CellType = 'hexagon'\n\n  /** Use 3 color layers */\n  @Prop() threeLayers? = false\n\n  /** Animate the pattern */\n  @Prop() animated? = false\n\n  @Watch('type')\n  private async loadPatternPathData(): Promise<void> {\n    if ((!Build.isBrowser && !Build.isTesting) || !this.type) {\n      return\n    }\n\n    const patternString = await fetchPattern(this.type)\n    this.el.shadowRoot.querySelectorAll('svg').forEach((layer) => {\n      const div = document.createElement('div')\n      div.innerHTML = patternString\n      Array.from(div.children[0]?.children || []).forEach((child) => {\n        if (child.tagName !== 'script') {\n          layer.appendChild(child)\n        }\n      })\n    })\n  }\n\n  componentWillLoad() {\n    this.loadPatternPathData()\n  }\n\n  render() {\n    // Handle aliases (for backward compatibility).\n    let cellType = this.type\n\n    if (cellType === 'qa-x2f-qc') cellType = 'supelco'\n    if (cellType === 'functional') cellType = 'f'\n    if (cellType === 'technical') cellType = 't'\n    if (cellType === 'plastic') cellType = 'tile'\n    if (cellType === 'synthetic') cellType = 'hexagon'\n    if (cellType === 'organic') cellType = 'o'\n\n    return (\n      <Host\n        class={getClassNames([\n          'ld-bg-cells',\n          `ld-bg-cells--${cellType}`,\n          this.threeLayers && 'ld-bg-cells--three-layers',\n        ])}\n      >\n        <svg\n          class={getClassNames([\n            'ld-bg-cells__secondary-layer',\n            this.animated && 'ld-bg-cells__secondary-layer--animated',\n          ])}\n          viewBox=\"0 0 8000 8000\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          part=\"secondary-layer\"\n        ></svg>\n        <svg\n          class={getClassNames([\n            'ld-bg-cells__layer',\n            this.animated && 'ld-bg-cells__layer--animated',\n          ])}\n          viewBox=\"0 0 8000 8000\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          part=\"layer\"\n        ></svg>\n      </Host>\n    )\n  }\n}\n"],"names":["missingAssetPathWarningDisplayed","getAssetPath","path","metaLdAssetPath","_a","document","head","querySelector","dataset","ldAssetPath","windowLdAssetPath","window","__LD_ASSET_PATH__","assetBasePath","startsWith","console","warn","assetPath","substring","endsWith","assetCache","requestCache","async","fetchPattern","patternName","fetchAsset","fetchIcon","iconName","fetch","then","resp","text","catch","err","error","content","getClassNames","classNames","filter","className","join","LdBgCells","loadPatternPathData","this","type","patternString","el","shadowRoot","querySelectorAll","forEach","layer","div","createElement","innerHTML","Array","from","children","child","tagName","appendChild","componentWillLoad","render","cellType","h","Host","key","class","threeLayers","animated","viewBox","fill","xmlns","part"],"sourceRoot":""}