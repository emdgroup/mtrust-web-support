{"version":3,"file":"static/js/6846.d460a4c2.chunk.js","mappings":"iIACaA,EAAkBC,GAC7BA,GAA2C,UAAtBA,C,iBCFvB,SAASC,EAAQC,GACf,YAAiBC,IAAVD,GAAiC,OAAVA,GAA4B,UAAVA,CAClD,C,SAEgBE,IACd,MAAMC,EAAwB,IAAIC,IAAI,CACpC,QACA,KACA,QACA,OACA,UAN4BC,UAAAC,OAAA,QAAAL,IAAAI,UAAA,GAAAA,UAAA,GAA+B,KAWvDE,EAAoB,CAAC,EAC3B,IAAK,MAAMC,KAAQC,KAAKC,GAAGC,WAAY,CACrC,GAAIR,EAAsBS,IAAIJ,EAAKK,OAASd,EAAQS,EAAKR,OACvD,SAEF,MAAMc,EAA8B,KAAfN,EAAKR,OAAsBQ,EAAKR,MACrDO,EAAkBC,EAAKK,MAAQC,C,CAIjCL,KAAKM,iBAAmBR,EAGxB,MAiBMS,EAAW,IAAIC,kBAjBHC,IAEhB,IAAK,MAAMC,KAAYD,EAAe,CACpC,MAAM,cAAEE,GAAkBD,EAC1B,IAAKhB,EAAsBS,IAAIQ,GAAgB,CAC7C,MAAMC,EAAYZ,KAAKC,GAAGY,aAAaF,GACnCrB,EAAQsB,UACHZ,KAAKM,iBAAiBK,GAE7BX,KAAKM,iBAAiBK,GAAiBC,C,EAM7CZ,KAAKM,iBAAgBQ,OAAAC,OAAA,GAAQf,KAAKM,iBAAkB,IAStD,OANAC,EAASS,QAAQhB,KAAKC,GAAI,CACxBgB,SAAS,EACTC,WAAW,EACXhB,YAAY,IAGPK,CACT,C,wDChDaY,EAAiBC,GAC5BA,EAAWC,QAAQC,GAAcA,IAAWC,KAAK,I,2FCNnD,MCeaC,EAAM,M,+BAoET,KAAAC,YAAeC,KACjB1B,KAAK2B,WAAYvC,EAAAA,EAAAA,GAAeY,KAAKC,GAAG2B,gBAC1CF,EAAGG,gB,yNA3BP,gBAAMC,GACJ9B,KAAK+B,OAAOC,O,CAGdC,iBAAAA,GACEjC,KAAKkC,mBAAqBzC,EAAAA,EAAgB0C,KAAKnC,KAAM,CACnD,YACA,W,CAIJoC,iBAAAA,GACEpC,KAAKC,GAAGoC,iBAAiB,QAASrC,KAAKyB,YAAa,CAClDa,SAAS,G,CAIbC,oBAAAA,GACEvC,KAAKC,GAAGuC,oBAAoB,QAASxC,KAAKyB,YAAa,CACrDa,SAAS,IAGPtC,KAAKkC,oBAAoBlC,KAAKkC,mBAAmBO,Y,CAUvDC,MAAAA,GACE,MAAMC,GAAKxB,EAAAA,EAAAA,GAAc,CACvB,UACAnB,KAAK4C,SAAW,oBAAoB5C,KAAK4C,UACzC5C,KAAK2B,UAAY,sBAGnB,OACEkB,EAAAA,EAAAA,GAAA,IAAA/B,OAAAC,OAAA,CAAA+B,IAAA,4CACM9C,KAAKM,iBAAgB,CACzByC,QAAS/C,KAAKyB,YACduB,MAAOL,EAAE,gBAEP3C,KAAK2B,WAAYvC,EAAAA,EAAAA,GAAeY,KAAKC,GAAG2B,cACpC,YACApC,EAENyD,IAAMA,GAASjD,KAAK+B,OAASkB,EAC7BC,OAAQlD,KAAKkD,OACbC,IAAqB,WAAhBnD,KAAKkD,OAAsB,2BAAwB1D,EACxDmC,SAAU3B,KAAK2B,SACfyB,KAAK,mBACLC,SAAUrD,KAAKsD,cAEfT,EAAAA,EAAAA,GAAA,QAAAC,IAAA,6C,wCDlHU,kwE","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/ariaDisabled.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/cloneAttributes.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-link/ld-link.css?tag=ld-link&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-link/ld-link.tsx"],"sourcesContent":["// 'true', '1', 'yolo' etc. correspond to an aria disabled element, but not 'false'.\nexport const isAriaDisabled = (ariaDisabledValue: string | undefined) =>\n  ariaDisabledValue && ariaDisabledValue !== 'false'\n","function isFalsy(value: string | null | undefined) {\n  return value === undefined || value === null || value === 'false'\n}\n\nexport function cloneAttributes(attributesToIgnore: string[] = []) {\n  const attributesToIgnoreSet = new Set([\n    'style',\n    'id',\n    'class',\n    'slot',\n    'part',\n    ...attributesToIgnore,\n  ])\n\n  // Get attributes not in props.\n  const attributesToClone = {}\n  for (const attr of this.el.attributes) {\n    if (attributesToIgnoreSet.has(attr.name) || isFalsy(attr.value)) {\n      continue\n    }\n    const valueToClone = attr.value === '' ? true : attr.value\n    attributesToClone[attr.name] = valueToClone\n  }\n\n  // Update cloned attributes state.\n  this.clonedAttributes = attributesToClone\n\n  // Set up attributes observer.\n  const callback = (mutationsList) => {\n    // Update cloned attributes state.\n    for (const mutation of mutationsList) {\n      const { attributeName } = mutation\n      if (!attributesToIgnoreSet.has(attributeName)) {\n        const attrValue = this.el.getAttribute(attributeName)\n        if (isFalsy(attrValue)) {\n          delete this.clonedAttributes[attributeName]\n        } else {\n          this.clonedAttributes[attributeName] = attrValue\n        }\n      }\n    }\n\n    // Trigger state update.\n    this.clonedAttributes = { ...this.clonedAttributes }\n  }\n  const observer = new MutationObserver(callback)\n  observer.observe(this.el, {\n    subtree: false,\n    childList: false,\n    attributes: true,\n  })\n\n  return observer\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",".ld-link {\n  --ld-link-col: var(--ld-thm-primary);\n  --ld-link-gap: 0.3em;\n  --ld-link-chevron-gap: 0em;\n  --ld-link-chevron-width: 0.135em;\n\n  align-items: baseline;\n  color: var(--ld-link-col);\n  cursor: pointer;\n  gap: var(--ld-link-gap);\n  font-family: var(--ld-font-body);\n  font-size: inherit;\n  font-weight: 700;\n  line-height: inherit;\n  text-decoration: none;\n  touch-action: manipulation;\n\n  &:not(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    &:hover {\n      --ld-link-col: var(--ld-thm-primary-hover);\n    }\n\n    &:focus:focus-visible {\n      --ld-link-col: var(--ld-thm-primary-focus);\n    }\n\n    &:active {\n      --ld-link-col: var(--ld-thm-primary-active);\n    }\n  }\n\n  &:where(\n      [aria-disabled]:where(:not([aria-disabled=''], [aria-disabled='false']))\n    ) {\n    --ld-link-col: var(--ld-thm-primary);\n    cursor: default;\n    opacity: 0.3;\n  }\n\n  > ld-icon,\n  > .ld-icon,\n  > ::slotted(ld-icon),\n  > ::slotted(.ld-icon) {\n    transform: translateY(10%);\n  }\n}\n\n/* custom icon arrow-right */\n.ld-link--chevron-start,\n.ld-link--chevron-end {\n  display: inline-flex;\n\n  &::before,\n  &::after {\n    content: '';\n    background-color: var(--ld-link-col);\n    border-radius: 99rem;\n    display: block;\n    flex-shrink: 0;\n    height: 0.5em;\n    transform-origin: right;\n    width: var(--ld-link-chevron-width);\n  }\n}\n\n.ld-link--chevron-start {\n  margin-left: calc(0.5 * var(--ld-link-chevron-gap));\n\n  &::before,\n  &::after {\n    order: -1;\n  }\n\n  &::before {\n    transform: translateX(\n        calc(0.5 * (var(--ld-link-gap) - var(--ld-link-chevron-gap)) + 50%)\n      )\n      translateY(-65%) rotate(-40deg);\n  }\n  &::after {\n    transform: translateX(\n        calc(-0.5 * var(--ld-link-gap) - 0.5 * var(--ld-link-chevron-gap) - 50%)\n      )\n      translateY(20%) rotate(40deg);\n  }\n}\n.ld-link--chevron-end {\n  margin-right: calc(0.5 * var(--ld-link-chevron-gap));\n\n  &::before,\n  &::after {\n    order: 1;\n  }\n\n  &::before {\n    transform: translateX(\n        calc(0.5 * (var(--ld-link-gap) + var(--ld-link-chevron-gap)) + 50%)\n      )\n      translateY(-65%) rotate(-40deg);\n  }\n  &::after {\n    transform: translateX(\n        calc(-0.5 * var(--ld-link-gap) + 0.5 * var(--ld-link-chevron-gap) - 50%)\n      )\n      translateY(20%) rotate(40deg);\n  }\n}\n","import { Component, Element, h, Method, Prop, State } from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { cloneAttributes } from '../../utils/cloneAttributes'\nimport { isAriaDisabled } from '../../utils/ariaDisabled'\n\n/**\n * @part anchor - the link anchor\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-link',\n  styleUrl: 'ld-link.css',\n  shadow: true,\n})\nexport class LdLink implements ClonesAttributes, InnerFocusable {\n  @Element() el: HTMLLdLinkElement\n  private anchor: HTMLAnchorElement\n  private attributesObserver: MutationObserver\n\n  /** Displays chevron icon. */\n  @Prop() chevron?: 'start' | 'end'\n\n  /**\n   * The disabled attribute sets `aria-disabled=\"true\"`\n   * on the rendered anchor element.\n   */\n  @Prop() disabled?: boolean\n\n  /** Causes the browser to treat the linked URL as a download. */\n  @Prop({ reflect: true }) download?: boolean | string\n\n  /** The URL that the hyperlink points to. */\n  @Prop({ reflect: true }) href?: string\n\n  /** Hints at the human language of the linked URL. */\n  @Prop({ reflect: true }) hreflang?: string\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex?: number\n\n  /** A space-separated list of URLs to ping on link follow. */\n  @Prop() ping?: string\n\n  /** A space-separated list of URLs to ping on link follow. */\n  @Prop() referrerpolicy?: string\n\n  /**\n   * The `target` attributed can be used in conjunction with the `href` attribute.\n   * See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)\n   * for more information on the `target` attribute.\n   */\n  @Prop() target?: '_blank' | '_self' | '_parent' | '_top'\n\n  @State() clonedAttributes\n\n  /** Sets focus on the anchor. */\n  @Method()\n  async focusInner() {\n    this.anchor.focus()\n  }\n\n  componentWillLoad() {\n    this.attributesObserver = cloneAttributes.call(this, [\n      'iconStart',\n      'iconEnd',\n    ])\n  }\n\n  connectedCallback() {\n    this.el.addEventListener('click', this.handleClick, {\n      capture: true,\n    })\n  }\n\n  disconnectedCallback() {\n    this.el.removeEventListener('click', this.handleClick, {\n      capture: true,\n    })\n    /* istanbul ignore if */\n    if (this.attributesObserver) this.attributesObserver.disconnect()\n  }\n\n  private handleClick = (ev: MouseEvent) => {\n    if (this.disabled || isAriaDisabled(this.el.ariaDisabled)) {\n      ev.preventDefault()\n      return\n    }\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-link',\n      this.chevron && `ld-link--chevron-${this.chevron}`,\n      this.disabled && `ld-link--disabled`,\n    ])\n\n    return (\n      <a\n        {...this.clonedAttributes}\n        onClick={this.handleClick}\n        class={cl}\n        aria-disabled={\n          this.disabled || isAriaDisabled(this.el.ariaDisabled)\n            ? 'true'\n            : undefined\n        }\n        ref={(ref) => (this.anchor = ref)}\n        target={this.target}\n        rel={this.target === '_blank' ? 'noreferrer noopener' : undefined}\n        disabled={this.disabled}\n        part=\"anchor focusable\"\n        tabIndex={this.ldTabindex}\n      >\n        <slot></slot>\n      </a>\n    )\n  }\n}\n"],"names":["isAriaDisabled","ariaDisabledValue","isFalsy","value","undefined","cloneAttributes","attributesToIgnoreSet","Set","arguments","length","attributesToClone","attr","this","el","attributes","has","name","valueToClone","clonedAttributes","observer","MutationObserver","mutationsList","mutation","attributeName","attrValue","getAttribute","Object","assign","observe","subtree","childList","getClassNames","classNames","filter","className","join","LdLink","handleClick","ev","disabled","ariaDisabled","preventDefault","focusInner","anchor","focus","componentWillLoad","attributesObserver","call","connectedCallback","addEventListener","capture","disconnectedCallback","removeEventListener","disconnect","render","cl","chevron","h","key","onClick","class","ref","target","rel","part","tabIndex","ldTabindex"],"sourceRoot":""}