{"version":3,"file":"static/js/2978.06ecdc12.chunk.js","mappings":"sJAWA,IAAIA,EAAY,E,MAWHC,EAAM,MALnBC,WAAAA,CAAAC,I,8DAWU,KAAAC,YAAc,WAAWJ,IAuBzB,KAAAK,kBAAqBC,IAC3BA,EAAGC,2BACH,MAAMC,EAAeF,EAAGG,OACxBC,KAAKC,aACLD,KAAKE,gBAAgBJ,EAAaK,IAClCH,KAAKI,YAAYC,KAAKP,EAAaK,GAAG,C,CA1BhCF,UAAAA,G,MAIwC,QAD9CK,EAAAC,MAAMC,KAAKR,KAAKS,GAAGC,iBAAiB,WACjCC,MAAMC,GAAQA,EAAIC,aAAa,qBAAY,IAAAP,GAAAA,EAC1CQ,gBAAgB,W,CAGdZ,eAAAA,CAAgBa,G,QAEtB,MAAMC,EAAYT,MAAMC,KAAKR,KAAKS,GAAGC,iBAAiB,gBAGC,QADvDJ,EAAAU,EACGL,MAAMM,IAAcA,EAASJ,aAAa,mBAAU,IAAAP,GAAAA,EACnDY,aAAa,cAAUC,GAG8C,QADzEC,EAAAJ,EACGL,MAAMM,GAAaA,EAASI,aAAa,qBAAuBN,WAAM,IAAAK,GAAAA,EACrEN,gBAAgB,S,CAatB,eAAMQ,CAAUC,GACd,MAAMC,EACkB,kBAAfD,EACHvB,KAAKS,GAAGC,iBAAiB,UAAUa,GACnCvB,KAAKS,GAAGgB,cAAc,UAAUF,KAEtC,IAAKC,EACH,MAAM,IAAIE,MACR,8BACwB,kBAAfH,EAA0B,QAAU,QACnB,kBAAfA,EAA0BA,EAAa,IAAIA,SAIxDC,EAAkCG,Q,CAGtCC,kBAAAA,GAGE,IAAIC,EACJ7B,KAAKS,GAAGC,iBAAiB,UAAUoB,SAAQ,CAAClB,EAAKmB,KAC/CnB,EAAIT,GAAK,GAAGH,KAAKN,mBAAmBqC,IAChCnB,EAAIoB,WACNH,EAAgBE,E,IAGpB/B,KAAKS,GAAGC,iBAAiB,eAAeoB,SAAQ,CAACb,EAAUc,KACzDd,EAASC,aACP,kBACA,GAAGlB,KAAKN,mBAAmBqC,KAEzBF,IAAkBE,EACpBd,EAASH,gBAAgB,UAEzBG,EAASC,aAAa,SAAU,O,IAKtCe,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2CAACC,cAAerC,KAAKL,kBAAmB2C,MAAM,YACjDJ,EAAAA,EAAAA,GAAA,QAAAE,IAAA,6C,wCCxGgB,E","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-tabs/ld-tabs.tsx","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-tabs/ld-tabs.shadow.css?tag=ld-tabs&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n} from '@stencil/core'\nimport { LdTab } from './ld-tab/ld-tab'\n\nlet tabsCount = 0\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  tag: 'ld-tabs',\n  styleUrl: 'ld-tabs.shadow.css',\n  shadow: true,\n})\nexport class LdTabs {\n  @Element() el: HTMLElement\n\n  /** Emitted with the id of the selected tab. */\n  @Event() ldtabchange: EventEmitter<string>\n\n  private idDescriber = `ld-tabs-${tabsCount++}`\n\n  private updateTabs() {\n    // TODO: fix Stencils DOM implementation for unit testing and replace\n    // this.el.querySelector('[selected]')?.removeAttribute('selected')\n    Array.from(this.el.querySelectorAll('ld-tab'))\n      .find((tab) => tab.hasAttribute('selected'))\n      ?.removeAttribute('selected')\n  }\n\n  private updateTabPanels(tabId: string) {\n    // TODO: fix Stencils DOM implementation for unit testing and replace\n    const tabPanels = Array.from(this.el.querySelectorAll('ld-tabpanel'))\n    // this.el.querySelector('ld-tabpanel:not([hidden])')\n    tabPanels\n      .find((tabpanel) => !tabpanel.hasAttribute('hidden'))\n      ?.setAttribute('hidden', undefined)\n    // this.el.querySelector(`[aria-labelledby=\"${tabId}\"]`)\n    tabPanels\n      .find((tabpanel) => tabpanel.getAttribute('aria-labelledby') === tabId)\n      ?.removeAttribute('hidden')\n  }\n\n  private handleLdtabselect = (ev: CustomEvent<undefined>) => {\n    ev.stopImmediatePropagation()\n    const currentLdTab = ev.target as HTMLLdTabElement\n    this.updateTabs()\n    this.updateTabPanels(currentLdTab.id)\n    this.ldtabchange.emit(currentLdTab.id)\n  }\n\n  /** Set selected tab to a certain index */\n  @Method()\n  async switchTab(identifier: number | string) {\n    const newActiveTab =\n      typeof identifier === 'number'\n        ? this.el.querySelectorAll('ld-tab')[identifier]\n        : this.el.querySelector(`ld-tab#${identifier}`)\n\n    if (!newActiveTab) {\n      throw new Error(\n        `Could not find ld-tab with ${\n          typeof identifier === 'number' ? 'index' : 'id'\n        } ${typeof identifier === 'number' ? identifier : `\"${identifier}\"`}.`\n      )\n    }\n\n    ;(newActiveTab as unknown as LdTab).select()\n  }\n\n  componentDidRender() {\n    // Assign ids to tabs and use them in aria-describedby attributes of the corresponding tabpanels.\n    // Memorize the index of the selected tab in order to hide all non-selected tabpanels.\n    let selectedIndex\n    this.el.querySelectorAll('ld-tab').forEach((tab, index) => {\n      tab.id = `${this.idDescriber}-tab-${index}`\n      if (tab.selected) {\n        selectedIndex = index\n      }\n    })\n    this.el.querySelectorAll('ld-tabpanel').forEach((tabpanel, index) => {\n      tabpanel.setAttribute(\n        'aria-labelledby',\n        `${this.idDescriber}-tab-${index}`\n      )\n      if (selectedIndex === index) {\n        tabpanel.removeAttribute('hidden')\n      } else {\n        tabpanel.setAttribute('hidden', 'true')\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Host onLdtabselect={this.handleLdtabselect} class=\"ld-tabs\">\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n"],"names":["tabsCount","LdTabs","constructor","hostRef","idDescriber","handleLdtabselect","ev","stopImmediatePropagation","currentLdTab","target","this","updateTabs","updateTabPanels","id","ldtabchange","emit","_a","Array","from","el","querySelectorAll","find","tab","hasAttribute","removeAttribute","tabId","tabPanels","tabpanel","setAttribute","undefined","_b","getAttribute","switchTab","identifier","newActiveTab","querySelector","Error","select","componentDidRender","selectedIndex","forEach","index","selected","render","h","Host","key","onLdtabselect","class"],"sourceRoot":""}