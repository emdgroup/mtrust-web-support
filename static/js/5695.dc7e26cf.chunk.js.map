{"version":3,"file":"static/js/5695.dc7e26cf.chunk.js","mappings":"iIAKaA,EAAiBC,GAC5BA,EAAWC,QAAQC,GAAcA,IAAWC,KAAK,I,wECNnD,MCcaC,EAAO,M,+BAiBV,KAAAC,YAAc,KACpBC,KAAKC,gBAAkBD,KAAKE,GAAGC,cAAc,iBAC7CH,KAAKI,UAAYJ,KAAKE,GAAGG,YAAYC,MAAM,E,6EALpB,E,cACN,C,CAOnBC,iBAAAA,GACEP,KAAKQ,SAAW,IAAIC,iBAAiBT,KAAKD,aAC1CC,KAAKQ,SAASE,QAAQV,KAAKE,GAAI,CAC7BS,SAAS,EACTC,WAAW,EACXC,YAAY,IAGdb,KAAKD,a,CAGPe,oBAAAA,GAEMd,KAAKQ,UAAUR,KAAKQ,SAASO,Y,CAGnCC,MAAAA,GACE,MAAMC,GAAKxB,EAAAA,EAAAA,GAAc,CACvB,WACAO,KAAKkB,MAAQ,aAAalB,KAAKkB,OAC/BlB,KAAKI,SAAW,sBAChBJ,KAAKmB,YAAc,0BAGrB,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAAAC,IAAA,2CAACC,MAAON,IACTjB,KAAKwB,MAAQxB,KAAKC,iBAClBmB,EAAAA,EAAAA,GAAA,WAASG,MAAM,iBAAiBE,KAAK,OAAOC,KAAM1B,KAAKwB,OACrDJ,EAAAA,EAAAA,GAAA,QAAMM,KAAK,WAGfN,EAAAA,EAAAA,GAAA,QAAAE,IAAA,6C,iFDnEW,i4E","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-badge/ld-badge.css?tag=ld-badge&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-badge/ld-badge.tsx"],"sourcesContent":["/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host,\n.ld-badge {\n  --ld-badge-size-md: 1.0625rem;\n  --ld-badge-size-lg: 1rem;\n  --ld-badge-icon-size-md: 0.5625rem;\n  --ld-badge-icon-size-lg: 0.75rem;\n  --ld-badge-bg-col: var(--ld-thm-primary);\n  --ld-badge-gap-md: var(--ld-sp-6);\n  --ld-badge-gap-lg: var(--ld-sp-8);\n  --ld-badge-padding-block-md: 0.2125rem;\n  --ld-badge-padding-block-lg: 0.25rem;\n  --ld-badge-padding-inline-md: 0.5rem;\n  --ld-badge-padding-inline-lg: 0.625rem;\n\n  align-items: center;\n  background-color: var(--ld-badge-bg-col);\n  border-radius: var(--ld-br-full);\n  box-sizing: border-box;\n  color: var(--ld-col-wht);\n  display: inline-flex;\n  font: var(--ld-typo-body-xs);\n  font-weight: 700;\n  gap: var(--ld-badge-gap-md);\n  justify-content: center;\n  line-height: 1.1;\n  padding-block: var(--ld-badge-padding-block-md);\n  padding-inline: var(--ld-badge-padding-inline-md);\n  position: relative;\n\n  ::slotted(ld-icon),\n  ::slotted(.ld-icon),\n  > ld-icon,\n  > .ld-icon {\n    --ld-icon-size-md: var(--ld-badge-icon-size-md);\n    flex-shrink: 0;\n    margin: 0 calc(-1 * var(--ld-sp-8));\n  }\n\n  &.ld-badge--with-text {\n    &,\n    :host(&) {\n      ::slotted(ld-icon),\n      ::slotted(.ld-icon),\n      > ld-icon,\n      > .ld-icon {\n        margin: 0 auto;\n      }\n    }\n  }\n}\n\n.ld-badge--lg,\n:host(.ld-badge--lg) {\n  font: var(--ld-typo-body-s);\n  font-weight: 700;\n  gap: var(--ld-badge-gap-lg);\n  /* height: var(--ld-badge-size-lg); */\n  line-height: 1.1;\n  padding-block: var(--ld-badge-padding-block-lg);\n  padding-inline: var(--ld-badge-padding-inline-lg);\n\n  ::slotted(ld-icon),\n  ::slotted(.ld-icon),\n  > ld-icon,\n  > .ld-icon {\n    --ld-icon-size-md: var(--ld-badge-icon-size-lg);\n    transform: none;\n  }\n}\n\n.ld-badge--brand-color,\n:host(.ld-badge--brand-color) {\n  background-color: var(--ld-col-wht);\n  color: var(--ld-thm-primary);\n}\n","import { Component, Element, h, Host, Prop, State } from '@stencil/core'\nimport { HTMLStencilElement } from '@stencil/core/internal'\nimport { getClassNames } from '../../utils/getClassNames'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n */\n@Component({\n  assetsDirs: ['assets'],\n  tag: 'ld-badge',\n  styleUrl: 'ld-badge.css',\n  shadow: true,\n})\nexport class LdBadge {\n  @Element() el: HTMLStencilElement\n\n  private observer: MutationObserver\n\n  /** Defines badge custom color */\n  @Prop() brandColor?: boolean\n\n  /** Icon name. */\n  @Prop() icon?: string\n\n  /** The size of the badge, translated in rem */\n  @Prop() size?: 'lg'\n\n  @State() hasCustomIcon = false\n  @State() hasText = false\n\n  private updateState = () => {\n    this.hasCustomIcon = !!this.el.querySelector('[slot=\"icon\"]')\n    this.hasText = !!this.el.textContent.trim()\n  }\n\n  componentWillLoad() {\n    this.observer = new MutationObserver(this.updateState)\n    this.observer.observe(this.el, {\n      subtree: true,\n      childList: true,\n      attributes: false,\n    })\n\n    this.updateState()\n  }\n\n  disconnectedCallback() {\n    /* istanbul ignore if */\n    if (this.observer) this.observer.disconnect()\n  }\n\n  render() {\n    const cl = getClassNames([\n      'ld-badge',\n      this.size && `ld-badge--${this.size}`,\n      this.hasText && 'ld-badge--with-text',\n      this.brandColor && `ld-badge--brand-color`,\n    ])\n\n    return (\n      <Host class={cl}>\n        {(this.icon || this.hasCustomIcon) && (\n          <ld-icon class=\"ld-badge__icon\" part=\"icon\" name={this.icon}>\n            <slot name=\"icon\"></slot>\n          </ld-icon>\n        )}\n        <slot></slot>\n      </Host>\n    )\n  }\n}\n"],"names":["getClassNames","classNames","filter","className","join","LdBadge","updateState","this","hasCustomIcon","el","querySelector","hasText","textContent","trim","componentWillLoad","observer","MutationObserver","observe","subtree","childList","attributes","disconnectedCallback","disconnect","render","cl","size","brandColor","h","Host","key","class","icon","part","name"],"sourceRoot":""}