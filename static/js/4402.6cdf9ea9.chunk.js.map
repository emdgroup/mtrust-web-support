{"version":3,"file":"static/js/4402.6cdf9ea9.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/ariaDisabled.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/focus.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/utils/getClassNames.ts","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-switch/ld-switch.css?tag=ld-switch&encapsulation=shadow","../node_modules/.pnpm/@emdgroup-liquid+liquid@5.14.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@emdgroup-liquid/liquid/dist/esm/src/liquid/components/ld-switch/ld-switch.tsx"],"sourcesContent":["// 'true', '1', 'yolo' etc. correspond to an aria disabled element, but not 'false'.\nexport const isAriaDisabled = (ariaDisabledValue: string | undefined) =>\n  ariaDisabledValue && ariaDisabledValue !== 'false'\n","export const focusableSelector = [\n  'a[href]',\n  'area[href]',\n  'input:not([type=\"hidden\"]):not([type=\"radio\"]):not(:disabled)',\n  'input[type=\"radio\"]:not(:disabled)',\n  'select:not(:disabled)',\n  'textarea:not(:disabled)',\n  'button:not(:disabled)',\n  'iframe',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]',\n  '[tabindex]',\n]\n  .map((selector) => selector + ':not([tabindex^=\"-\"])')\n  .join(',')\n\nexport const getFirstFocusable = (el: HTMLElement): HTMLElement | undefined => {\n  // Directly focusable element.\n  if (el.matches(focusableSelector)) {\n    return el\n  }\n\n  // Slot.\n  if (el.tagName === 'SLOT') {\n    const hostEl = el.getRootNode()['host']\n    const slotName = el.getAttribute('name')\n    const slottedEl = slotName\n      ? hostEl.querySelector(`[slot=\"${el.getAttribute('name')}\"]`)\n      : Array.from(hostEl.children).find(\n          (child) => !(child as HTMLElement).hasAttribute('slot')\n        )\n    if (slottedEl) {\n      return getFirstFocusable(slottedEl)\n    }\n    return null\n  }\n\n  // Web Component.\n  if (el.shadowRoot) {\n    const shadowRootChildren = Array.from(el.shadowRoot.children)\n    for (const child of shadowRootChildren) {\n      const focusable = getFirstFocusable(child as HTMLElement)\n      if (focusable) return focusable\n    }\n  }\n\n  // Element with children.\n  const children = Array.from(el.children)\n  for (const child of children) {\n    const focusable = getFirstFocusable(child as HTMLElement)\n    if (focusable) return focusable\n  }\n\n  return null\n}\n\nexport const isInnerFocusable = <T extends object>(\n  element?: T\n): element is T & InnerFocusable => element && 'focusInner' in element\n\nlet autofocusHandlerTimeout\nexport const registerAutofocus = (autofocus: boolean) => {\n  if (!autofocus || autofocusHandlerTimeout) return\n  autofocusHandlerTimeout = setTimeout(() => {\n    const firstWithAutofocus = Array.from(\n      document.querySelectorAll<HTMLInputElement>('[autofocus]')\n    ).find((el) => !el.disabled)\n    if (isInnerFocusable(firstWithAutofocus)) {\n      firstWithAutofocus.focusInner()\n    }\n  }, 200)\n}\n\nexport const focusInnerOrFocus = (element: HTMLElement) => {\n  if (isInnerFocusable(element)) {\n    element.focusInner()\n  } else {\n    element.focus()\n  }\n}\n","/**\n * Generates a class names string from an array.\n *\n * TODO: memoized functions possible?\n */\nexport const getClassNames = (classNames: (string | false)[]) =>\n  classNames.filter((className) => className).join(' ')\n",":host,\n.ld-switch {\n  /* layout */\n  --ld-switch-item-icon-size: 1.25rem;\n  --ld-switch-item-icon-size-sm: 1rem;\n  --ld-switch-item-icon-size-lg: 1.5rem;\n  --ld-switch-item-icon-margin-x: -0.25rem;\n  --ld-switch-item-icon-margin-x-sm: -0.125rem;\n  --ld-switch-item-icon-margin-x-lg: -0.5rem;\n  --ld-switch-item-justify-content: center;\n  --ld-switch-item-padding-x: 0.875rem;\n  --ld-switch-item-padding-y: 0.625rem;\n  --ld-switch-item-padding-x-sm: 0.625rem;\n  --ld-switch-item-padding-y-sm: 0.4375rem;\n  --ld-switch-item-padding-x-lg: 1.3125rem;\n  --ld-switch-item-padding-y-lg: 0.85rem;\n  --ld-switch-item-gap: 0.875rem;\n  --ld-switch-item-gap-sm: 0.625rem;\n  --ld-switch-item-gap-lg: 1.1875rem;\n  --ld-switch-font: var(--ld-typo-body-m);\n  --ld-switch-font-sm: var(--ld-typo-body-s);\n  --ld-switch-font-lg: var(--ld-typo-body-l);\n\n  /* colors */\n  --ld-switch-bg-col: var(--ld-thm-primary-alpha-low);\n  --ld-switch-bg-col-hover: var(--ld-thm-primary-hover);\n  --ld-switch-bg-col-active: var(--ld-thm-primary-active);\n  --ld-switch-bg-col-focus: var(--ld-thm-primary-focus);\n  --ld-switch-item-col: var(--ld-thm-primary-hover);\n  --ld-switch-item-label-bg-col: var(--ld-col-wht);\n  --ld-switch-selected-col: var(--ld-col-wht);\n  --ld-switch-selected-bg-col: var(--ld-thm-primary);\n\n  legend {\n    position: absolute;\n    width: var(--ld-sp-1);\n    height: var(--ld-sp-1);\n    padding: 0;\n    clip: rect(0, 0, 0, 0);\n    border-width: 0;\n  }\n}\n\n:host {\n  display: inline-flex;\n}\n\n.ld-switch,\n:host fieldset {\n  border: 0;\n  border-radius: var(--ld-br-m);\n  display: inline-grid;\n  grid-auto-columns: minmax(min-content, 1fr);\n  grid-auto-flow: column;\n  margin: 0;\n  min-width: auto;\n  overflow: hidden;\n  padding: 0;\n  position: relative;\n}\n\n.ld-switch--fit-content,\n:host(.ld-switch--fit-content) fieldset {\n  --ld-switch-item-justify-content: flex-start;\n  grid-auto-columns: minmax(0, auto);\n}\n\n:host fieldset {\n  width: 100%;\n  height: 100%;\n}\n\n:host(.ld-switch--sm),\n.ld-switch--sm {\n  --ld-switch-font: var(--ld-switch-font-sm);\n  --ld-switch-item-gap: var(--ld-switch-item-gap-sm);\n  --ld-switch-item-icon-margin-x: var(--ld-switch-item-icon-margin-x-sm);\n  --ld-switch-item-icon-size: var(--ld-switch-item-icon-size-sm);\n  --ld-switch-item-padding-x: var(--ld-switch-item-padding-x-sm);\n  --ld-switch-item-padding-y: var(--ld-switch-item-padding-y-sm);\n}\n\n:host(.ld-switch--lg),\n.ld-switch--lg {\n  --ld-switch-font: var(--ld-switch-font-lg);\n  --ld-switch-item-gap: var(--ld-switch-item-gap-lg);\n  --ld-switch-item-icon-margin-x: var(--ld-switch-item-icon-margin-x-lg);\n  --ld-switch-item-icon-size: var(--ld-switch-item-icon-size-lg);\n  --ld-switch-item-padding-x: var(--ld-switch-item-padding-x-lg);\n  --ld-switch-item-padding-y: var(--ld-switch-item-padding-y-lg);\n}\n\n:host(.ld-switch--brand-color),\n.ld-switch--brand-color {\n  --ld-switch-item-col: var(--ld-col-wht);\n  --ld-switch-item-bg-col: var(--ld-col-wht-alpha-low);\n  --ld-switch-item-label-bg-col: var(--ld-thm-primary);\n\n  --ld-switch-item-bg-col-hover: var(--ld-col-wht-alpha-high);\n  --ld-switch-item-bg-col-active: var(--ld-col-wht-alpha-medium);\n  --ld-switch-item-bg-col-focus: var(--ld-col-wht-alpha-high);\n  --ld-switch-item-bg-col-selected: var(--ld-col-wht);\n\n  --ld-switch-item-col-selected: var(--ld-thm-primary);\n  --ld-switch-item-col-active: var(--ld-switch-item-col-selected);\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core'\nimport { getClassNames } from '../../utils/getClassNames'\nimport { registerAutofocus } from '../../utils/focus'\nimport { isAriaDisabled } from '../../utils/ariaDisabled'\n\n/**\n * @virtualProp ref - reference to component\n * @virtualProp {string | number} key - for tracking the node's identity when working with lists\n * @part fieldset - Container wrapping the legent element and the slot\n * @part legend - The legend element\n */\n\n@Component({\n  tag: 'ld-switch',\n  styleUrl: 'ld-switch.css',\n  shadow: true,\n})\nexport class LdSwitch implements InnerFocusable {\n  @Element() el: HTMLElement\n\n  /** Size of the switch. */\n  @Prop() size?: 'sm' | 'md' | 'lg'\n\n  /** Defines switch custom color */\n  @Prop() brandColor?: boolean\n\n  /** Defines a description of the contents of the switch component. */\n  @Prop() legend?: string\n\n  /** Automatically focus the form control when the page is loaded. */\n  @Prop({ reflect: true }) autofocus: boolean\n\n  /** Disabled state of the switch. */\n  @Prop() disabled?: boolean\n\n  /** Make each switch item take up as little space as its content requires. */\n  @Prop() fitContent? = false\n\n  /** Associates the control with a form element. */\n  @Prop() form?: string\n\n  /** Alternative disabled state that keeps element focusable */\n  @Prop() ariaDisabled: string\n\n  /** Used to specify the name of the control. */\n  @Prop() name?: string\n\n  /** The value is not editable. */\n  @Prop() readonly?: boolean\n\n  /** Set this property to `true` in order to mark the switch as required. */\n  @Prop() required?: boolean\n\n  /** Tab index of the input. */\n  @Prop() ldTabindex?: number\n\n  @State() hasFocus = false\n\n  /** Emitted with the value of the selected switch item. */\n  @Event() ldswitchchange: EventEmitter<string>\n\n  @Listen('ldswitchitemchange')\n  handleLdSwitchItemChange(ev: CustomEvent<boolean>) {\n    ev.stopImmediatePropagation()\n    const currentLdSwitchItem = ev.target as HTMLLdSwitchItemElement\n    this.ldswitchchange.emit(currentLdSwitchItem.value)\n  }\n\n  /** Sets focus on the radio button. */\n  @Method()\n  async focusInner() {\n    const ldSwitchItems = Array.from(\n      this.el.querySelectorAll('ld-switch-item')\n    ).filter((ldSwitchItem) => !ldSwitchItem.disabled)\n\n    const checkedItem = ldSwitchItems.find(\n      (ldSwitchItem) => ldSwitchItem.checked\n    )\n    if (checkedItem) {\n      checkedItem.focusInner()\n    } else {\n      ldSwitchItems[0].focusInner()\n    }\n  }\n\n  private handleItemFocus = () => {\n    this.hasFocus = true\n  }\n\n  private handleFocus = () => {\n    this.focusInner()\n  }\n\n  private handleFocusout = () => {\n    this.hasFocus = false\n  }\n\n  @Watch('ariaDisabled')\n  @Watch('disabled')\n  @Watch('form')\n  @Watch('ldTabindex')\n  @Watch('name')\n  @Watch('readonly')\n  @Watch('required')\n  updateSwitchItemProps() {\n    const ldSwitchItems = this.el.querySelectorAll('ld-switch-item')\n    ldSwitchItems.forEach((ldSwitchItem) => {\n      if (isAriaDisabled(this.ariaDisabled)) {\n        ldSwitchItem.ariaDisabled = this.ariaDisabled\n      }\n      if (this.disabled) {\n        ldSwitchItem.disabled = this.disabled\n      }\n      ldSwitchItem.form = this.form\n      ldSwitchItem.ldTabindex = this.ldTabindex\n      ldSwitchItem.name = this.name\n      ldSwitchItem.readonly = this.readonly\n      ldSwitchItem.required = this.required\n    })\n  }\n\n  componentWillLoad() {\n    this.updateSwitchItemProps()\n\n    registerAutofocus(this.autofocus)\n  }\n\n  render() {\n    return (\n      <Host\n        class={getClassNames([\n          'ld-switch',\n          this.brandColor && `ld-switch--brand-color`,\n          this.fitContent && `ld-switch--fit-content`,\n          this.size && `ld-switch--${this.size}`,\n        ])}\n        onLdswitchitemfocus={this.handleItemFocus}\n        onFocus={this.handleFocus}\n        onFocusout={this.handleFocusout}\n        tabIndex={\n          this.disabled || isAriaDisabled(this.ariaDisabled)\n            ? this.ldTabindex\n            : this.hasFocus\n              ? -1\n              : this.ldTabindex || 0\n        }\n      >\n        <fieldset part=\"fieldset\">\n          {this.legend && <legend part=\"legend\">{this.legend}</legend>}\n          <slot></slot>\n        </fieldset>\n      </Host>\n    )\n  }\n}\n"],"names":["isAriaDisabled","ariaDisabledValue","focusableSelector","map","selector","join","getFirstFocusable","el","matches","tagName","hostEl","getRootNode","slottedEl","getAttribute","querySelector","Array","from","children","find","child","hasAttribute","shadowRoot","shadowRootChildren","focusable","isInnerFocusable","element","autofocusHandlerTimeout","registerAutofocus","autofocus","setTimeout","firstWithAutofocus","document","querySelectorAll","disabled","focusInner","focusInnerOrFocus","focus","getClassNames","classNames","filter","className","LdSwitch","handleItemFocus","this","hasFocus","handleFocus","handleFocusout","handleLdSwitchItemChange","ev","stopImmediatePropagation","currentLdSwitchItem","target","ldswitchchange","emit","value","ldSwitchItems","ldSwitchItem","checkedItem","checked","updateSwitchItemProps","forEach","ariaDisabled","form","ldTabindex","name","readonly","required","componentWillLoad","render","h","Host","key","class","brandColor","fitContent","size","onLdswitchitemfocus","onFocus","onFocusout","tabIndex","part","legend"],"sourceRoot":""}